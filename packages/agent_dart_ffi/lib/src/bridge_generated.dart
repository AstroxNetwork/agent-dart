// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.72.0.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, unnecessary_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names, invalid_use_of_internal_member, prefer_is_empty, unnecessary_const

import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:uuid/uuid.dart';

import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:uuid/uuid.dart';
import 'bridge_generated.io.dart' if (dart.library.html) 'bridge_generated.web.dart';

abstract class AgentDart {
  /// --------------------
  /// mnemonic
  /// --------------------
  /// create_phrase
  /// phrase_to_seed
  /// seed_to_key
  Future<Uint8List> mnemonicPhraseToSeed({required PhraseToSeedReq req, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMnemonicPhraseToSeedConstMeta;

  Future<Uint8List> mnemonicSeedToKey({required SeedToKeyReq req, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMnemonicSeedToKeyConstMeta;

  /// --------------------
  /// bls
  /// --------------------
  /// bls_init
  /// bls_verify
  Future<bool> blsInit({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kBlsInitConstMeta;

  Future<bool> blsVerify({required BLSVerifyReq req, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kBlsVerifyConstMeta;

  /// --------------
  /// ed25519
  /// --------------------
  /// ed25519_from_seed
  /// ed25519_sign
  /// ed25519_verify
  Future<ED25519Res> ed25519FromSeed({required ED25519FromSeedReq req, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kEd25519FromSeedConstMeta;

  Future<Uint8List> ed25519Sign({required ED25519SignReq req, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kEd25519SignConstMeta;

  Future<bool> ed25519Verify({required ED25519VerifyReq req, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kEd25519VerifyConstMeta;

  /// ---------------------
  /// secp256k1
  /// ---------------------
  Future<Secp256k1IdentityExport> secp256K1FromSeed({required Secp256k1FromSeedReq req, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSecp256K1FromSeedConstMeta;

  Future<SignatureFFI> secp256K1Sign({required Secp256k1SignWithSeedReq req, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSecp256K1SignConstMeta;

  Future<SignatureFFI> secp256K1SignRecoverable({required Secp256k1SignWithSeedReq req, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSecp256K1SignRecoverableConstMeta;

  Future<bool> secp256K1Verify({required Secp256k1VerifyReq req, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSecp256K1VerifyConstMeta;

  Future<Uint8List> secp256K1GetSharedSecret({required Secp256k1ShareSecretReq req, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSecp256K1GetSharedSecretConstMeta;

  Future<Uint8List> secp256K1Recover({required Secp256k1RecoverReq req, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSecp256K1RecoverConstMeta;

  /// ---------------------
  /// secp256k1
  /// ---------------------
  Future<P256IdentityExport> p256FromSeed({required P256FromSeedReq req, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kP256FromSeedConstMeta;

  Future<SignatureFFI> p256Sign({required P256SignWithSeedReq req, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kP256SignConstMeta;

  Future<bool> p256Verify({required P256VerifyReq req, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kP256VerifyConstMeta;

  Future<Uint8List> p256GetSharedSecret({required P256ShareSecretReq req, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kP256GetSharedSecretConstMeta;

  /// ---------------------
  /// schnorr
  /// ---------------------
  Future<SchnorrIdentityExport> schnorrFromSeed({required SchnorrFromSeedReq req, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSchnorrFromSeedConstMeta;

  Future<SignatureFFI> schnorrSign({required SchnorrSignWithSeedReq req, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSchnorrSignConstMeta;

  Future<bool> schnorrVerify({required SchnorrVerifyReq req, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSchnorrVerifyConstMeta;

  /// ---------------------
  /// aes
  /// ---------------------
  Future<Uint8List> aes128CtrEncrypt({required AesEncryptReq req, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kAes128CtrEncryptConstMeta;

  Future<Uint8List> aes128CtrDecrypt({required AesDecryptReq req, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kAes128CtrDecryptConstMeta;

  Future<Uint8List> aes256CbcEncrypt({required AesEncryptReq req, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kAes256CbcEncryptConstMeta;

  Future<Uint8List> aes256CbcDecrypt({required AesDecryptReq req, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kAes256CbcDecryptConstMeta;

  Future<Uint8List> aes256GcmEncrypt({required AesEncryptReq req, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kAes256GcmEncryptConstMeta;

  Future<Uint8List> aes256GcmDecrypt({required AesDecryptReq req, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kAes256GcmDecryptConstMeta;

  Future<KeyDerivedRes> pbkdf2DeriveKey({required PBKDFDeriveReq req, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kPbkdf2DeriveKeyConstMeta;

  Future<KeyDerivedRes> scryptDeriveKey({required ScriptDeriveReq req, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kScryptDeriveKeyConstMeta;
}

class AesDecryptReq {
  final Uint8List key;
  final Uint8List iv;
  final Uint8List cipherText;

  const AesDecryptReq({
    required this.key,
    required this.iv,
    required this.cipherText,
  });
}

class AesEncryptReq {
  final Uint8List key;
  final Uint8List iv;
  final Uint8List message;

  const AesEncryptReq({
    required this.key,
    required this.iv,
    required this.message,
  });
}

class BLSVerifyReq {
  final Uint8List signature;
  final Uint8List message;
  final Uint8List publicKey;

  const BLSVerifyReq({
    required this.signature,
    required this.message,
    required this.publicKey,
  });
}

class ED25519FromSeedReq {
  final Uint8List seed;

  const ED25519FromSeedReq({
    required this.seed,
  });
}

class ED25519Res {
  final Uint8List seed;
  final Uint8List publicKey;

  const ED25519Res({
    required this.seed,
    required this.publicKey,
  });
}

class ED25519SignReq {
  final Uint8List seed;
  final Uint8List message;

  const ED25519SignReq({
    required this.seed,
    required this.message,
  });
}

class ED25519VerifyReq {
  final Uint8List sig;
  final Uint8List message;
  final Uint8List pubKey;

  const ED25519VerifyReq({
    required this.sig,
    required this.message,
    required this.pubKey,
  });
}

class KeyDerivedRes {
  final Uint8List leftBits;
  final Uint8List rightBits;

  const KeyDerivedRes({
    required this.leftBits,
    required this.rightBits,
  });
}

class P256FromSeedReq {
  final Uint8List seed;

  const P256FromSeedReq({
    required this.seed,
  });
}

class P256IdentityExport {
  final Uint8List privateKeyHash;
  final Uint8List derEncodedPublicKey;

  const P256IdentityExport({
    required this.privateKeyHash,
    required this.derEncodedPublicKey,
  });
}

class P256ShareSecretReq {
  final Uint8List seed;
  final Uint8List publicKeyRawBytes;

  const P256ShareSecretReq({
    required this.seed,
    required this.publicKeyRawBytes,
  });
}

class P256SignWithSeedReq {
  final Uint8List msg;
  final Uint8List seed;

  const P256SignWithSeedReq({
    required this.msg,
    required this.seed,
  });
}

class P256VerifyReq {
  final Uint8List messageHash;
  final Uint8List signatureBytes;
  final Uint8List publicKeyBytes;

  const P256VerifyReq({
    required this.messageHash,
    required this.signatureBytes,
    required this.publicKeyBytes,
  });
}

class PBKDFDeriveReq {
  final Uint8List password;
  final Uint8List salt;
  final int c;

  const PBKDFDeriveReq({
    required this.password,
    required this.salt,
    required this.c,
  });
}

class PhraseToSeedReq {
  final String phrase;
  final String password;

  const PhraseToSeedReq({
    required this.phrase,
    required this.password,
  });
}

class SchnorrFromSeedReq {
  final Uint8List seed;

  const SchnorrFromSeedReq({
    required this.seed,
  });
}

class SchnorrIdentityExport {
  final Uint8List privateKeyHash;
  final Uint8List publicKeyHash;

  const SchnorrIdentityExport({
    required this.privateKeyHash,
    required this.publicKeyHash,
  });
}

class SchnorrSignWithSeedReq {
  final Uint8List msg;
  final Uint8List seed;
  final Uint8List? auxRand;

  const SchnorrSignWithSeedReq({
    required this.msg,
    required this.seed,
    this.auxRand,
  });
}

class SchnorrVerifyReq {
  final Uint8List messageHash;
  final Uint8List signatureBytes;
  final Uint8List publicKeyBytes;

  const SchnorrVerifyReq({
    required this.messageHash,
    required this.signatureBytes,
    required this.publicKeyBytes,
  });
}

class ScriptDeriveReq {
  final Uint8List password;
  final Uint8List salt;
  final int n;
  final int p;
  final int r;

  const ScriptDeriveReq({
    required this.password,
    required this.salt,
    required this.n,
    required this.p,
    required this.r,
  });
}

class Secp256k1FromSeedReq {
  final Uint8List seed;

  const Secp256k1FromSeedReq({
    required this.seed,
  });
}

class Secp256k1IdentityExport {
  final Uint8List privateKeyHash;
  final Uint8List derEncodedPublicKey;

  const Secp256k1IdentityExport({
    required this.privateKeyHash,
    required this.derEncodedPublicKey,
  });
}

class Secp256k1RecoverReq {
  final Uint8List messagePreHashed;
  final Uint8List signatureBytes;
  final int? chainId;

  const Secp256k1RecoverReq({
    required this.messagePreHashed,
    required this.signatureBytes,
    this.chainId,
  });
}

class Secp256k1ShareSecretReq {
  final Uint8List seed;
  final Uint8List publicKeyRawBytes;

  const Secp256k1ShareSecretReq({
    required this.seed,
    required this.publicKeyRawBytes,
  });
}

class Secp256k1SignWithSeedReq {
  final Uint8List msg;
  final Uint8List seed;

  const Secp256k1SignWithSeedReq({
    required this.msg,
    required this.seed,
  });
}

class Secp256k1VerifyReq {
  final Uint8List messageHash;
  final Uint8List signatureBytes;
  final Uint8List publicKeyBytes;

  const Secp256k1VerifyReq({
    required this.messageHash,
    required this.signatureBytes,
    required this.publicKeyBytes,
  });
}

class SeedToKeyReq {
  final Uint8List seed;
  final String path;

  const SeedToKeyReq({
    required this.seed,
    required this.path,
  });
}

class SignatureFFI {
  /// This is the DER-encoded public key.
  final Uint8List? publicKey;

  /// The signature bytes.
  final Uint8List? signature;

  const SignatureFFI({
    this.publicKey,
    this.signature,
  });
}

class AgentDartImpl implements AgentDart {
  final AgentDartPlatform _platform;
  factory AgentDartImpl(ExternalLibrary dylib) => AgentDartImpl.raw(AgentDartPlatform(dylib));

  /// Only valid on web/WASM platforms.
  factory AgentDartImpl.wasm(FutureOr<WasmModule> module) => AgentDartImpl(module as ExternalLibrary);
  AgentDartImpl.raw(this._platform);
  Future<Uint8List> mnemonicPhraseToSeed({required PhraseToSeedReq req, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_phrase_to_seed_req(req);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_mnemonic_phrase_to_seed(port_, arg0),
      parseSuccessData: _wire2api_uint_8_list,
      constMeta: kMnemonicPhraseToSeedConstMeta,
      argValues: [
        req
      ],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMnemonicPhraseToSeedConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "mnemonic_phrase_to_seed",
        argNames: [
          "req"
        ],
      );

  Future<Uint8List> mnemonicSeedToKey({required SeedToKeyReq req, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_seed_to_key_req(req);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_mnemonic_seed_to_key(port_, arg0),
      parseSuccessData: _wire2api_uint_8_list,
      constMeta: kMnemonicSeedToKeyConstMeta,
      argValues: [
        req
      ],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMnemonicSeedToKeyConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "mnemonic_seed_to_key",
        argNames: [
          "req"
        ],
      );

  Future<bool> blsInit({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_bls_init(port_),
      parseSuccessData: _wire2api_bool,
      constMeta: kBlsInitConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kBlsInitConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "bls_init",
        argNames: [],
      );

  Future<bool> blsVerify({required BLSVerifyReq req, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_bls_verify_req(req);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_bls_verify(port_, arg0),
      parseSuccessData: _wire2api_bool,
      constMeta: kBlsVerifyConstMeta,
      argValues: [
        req
      ],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kBlsVerifyConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "bls_verify",
        argNames: [
          "req"
        ],
      );

  Future<ED25519Res> ed25519FromSeed({required ED25519FromSeedReq req, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_ed_25519_from_seed_req(req);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_ed25519_from_seed(port_, arg0),
      parseSuccessData: _wire2api_ed_25519_res,
      constMeta: kEd25519FromSeedConstMeta,
      argValues: [
        req
      ],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kEd25519FromSeedConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "ed25519_from_seed",
        argNames: [
          "req"
        ],
      );

  Future<Uint8List> ed25519Sign({required ED25519SignReq req, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_ed_25519_sign_req(req);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_ed25519_sign(port_, arg0),
      parseSuccessData: _wire2api_uint_8_list,
      constMeta: kEd25519SignConstMeta,
      argValues: [
        req
      ],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kEd25519SignConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "ed25519_sign",
        argNames: [
          "req"
        ],
      );

  Future<bool> ed25519Verify({required ED25519VerifyReq req, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_ed_25519_verify_req(req);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_ed25519_verify(port_, arg0),
      parseSuccessData: _wire2api_bool,
      constMeta: kEd25519VerifyConstMeta,
      argValues: [
        req
      ],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kEd25519VerifyConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "ed25519_verify",
        argNames: [
          "req"
        ],
      );

  Future<Secp256k1IdentityExport> secp256K1FromSeed({required Secp256k1FromSeedReq req, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_secp_256_k_1_from_seed_req(req);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_secp256k1_from_seed(port_, arg0),
      parseSuccessData: _wire2api_secp_256_k_1_identity_export,
      constMeta: kSecp256K1FromSeedConstMeta,
      argValues: [
        req
      ],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSecp256K1FromSeedConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "secp256k1_from_seed",
        argNames: [
          "req"
        ],
      );

  Future<SignatureFFI> secp256K1Sign({required Secp256k1SignWithSeedReq req, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_secp_256_k_1_sign_with_seed_req(req);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_secp256k1_sign(port_, arg0),
      parseSuccessData: _wire2api_signature_ffi,
      constMeta: kSecp256K1SignConstMeta,
      argValues: [
        req
      ],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSecp256K1SignConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "secp256k1_sign",
        argNames: [
          "req"
        ],
      );

  Future<SignatureFFI> secp256K1SignRecoverable({required Secp256k1SignWithSeedReq req, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_secp_256_k_1_sign_with_seed_req(req);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_secp256k1_sign_recoverable(port_, arg0),
      parseSuccessData: _wire2api_signature_ffi,
      constMeta: kSecp256K1SignRecoverableConstMeta,
      argValues: [
        req
      ],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSecp256K1SignRecoverableConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "secp256k1_sign_recoverable",
        argNames: [
          "req"
        ],
      );

  Future<bool> secp256K1Verify({required Secp256k1VerifyReq req, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_secp_256_k_1_verify_req(req);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_secp256k1_verify(port_, arg0),
      parseSuccessData: _wire2api_bool,
      constMeta: kSecp256K1VerifyConstMeta,
      argValues: [
        req
      ],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSecp256K1VerifyConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "secp256k1_verify",
        argNames: [
          "req"
        ],
      );

  Future<Uint8List> secp256K1GetSharedSecret({required Secp256k1ShareSecretReq req, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_secp_256_k_1_share_secret_req(req);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_secp256k1_get_shared_secret(port_, arg0),
      parseSuccessData: _wire2api_uint_8_list,
      constMeta: kSecp256K1GetSharedSecretConstMeta,
      argValues: [
        req
      ],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSecp256K1GetSharedSecretConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "secp256k1_get_shared_secret",
        argNames: [
          "req"
        ],
      );

  Future<Uint8List> secp256K1Recover({required Secp256k1RecoverReq req, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_secp_256_k_1_recover_req(req);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_secp256k1_recover(port_, arg0),
      parseSuccessData: _wire2api_uint_8_list,
      constMeta: kSecp256K1RecoverConstMeta,
      argValues: [
        req
      ],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSecp256K1RecoverConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "secp256k1_recover",
        argNames: [
          "req"
        ],
      );

  Future<P256IdentityExport> p256FromSeed({required P256FromSeedReq req, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_p_256_from_seed_req(req);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_p256_from_seed(port_, arg0),
      parseSuccessData: _wire2api_p_256_identity_export,
      constMeta: kP256FromSeedConstMeta,
      argValues: [
        req
      ],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kP256FromSeedConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "p256_from_seed",
        argNames: [
          "req"
        ],
      );

  Future<SignatureFFI> p256Sign({required P256SignWithSeedReq req, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_p_256_sign_with_seed_req(req);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_p256_sign(port_, arg0),
      parseSuccessData: _wire2api_signature_ffi,
      constMeta: kP256SignConstMeta,
      argValues: [
        req
      ],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kP256SignConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "p256_sign",
        argNames: [
          "req"
        ],
      );

  Future<bool> p256Verify({required P256VerifyReq req, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_p_256_verify_req(req);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_p256_verify(port_, arg0),
      parseSuccessData: _wire2api_bool,
      constMeta: kP256VerifyConstMeta,
      argValues: [
        req
      ],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kP256VerifyConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "p256_verify",
        argNames: [
          "req"
        ],
      );

  Future<Uint8List> p256GetSharedSecret({required P256ShareSecretReq req, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_p_256_share_secret_req(req);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_p256_get_shared_secret(port_, arg0),
      parseSuccessData: _wire2api_uint_8_list,
      constMeta: kP256GetSharedSecretConstMeta,
      argValues: [
        req
      ],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kP256GetSharedSecretConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "p256_get_shared_secret",
        argNames: [
          "req"
        ],
      );

  Future<SchnorrIdentityExport> schnorrFromSeed({required SchnorrFromSeedReq req, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_schnorr_from_seed_req(req);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_schnorr_from_seed(port_, arg0),
      parseSuccessData: _wire2api_schnorr_identity_export,
      constMeta: kSchnorrFromSeedConstMeta,
      argValues: [
        req
      ],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSchnorrFromSeedConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "schnorr_from_seed",
        argNames: [
          "req"
        ],
      );

  Future<SignatureFFI> schnorrSign({required SchnorrSignWithSeedReq req, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_schnorr_sign_with_seed_req(req);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_schnorr_sign(port_, arg0),
      parseSuccessData: _wire2api_signature_ffi,
      constMeta: kSchnorrSignConstMeta,
      argValues: [
        req
      ],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSchnorrSignConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "schnorr_sign",
        argNames: [
          "req"
        ],
      );

  Future<bool> schnorrVerify({required SchnorrVerifyReq req, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_schnorr_verify_req(req);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_schnorr_verify(port_, arg0),
      parseSuccessData: _wire2api_bool,
      constMeta: kSchnorrVerifyConstMeta,
      argValues: [
        req
      ],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSchnorrVerifyConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "schnorr_verify",
        argNames: [
          "req"
        ],
      );

  Future<Uint8List> aes128CtrEncrypt({required AesEncryptReq req, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_aes_encrypt_req(req);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_aes_128_ctr_encrypt(port_, arg0),
      parseSuccessData: _wire2api_uint_8_list,
      constMeta: kAes128CtrEncryptConstMeta,
      argValues: [
        req
      ],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kAes128CtrEncryptConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "aes_128_ctr_encrypt",
        argNames: [
          "req"
        ],
      );

  Future<Uint8List> aes128CtrDecrypt({required AesDecryptReq req, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_aes_decrypt_req(req);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_aes_128_ctr_decrypt(port_, arg0),
      parseSuccessData: _wire2api_uint_8_list,
      constMeta: kAes128CtrDecryptConstMeta,
      argValues: [
        req
      ],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kAes128CtrDecryptConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "aes_128_ctr_decrypt",
        argNames: [
          "req"
        ],
      );

  Future<Uint8List> aes256CbcEncrypt({required AesEncryptReq req, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_aes_encrypt_req(req);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_aes_256_cbc_encrypt(port_, arg0),
      parseSuccessData: _wire2api_uint_8_list,
      constMeta: kAes256CbcEncryptConstMeta,
      argValues: [
        req
      ],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kAes256CbcEncryptConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "aes_256_cbc_encrypt",
        argNames: [
          "req"
        ],
      );

  Future<Uint8List> aes256CbcDecrypt({required AesDecryptReq req, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_aes_decrypt_req(req);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_aes_256_cbc_decrypt(port_, arg0),
      parseSuccessData: _wire2api_uint_8_list,
      constMeta: kAes256CbcDecryptConstMeta,
      argValues: [
        req
      ],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kAes256CbcDecryptConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "aes_256_cbc_decrypt",
        argNames: [
          "req"
        ],
      );

  Future<Uint8List> aes256GcmEncrypt({required AesEncryptReq req, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_aes_encrypt_req(req);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_aes_256_gcm_encrypt(port_, arg0),
      parseSuccessData: _wire2api_uint_8_list,
      constMeta: kAes256GcmEncryptConstMeta,
      argValues: [
        req
      ],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kAes256GcmEncryptConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "aes_256_gcm_encrypt",
        argNames: [
          "req"
        ],
      );

  Future<Uint8List> aes256GcmDecrypt({required AesDecryptReq req, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_aes_decrypt_req(req);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_aes_256_gcm_decrypt(port_, arg0),
      parseSuccessData: _wire2api_uint_8_list,
      constMeta: kAes256GcmDecryptConstMeta,
      argValues: [
        req
      ],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kAes256GcmDecryptConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "aes_256_gcm_decrypt",
        argNames: [
          "req"
        ],
      );

  Future<KeyDerivedRes> pbkdf2DeriveKey({required PBKDFDeriveReq req, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_pbkdf_derive_req(req);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_pbkdf2_derive_key(port_, arg0),
      parseSuccessData: _wire2api_key_derived_res,
      constMeta: kPbkdf2DeriveKeyConstMeta,
      argValues: [
        req
      ],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kPbkdf2DeriveKeyConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "pbkdf2_derive_key",
        argNames: [
          "req"
        ],
      );

  Future<KeyDerivedRes> scryptDeriveKey({required ScriptDeriveReq req, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_script_derive_req(req);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_scrypt_derive_key(port_, arg0),
      parseSuccessData: _wire2api_key_derived_res,
      constMeta: kScryptDeriveKeyConstMeta,
      argValues: [
        req
      ],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kScryptDeriveKeyConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "scrypt_derive_key",
        argNames: [
          "req"
        ],
      );

  void dispose() {
    _platform.dispose();
  }
// Section: wire2api

  bool _wire2api_bool(dynamic raw) {
    return raw as bool;
  }

  ED25519Res _wire2api_ed_25519_res(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2) throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return ED25519Res(
      seed: _wire2api_uint_8_list(arr[0]),
      publicKey: _wire2api_uint_8_list(arr[1]),
    );
  }

  KeyDerivedRes _wire2api_key_derived_res(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2) throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return KeyDerivedRes(
      leftBits: _wire2api_uint_8_list(arr[0]),
      rightBits: _wire2api_uint_8_list(arr[1]),
    );
  }

  Uint8List? _wire2api_opt_uint_8_list(dynamic raw) {
    return raw == null ? null : _wire2api_uint_8_list(raw);
  }

  P256IdentityExport _wire2api_p_256_identity_export(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2) throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return P256IdentityExport(
      privateKeyHash: _wire2api_uint_8_list(arr[0]),
      derEncodedPublicKey: _wire2api_uint_8_list(arr[1]),
    );
  }

  SchnorrIdentityExport _wire2api_schnorr_identity_export(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2) throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return SchnorrIdentityExport(
      privateKeyHash: _wire2api_uint_8_list(arr[0]),
      publicKeyHash: _wire2api_uint_8_list(arr[1]),
    );
  }

  Secp256k1IdentityExport _wire2api_secp_256_k_1_identity_export(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2) throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return Secp256k1IdentityExport(
      privateKeyHash: _wire2api_uint_8_list(arr[0]),
      derEncodedPublicKey: _wire2api_uint_8_list(arr[1]),
    );
  }

  SignatureFFI _wire2api_signature_ffi(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2) throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return SignatureFFI(
      publicKey: _wire2api_opt_uint_8_list(arr[0]),
      signature: _wire2api_opt_uint_8_list(arr[1]),
    );
  }

  int _wire2api_u8(dynamic raw) {
    return raw as int;
  }

  Uint8List _wire2api_uint_8_list(dynamic raw) {
    return raw as Uint8List;
  }
}

// Section: api2wire

@protected
int api2wire_u32(int raw) {
  return raw;
}

@protected
int api2wire_u8(int raw) {
  return raw;
}

// Section: finalizer
