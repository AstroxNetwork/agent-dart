// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.72.0.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, unnecessary_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names, invalid_use_of_internal_member, prefer_is_empty, unnecessary_const

import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:uuid/uuid.dart';
import 'bridge_generated.dart';
export 'bridge_generated.dart';

class AgentDartPlatform extends FlutterRustBridgeBase<AgentDartWire> with FlutterRustBridgeSetupMixin {
  AgentDartPlatform(FutureOr<WasmModule> dylib) : super(AgentDartWire(dylib)) {
    setupMixinConstructor();
  }
  Future<void> setup() => inner.init;

// Section: api2wire

  @protected
  String api2wire_String(String raw) {
    return raw;
  }

  @protected
  List<dynamic> api2wire_aes_decrypt_req(AesDecryptReq raw) {
    return [
      api2wire_uint_8_list(raw.key),
      api2wire_uint_8_list(raw.iv),
      api2wire_uint_8_list(raw.cipherText)
    ];
  }

  @protected
  List<dynamic> api2wire_aes_encrypt_req(AesEncryptReq raw) {
    return [
      api2wire_uint_8_list(raw.key),
      api2wire_uint_8_list(raw.iv),
      api2wire_uint_8_list(raw.message)
    ];
  }

  @protected
  List<dynamic> api2wire_bls_verify_req(BLSVerifyReq raw) {
    return [
      api2wire_uint_8_list(raw.signature),
      api2wire_uint_8_list(raw.message),
      api2wire_uint_8_list(raw.publicKey)
    ];
  }

  @protected
  List<dynamic> api2wire_box_autoadd_aes_decrypt_req(AesDecryptReq raw) {
    return api2wire_aes_decrypt_req(raw);
  }

  @protected
  List<dynamic> api2wire_box_autoadd_aes_encrypt_req(AesEncryptReq raw) {
    return api2wire_aes_encrypt_req(raw);
  }

  @protected
  List<dynamic> api2wire_box_autoadd_bls_verify_req(BLSVerifyReq raw) {
    return api2wire_bls_verify_req(raw);
  }

  @protected
  List<dynamic> api2wire_box_autoadd_ed_25519_from_seed_req(ED25519FromSeedReq raw) {
    return api2wire_ed_25519_from_seed_req(raw);
  }

  @protected
  List<dynamic> api2wire_box_autoadd_ed_25519_sign_req(ED25519SignReq raw) {
    return api2wire_ed_25519_sign_req(raw);
  }

  @protected
  List<dynamic> api2wire_box_autoadd_ed_25519_verify_req(ED25519VerifyReq raw) {
    return api2wire_ed_25519_verify_req(raw);
  }

  @protected
  List<dynamic> api2wire_box_autoadd_p_256_from_seed_req(P256FromSeedReq raw) {
    return api2wire_p_256_from_seed_req(raw);
  }

  @protected
  List<dynamic> api2wire_box_autoadd_p_256_share_secret_req(P256ShareSecretReq raw) {
    return api2wire_p_256_share_secret_req(raw);
  }

  @protected
  List<dynamic> api2wire_box_autoadd_p_256_sign_with_seed_req(P256SignWithSeedReq raw) {
    return api2wire_p_256_sign_with_seed_req(raw);
  }

  @protected
  List<dynamic> api2wire_box_autoadd_p_256_verify_req(P256VerifyReq raw) {
    return api2wire_p_256_verify_req(raw);
  }

  @protected
  List<dynamic> api2wire_box_autoadd_pbkdf_derive_req(PBKDFDeriveReq raw) {
    return api2wire_pbkdf_derive_req(raw);
  }

  @protected
  List<dynamic> api2wire_box_autoadd_phrase_to_seed_req(PhraseToSeedReq raw) {
    return api2wire_phrase_to_seed_req(raw);
  }

  @protected
  List<dynamic> api2wire_box_autoadd_schnorr_from_seed_req(SchnorrFromSeedReq raw) {
    return api2wire_schnorr_from_seed_req(raw);
  }

  @protected
  List<dynamic> api2wire_box_autoadd_schnorr_sign_with_seed_req(SchnorrSignWithSeedReq raw) {
    return api2wire_schnorr_sign_with_seed_req(raw);
  }

  @protected
  List<dynamic> api2wire_box_autoadd_schnorr_verify_req(SchnorrVerifyReq raw) {
    return api2wire_schnorr_verify_req(raw);
  }

  @protected
  List<dynamic> api2wire_box_autoadd_script_derive_req(ScriptDeriveReq raw) {
    return api2wire_script_derive_req(raw);
  }

  @protected
  List<dynamic> api2wire_box_autoadd_secp_256_k_1_from_seed_req(Secp256k1FromSeedReq raw) {
    return api2wire_secp_256_k_1_from_seed_req(raw);
  }

  @protected
  List<dynamic> api2wire_box_autoadd_secp_256_k_1_recover_req(Secp256k1RecoverReq raw) {
    return api2wire_secp_256_k_1_recover_req(raw);
  }

  @protected
  List<dynamic> api2wire_box_autoadd_secp_256_k_1_share_secret_req(Secp256k1ShareSecretReq raw) {
    return api2wire_secp_256_k_1_share_secret_req(raw);
  }

  @protected
  List<dynamic> api2wire_box_autoadd_secp_256_k_1_sign_with_seed_req(Secp256k1SignWithSeedReq raw) {
    return api2wire_secp_256_k_1_sign_with_seed_req(raw);
  }

  @protected
  List<dynamic> api2wire_box_autoadd_secp_256_k_1_verify_req(Secp256k1VerifyReq raw) {
    return api2wire_secp_256_k_1_verify_req(raw);
  }

  @protected
  List<dynamic> api2wire_box_autoadd_seed_to_key_req(SeedToKeyReq raw) {
    return api2wire_seed_to_key_req(raw);
  }

  @protected
  int api2wire_box_autoadd_u8(int raw) {
    return api2wire_u8(raw);
  }

  @protected
  List<dynamic> api2wire_ed_25519_from_seed_req(ED25519FromSeedReq raw) {
    return [
      api2wire_uint_8_list(raw.seed)
    ];
  }

  @protected
  List<dynamic> api2wire_ed_25519_sign_req(ED25519SignReq raw) {
    return [
      api2wire_uint_8_list(raw.seed),
      api2wire_uint_8_list(raw.message)
    ];
  }

  @protected
  List<dynamic> api2wire_ed_25519_verify_req(ED25519VerifyReq raw) {
    return [
      api2wire_uint_8_list(raw.sig),
      api2wire_uint_8_list(raw.message),
      api2wire_uint_8_list(raw.pubKey)
    ];
  }

  @protected
  int? api2wire_opt_box_autoadd_u8(int? raw) {
    return raw == null ? null : api2wire_box_autoadd_u8(raw);
  }

  @protected
  Uint8List? api2wire_opt_uint_8_list(Uint8List? raw) {
    return raw == null ? null : api2wire_uint_8_list(raw);
  }

  @protected
  List<dynamic> api2wire_p_256_from_seed_req(P256FromSeedReq raw) {
    return [
      api2wire_uint_8_list(raw.seed)
    ];
  }

  @protected
  List<dynamic> api2wire_p_256_share_secret_req(P256ShareSecretReq raw) {
    return [
      api2wire_uint_8_list(raw.seed),
      api2wire_uint_8_list(raw.publicKeyRawBytes)
    ];
  }

  @protected
  List<dynamic> api2wire_p_256_sign_with_seed_req(P256SignWithSeedReq raw) {
    return [
      api2wire_uint_8_list(raw.msg),
      api2wire_uint_8_list(raw.seed)
    ];
  }

  @protected
  List<dynamic> api2wire_p_256_verify_req(P256VerifyReq raw) {
    return [
      api2wire_uint_8_list(raw.messageHash),
      api2wire_uint_8_list(raw.signatureBytes),
      api2wire_uint_8_list(raw.publicKeyBytes)
    ];
  }

  @protected
  List<dynamic> api2wire_pbkdf_derive_req(PBKDFDeriveReq raw) {
    return [
      api2wire_uint_8_list(raw.password),
      api2wire_uint_8_list(raw.salt),
      api2wire_u32(raw.c)
    ];
  }

  @protected
  List<dynamic> api2wire_phrase_to_seed_req(PhraseToSeedReq raw) {
    return [
      api2wire_String(raw.phrase),
      api2wire_String(raw.password)
    ];
  }

  @protected
  List<dynamic> api2wire_schnorr_from_seed_req(SchnorrFromSeedReq raw) {
    return [
      api2wire_uint_8_list(raw.seed)
    ];
  }

  @protected
  List<dynamic> api2wire_schnorr_sign_with_seed_req(SchnorrSignWithSeedReq raw) {
    return [
      api2wire_uint_8_list(raw.msg),
      api2wire_uint_8_list(raw.seed),
      api2wire_opt_uint_8_list(raw.auxRand)
    ];
  }

  @protected
  List<dynamic> api2wire_schnorr_verify_req(SchnorrVerifyReq raw) {
    return [
      api2wire_uint_8_list(raw.messageHash),
      api2wire_uint_8_list(raw.signatureBytes),
      api2wire_uint_8_list(raw.publicKeyBytes)
    ];
  }

  @protected
  List<dynamic> api2wire_script_derive_req(ScriptDeriveReq raw) {
    return [
      api2wire_uint_8_list(raw.password),
      api2wire_uint_8_list(raw.salt),
      api2wire_u32(raw.n),
      api2wire_u32(raw.p),
      api2wire_u32(raw.r)
    ];
  }

  @protected
  List<dynamic> api2wire_secp_256_k_1_from_seed_req(Secp256k1FromSeedReq raw) {
    return [
      api2wire_uint_8_list(raw.seed)
    ];
  }

  @protected
  List<dynamic> api2wire_secp_256_k_1_recover_req(Secp256k1RecoverReq raw) {
    return [
      api2wire_uint_8_list(raw.messagePreHashed),
      api2wire_uint_8_list(raw.signatureBytes),
      api2wire_opt_box_autoadd_u8(raw.chainId)
    ];
  }

  @protected
  List<dynamic> api2wire_secp_256_k_1_share_secret_req(Secp256k1ShareSecretReq raw) {
    return [
      api2wire_uint_8_list(raw.seed),
      api2wire_uint_8_list(raw.publicKeyRawBytes)
    ];
  }

  @protected
  List<dynamic> api2wire_secp_256_k_1_sign_with_seed_req(Secp256k1SignWithSeedReq raw) {
    return [
      api2wire_uint_8_list(raw.msg),
      api2wire_uint_8_list(raw.seed)
    ];
  }

  @protected
  List<dynamic> api2wire_secp_256_k_1_verify_req(Secp256k1VerifyReq raw) {
    return [
      api2wire_uint_8_list(raw.messageHash),
      api2wire_uint_8_list(raw.signatureBytes),
      api2wire_uint_8_list(raw.publicKeyBytes)
    ];
  }

  @protected
  List<dynamic> api2wire_seed_to_key_req(SeedToKeyReq raw) {
    return [
      api2wire_uint_8_list(raw.seed),
      api2wire_String(raw.path)
    ];
  }

  @protected
  Uint8List api2wire_uint_8_list(Uint8List raw) {
    return raw;
  }
// Section: finalizer
}

// Section: WASM wire module

@JS('wasm_bindgen')
external AgentDartWasmModule get wasmModule;

@JS()
@anonymous
class AgentDartWasmModule implements WasmModule {
  external Object /* Promise */ call([String? moduleName]);
  external AgentDartWasmModule bind(dynamic thisArg, String moduleName);
  external dynamic /* void */ wire_mnemonic_phrase_to_seed(NativePortType port_, List<dynamic> req);

  external dynamic /* void */ wire_mnemonic_seed_to_key(NativePortType port_, List<dynamic> req);

  external dynamic /* void */ wire_bls_init(NativePortType port_);

  external dynamic /* void */ wire_bls_verify(NativePortType port_, List<dynamic> req);

  external dynamic /* void */ wire_ed25519_from_seed(NativePortType port_, List<dynamic> req);

  external dynamic /* void */ wire_ed25519_sign(NativePortType port_, List<dynamic> req);

  external dynamic /* void */ wire_ed25519_verify(NativePortType port_, List<dynamic> req);

  external dynamic /* void */ wire_secp256k1_from_seed(NativePortType port_, List<dynamic> req);

  external dynamic /* void */ wire_secp256k1_sign(NativePortType port_, List<dynamic> req);

  external dynamic /* void */ wire_secp256k1_sign_recoverable(NativePortType port_, List<dynamic> req);

  external dynamic /* void */ wire_secp256k1_verify(NativePortType port_, List<dynamic> req);

  external dynamic /* void */ wire_secp256k1_get_shared_secret(NativePortType port_, List<dynamic> req);

  external dynamic /* void */ wire_secp256k1_recover(NativePortType port_, List<dynamic> req);

  external dynamic /* void */ wire_p256_from_seed(NativePortType port_, List<dynamic> req);

  external dynamic /* void */ wire_p256_sign(NativePortType port_, List<dynamic> req);

  external dynamic /* void */ wire_p256_verify(NativePortType port_, List<dynamic> req);

  external dynamic /* void */ wire_p256_get_shared_secret(NativePortType port_, List<dynamic> req);

  external dynamic /* void */ wire_schnorr_from_seed(NativePortType port_, List<dynamic> req);

  external dynamic /* void */ wire_schnorr_sign(NativePortType port_, List<dynamic> req);

  external dynamic /* void */ wire_schnorr_verify(NativePortType port_, List<dynamic> req);

  external dynamic /* void */ wire_aes_128_ctr_encrypt(NativePortType port_, List<dynamic> req);

  external dynamic /* void */ wire_aes_128_ctr_decrypt(NativePortType port_, List<dynamic> req);

  external dynamic /* void */ wire_aes_256_cbc_encrypt(NativePortType port_, List<dynamic> req);

  external dynamic /* void */ wire_aes_256_cbc_decrypt(NativePortType port_, List<dynamic> req);

  external dynamic /* void */ wire_aes_256_gcm_encrypt(NativePortType port_, List<dynamic> req);

  external dynamic /* void */ wire_aes_256_gcm_decrypt(NativePortType port_, List<dynamic> req);

  external dynamic /* void */ wire_pbkdf2_derive_key(NativePortType port_, List<dynamic> req);

  external dynamic /* void */ wire_scrypt_derive_key(NativePortType port_, List<dynamic> req);
}

// Section: WASM wire connector

class AgentDartWire extends FlutterRustBridgeWasmWireBase<AgentDartWasmModule> {
  AgentDartWire(FutureOr<WasmModule> module) : super(WasmModule.cast<AgentDartWasmModule>(module));

  void wire_mnemonic_phrase_to_seed(NativePortType port_, List<dynamic> req) => wasmModule.wire_mnemonic_phrase_to_seed(port_, req);

  void wire_mnemonic_seed_to_key(NativePortType port_, List<dynamic> req) => wasmModule.wire_mnemonic_seed_to_key(port_, req);

  void wire_bls_init(NativePortType port_) => wasmModule.wire_bls_init(port_);

  void wire_bls_verify(NativePortType port_, List<dynamic> req) => wasmModule.wire_bls_verify(port_, req);

  void wire_ed25519_from_seed(NativePortType port_, List<dynamic> req) => wasmModule.wire_ed25519_from_seed(port_, req);

  void wire_ed25519_sign(NativePortType port_, List<dynamic> req) => wasmModule.wire_ed25519_sign(port_, req);

  void wire_ed25519_verify(NativePortType port_, List<dynamic> req) => wasmModule.wire_ed25519_verify(port_, req);

  void wire_secp256k1_from_seed(NativePortType port_, List<dynamic> req) => wasmModule.wire_secp256k1_from_seed(port_, req);

  void wire_secp256k1_sign(NativePortType port_, List<dynamic> req) => wasmModule.wire_secp256k1_sign(port_, req);

  void wire_secp256k1_sign_recoverable(NativePortType port_, List<dynamic> req) => wasmModule.wire_secp256k1_sign_recoverable(port_, req);

  void wire_secp256k1_verify(NativePortType port_, List<dynamic> req) => wasmModule.wire_secp256k1_verify(port_, req);

  void wire_secp256k1_get_shared_secret(NativePortType port_, List<dynamic> req) => wasmModule.wire_secp256k1_get_shared_secret(port_, req);

  void wire_secp256k1_recover(NativePortType port_, List<dynamic> req) => wasmModule.wire_secp256k1_recover(port_, req);

  void wire_p256_from_seed(NativePortType port_, List<dynamic> req) => wasmModule.wire_p256_from_seed(port_, req);

  void wire_p256_sign(NativePortType port_, List<dynamic> req) => wasmModule.wire_p256_sign(port_, req);

  void wire_p256_verify(NativePortType port_, List<dynamic> req) => wasmModule.wire_p256_verify(port_, req);

  void wire_p256_get_shared_secret(NativePortType port_, List<dynamic> req) => wasmModule.wire_p256_get_shared_secret(port_, req);

  void wire_schnorr_from_seed(NativePortType port_, List<dynamic> req) => wasmModule.wire_schnorr_from_seed(port_, req);

  void wire_schnorr_sign(NativePortType port_, List<dynamic> req) => wasmModule.wire_schnorr_sign(port_, req);

  void wire_schnorr_verify(NativePortType port_, List<dynamic> req) => wasmModule.wire_schnorr_verify(port_, req);

  void wire_aes_128_ctr_encrypt(NativePortType port_, List<dynamic> req) => wasmModule.wire_aes_128_ctr_encrypt(port_, req);

  void wire_aes_128_ctr_decrypt(NativePortType port_, List<dynamic> req) => wasmModule.wire_aes_128_ctr_decrypt(port_, req);

  void wire_aes_256_cbc_encrypt(NativePortType port_, List<dynamic> req) => wasmModule.wire_aes_256_cbc_encrypt(port_, req);

  void wire_aes_256_cbc_decrypt(NativePortType port_, List<dynamic> req) => wasmModule.wire_aes_256_cbc_decrypt(port_, req);

  void wire_aes_256_gcm_encrypt(NativePortType port_, List<dynamic> req) => wasmModule.wire_aes_256_gcm_encrypt(port_, req);

  void wire_aes_256_gcm_decrypt(NativePortType port_, List<dynamic> req) => wasmModule.wire_aes_256_gcm_decrypt(port_, req);

  void wire_pbkdf2_derive_key(NativePortType port_, List<dynamic> req) => wasmModule.wire_pbkdf2_derive_key(port_, req);

  void wire_scrypt_derive_key(NativePortType port_, List<dynamic> req) => wasmModule.wire_scrypt_derive_key(port_, req);
}
