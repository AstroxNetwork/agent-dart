// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.77.0.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, unnecessary_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names, invalid_use_of_internal_member, prefer_is_empty, unnecessary_const

import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:uuid/uuid.dart';
import 'bridge_generated.dart';
export 'bridge_generated.dart';

class AgentDartPlatform extends FlutterRustBridgeBase<AgentDartWire> with FlutterRustBridgeSetupMixin {
  AgentDartPlatform(FutureOr<WasmModule> dylib) : super(AgentDartWire(dylib)) {
    setupMixinConstructor();
  }
  Future<void> setup() => inner.init;

// Section: api2wire

  @protected
  Object api2wire_BdkDescriptor(BdkDescriptor raw) {
    return raw.shareOrMove();
  }

  @protected
  Object api2wire_BlockchainInstance(BlockchainInstance raw) {
    return raw.shareOrMove();
  }

  @protected
  String api2wire_String(String raw) {
    return raw;
  }

  @protected
  Object api2wire_WalletInstance(WalletInstance raw) {
    return raw.shareOrMove();
  }

  @protected
  List<dynamic> api2wire_address_index(AddressIndex raw) {
    if (raw is AddressIndex_New) {
      return [
        0
      ];
    }
    if (raw is AddressIndex_LastUnused) {
      return [
        1
      ];
    }
    if (raw is AddressIndex_Peek) {
      return [
        2,
        api2wire_u32(raw.index)
      ];
    }
    if (raw is AddressIndex_Reset) {
      return [
        3,
        api2wire_u32(raw.index)
      ];
    }

    throw Exception('unreachable');
  }

  @protected
  List<dynamic> api2wire_aes_decrypt_req(AesDecryptReq raw) {
    return [
      api2wire_uint_8_list(raw.key),
      api2wire_uint_8_list(raw.iv),
      api2wire_uint_8_list(raw.cipherText)
    ];
  }

  @protected
  List<dynamic> api2wire_aes_encrypt_req(AesEncryptReq raw) {
    return [
      api2wire_uint_8_list(raw.key),
      api2wire_uint_8_list(raw.iv),
      api2wire_uint_8_list(raw.message)
    ];
  }

  @protected
  List<dynamic> api2wire_blockchain_config(BlockchainConfig raw) {
    if (raw is BlockchainConfig_Electrum) {
      return [
        0,
        api2wire_box_autoadd_electrum_config(raw.config)
      ];
    }
    if (raw is BlockchainConfig_Esplora) {
      return [
        1,
        api2wire_box_autoadd_esplora_config(raw.config)
      ];
    }
    if (raw is BlockchainConfig_Rpc) {
      return [
        2,
        api2wire_box_autoadd_rpc_config(raw.config)
      ];
    }

    throw Exception('unreachable');
  }

  @protected
  List<dynamic> api2wire_bls_verify_req(BLSVerifyReq raw) {
    return [
      api2wire_uint_8_list(raw.signature),
      api2wire_uint_8_list(raw.message),
      api2wire_uint_8_list(raw.publicKey)
    ];
  }

  @protected
  Object api2wire_box_autoadd_BdkDescriptor(BdkDescriptor raw) {
    return api2wire_BdkDescriptor(raw);
  }

  @protected
  List<dynamic> api2wire_box_autoadd_address_index(AddressIndex raw) {
    return api2wire_address_index(raw);
  }

  @protected
  List<dynamic> api2wire_box_autoadd_aes_decrypt_req(AesDecryptReq raw) {
    return api2wire_aes_decrypt_req(raw);
  }

  @protected
  List<dynamic> api2wire_box_autoadd_aes_encrypt_req(AesEncryptReq raw) {
    return api2wire_aes_encrypt_req(raw);
  }

  @protected
  List<dynamic> api2wire_box_autoadd_blockchain_config(BlockchainConfig raw) {
    return api2wire_blockchain_config(raw);
  }

  @protected
  List<dynamic> api2wire_box_autoadd_bls_verify_req(BLSVerifyReq raw) {
    return api2wire_bls_verify_req(raw);
  }

  @protected
  bool api2wire_box_autoadd_bool(bool raw) {
    return api2wire_bool(raw);
  }

  @protected
  List<dynamic> api2wire_box_autoadd_database_config(DatabaseConfig raw) {
    return api2wire_database_config(raw);
  }

  @protected
  List<dynamic> api2wire_box_autoadd_ed_25519_from_seed_req(ED25519FromSeedReq raw) {
    return api2wire_ed_25519_from_seed_req(raw);
  }

  @protected
  List<dynamic> api2wire_box_autoadd_ed_25519_sign_req(ED25519SignReq raw) {
    return api2wire_ed_25519_sign_req(raw);
  }

  @protected
  List<dynamic> api2wire_box_autoadd_ed_25519_verify_req(ED25519VerifyReq raw) {
    return api2wire_ed_25519_verify_req(raw);
  }

  @protected
  List<dynamic> api2wire_box_autoadd_electrum_config(ElectrumConfig raw) {
    return api2wire_electrum_config(raw);
  }

  @protected
  List<dynamic> api2wire_box_autoadd_esplora_config(EsploraConfig raw) {
    return api2wire_esplora_config(raw);
  }

  @protected
  double api2wire_box_autoadd_f32(double raw) {
    return api2wire_f32(raw);
  }

  @protected
  List<dynamic> api2wire_box_autoadd_p_256_from_seed_req(P256FromSeedReq raw) {
    return api2wire_p_256_from_seed_req(raw);
  }

  @protected
  List<dynamic> api2wire_box_autoadd_p_256_share_secret_req(P256ShareSecretReq raw) {
    return api2wire_p_256_share_secret_req(raw);
  }

  @protected
  List<dynamic> api2wire_box_autoadd_p_256_sign_with_seed_req(P256SignWithSeedReq raw) {
    return api2wire_p_256_sign_with_seed_req(raw);
  }

  @protected
  List<dynamic> api2wire_box_autoadd_p_256_verify_req(P256VerifyReq raw) {
    return api2wire_p_256_verify_req(raw);
  }

  @protected
  List<dynamic> api2wire_box_autoadd_pbkdf_derive_req(PBKDFDeriveReq raw) {
    return api2wire_pbkdf_derive_req(raw);
  }

  @protected
  List<dynamic> api2wire_box_autoadd_phrase_to_seed_req(PhraseToSeedReq raw) {
    return api2wire_phrase_to_seed_req(raw);
  }

  @protected
  List<dynamic> api2wire_box_autoadd_rbf_value(RbfValue raw) {
    return api2wire_rbf_value(raw);
  }

  @protected
  List<dynamic> api2wire_box_autoadd_rpc_config(RpcConfig raw) {
    return api2wire_rpc_config(raw);
  }

  @protected
  List<dynamic> api2wire_box_autoadd_rpc_sync_params(RpcSyncParams raw) {
    return api2wire_rpc_sync_params(raw);
  }

  @protected
  List<dynamic> api2wire_box_autoadd_schnorr_from_seed_req(SchnorrFromSeedReq raw) {
    return api2wire_schnorr_from_seed_req(raw);
  }

  @protected
  List<dynamic> api2wire_box_autoadd_schnorr_sign_with_seed_req(SchnorrSignWithSeedReq raw) {
    return api2wire_schnorr_sign_with_seed_req(raw);
  }

  @protected
  List<dynamic> api2wire_box_autoadd_schnorr_verify_req(SchnorrVerifyReq raw) {
    return api2wire_schnorr_verify_req(raw);
  }

  @protected
  List<dynamic> api2wire_box_autoadd_script(Script raw) {
    return api2wire_script(raw);
  }

  @protected
  List<dynamic> api2wire_box_autoadd_script_derive_req(ScriptDeriveReq raw) {
    return api2wire_script_derive_req(raw);
  }

  @protected
  List<dynamic> api2wire_box_autoadd_secp_256_k_1_from_seed_req(Secp256k1FromSeedReq raw) {
    return api2wire_secp_256_k_1_from_seed_req(raw);
  }

  @protected
  List<dynamic> api2wire_box_autoadd_secp_256_k_1_recover_req(Secp256k1RecoverReq raw) {
    return api2wire_secp_256_k_1_recover_req(raw);
  }

  @protected
  List<dynamic> api2wire_box_autoadd_secp_256_k_1_share_secret_req(Secp256k1ShareSecretReq raw) {
    return api2wire_secp_256_k_1_share_secret_req(raw);
  }

  @protected
  List<dynamic> api2wire_box_autoadd_secp_256_k_1_sign_with_rng_req(Secp256k1SignWithRngReq raw) {
    return api2wire_secp_256_k_1_sign_with_rng_req(raw);
  }

  @protected
  List<dynamic> api2wire_box_autoadd_secp_256_k_1_sign_with_seed_req(Secp256k1SignWithSeedReq raw) {
    return api2wire_secp_256_k_1_sign_with_seed_req(raw);
  }

  @protected
  List<dynamic> api2wire_box_autoadd_secp_256_k_1_verify_req(Secp256k1VerifyReq raw) {
    return api2wire_secp_256_k_1_verify_req(raw);
  }

  @protected
  List<dynamic> api2wire_box_autoadd_seed_to_key_req(SeedToKeyReq raw) {
    return api2wire_seed_to_key_req(raw);
  }

  @protected
  List<dynamic> api2wire_box_autoadd_sign_options(SignOptions raw) {
    return api2wire_sign_options(raw);
  }

  @protected
  List<dynamic> api2wire_box_autoadd_sled_db_configuration(SledDbConfiguration raw) {
    return api2wire_sled_db_configuration(raw);
  }

  @protected
  List<dynamic> api2wire_box_autoadd_sqlite_db_configuration(SqliteDbConfiguration raw) {
    return api2wire_sqlite_db_configuration(raw);
  }

  @protected
  int api2wire_box_autoadd_u32(int raw) {
    return api2wire_u32(raw);
  }

  @protected
  Object api2wire_box_autoadd_u64(int raw) {
    return api2wire_u64(raw);
  }

  @protected
  int api2wire_box_autoadd_u8(int raw) {
    return api2wire_u8(raw);
  }

  @protected
  List<dynamic> api2wire_box_autoadd_user_pass(UserPass raw) {
    return api2wire_user_pass(raw);
  }

  @protected
  List<dynamic> api2wire_database_config(DatabaseConfig raw) {
    if (raw is DatabaseConfig_Memory) {
      return [
        0
      ];
    }
    if (raw is DatabaseConfig_Sqlite) {
      return [
        1,
        api2wire_box_autoadd_sqlite_db_configuration(raw.config)
      ];
    }
    if (raw is DatabaseConfig_Sled) {
      return [
        2,
        api2wire_box_autoadd_sled_db_configuration(raw.config)
      ];
    }

    throw Exception('unreachable');
  }

  @protected
  List<dynamic> api2wire_ed_25519_from_seed_req(ED25519FromSeedReq raw) {
    return [
      api2wire_uint_8_list(raw.seed)
    ];
  }

  @protected
  List<dynamic> api2wire_ed_25519_sign_req(ED25519SignReq raw) {
    return [
      api2wire_uint_8_list(raw.seed),
      api2wire_uint_8_list(raw.message)
    ];
  }

  @protected
  List<dynamic> api2wire_ed_25519_verify_req(ED25519VerifyReq raw) {
    return [
      api2wire_uint_8_list(raw.sig),
      api2wire_uint_8_list(raw.message),
      api2wire_uint_8_list(raw.pubKey)
    ];
  }

  @protected
  List<dynamic> api2wire_electrum_config(ElectrumConfig raw) {
    return [
      api2wire_String(raw.url),
      api2wire_opt_String(raw.socks5),
      api2wire_u8(raw.retry),
      api2wire_opt_box_autoadd_u8(raw.timeout),
      api2wire_u64(raw.stopGap),
      api2wire_bool(raw.validateDomain)
    ];
  }

  @protected
  List<dynamic> api2wire_esplora_config(EsploraConfig raw) {
    return [
      api2wire_String(raw.baseUrl),
      api2wire_opt_String(raw.proxy),
      api2wire_opt_box_autoadd_u8(raw.concurrency),
      api2wire_u64(raw.stopGap),
      api2wire_opt_box_autoadd_u64(raw.timeout)
    ];
  }

  @protected
  List<dynamic> api2wire_foreign_utxo(ForeignUtxo raw) {
    return [
      api2wire_out_point(raw.outpoint),
      api2wire_tx_out_foreign(raw.txout)
    ];
  }

  @protected
  List<dynamic> api2wire_list_foreign_utxo(List<ForeignUtxo> raw) {
    return raw.map(api2wire_foreign_utxo).toList();
  }

  @protected
  List<dynamic> api2wire_list_out_point(List<OutPoint> raw) {
    return raw.map(api2wire_out_point).toList();
  }

  @protected
  List<dynamic> api2wire_list_script_amount(List<ScriptAmount> raw) {
    return raw.map(api2wire_script_amount).toList();
  }

  @protected
  List<dynamic> api2wire_list_tx_bytes(List<TxBytes> raw) {
    return raw.map(api2wire_tx_bytes).toList();
  }

  @protected
  String? api2wire_opt_String(String? raw) {
    return raw == null ? null : api2wire_String(raw);
  }

  @protected
  Object? api2wire_opt_box_autoadd_BdkDescriptor(BdkDescriptor? raw) {
    return raw == null ? null : api2wire_box_autoadd_BdkDescriptor(raw);
  }

  @protected
  bool? api2wire_opt_box_autoadd_bool(bool? raw) {
    return raw == null ? null : api2wire_box_autoadd_bool(raw);
  }

  @protected
  double? api2wire_opt_box_autoadd_f32(double? raw) {
    return raw == null ? null : api2wire_box_autoadd_f32(raw);
  }

  @protected
  List<dynamic>? api2wire_opt_box_autoadd_rbf_value(RbfValue? raw) {
    return raw == null ? null : api2wire_box_autoadd_rbf_value(raw);
  }

  @protected
  List<dynamic>? api2wire_opt_box_autoadd_rpc_sync_params(RpcSyncParams? raw) {
    return raw == null ? null : api2wire_box_autoadd_rpc_sync_params(raw);
  }

  @protected
  List<dynamic>? api2wire_opt_box_autoadd_script(Script? raw) {
    return raw == null ? null : api2wire_box_autoadd_script(raw);
  }

  @protected
  List<dynamic>? api2wire_opt_box_autoadd_sign_options(SignOptions? raw) {
    return raw == null ? null : api2wire_box_autoadd_sign_options(raw);
  }

  @protected
  int? api2wire_opt_box_autoadd_u32(int? raw) {
    return raw == null ? null : api2wire_box_autoadd_u32(raw);
  }

  @protected
  Object? api2wire_opt_box_autoadd_u64(int? raw) {
    return raw == null ? null : api2wire_box_autoadd_u64(raw);
  }

  @protected
  int? api2wire_opt_box_autoadd_u8(int? raw) {
    return raw == null ? null : api2wire_box_autoadd_u8(raw);
  }

  @protected
  List<dynamic>? api2wire_opt_box_autoadd_user_pass(UserPass? raw) {
    return raw == null ? null : api2wire_box_autoadd_user_pass(raw);
  }

  @protected
  Uint8List? api2wire_opt_uint_8_list(Uint8List? raw) {
    return raw == null ? null : api2wire_uint_8_list(raw);
  }

  @protected
  List<dynamic> api2wire_out_point(OutPoint raw) {
    return [
      api2wire_String(raw.txid),
      api2wire_u32(raw.vout)
    ];
  }

  @protected
  List<dynamic> api2wire_p_256_from_seed_req(P256FromSeedReq raw) {
    return [
      api2wire_uint_8_list(raw.seed)
    ];
  }

  @protected
  List<dynamic> api2wire_p_256_share_secret_req(P256ShareSecretReq raw) {
    return [
      api2wire_uint_8_list(raw.seed),
      api2wire_uint_8_list(raw.publicKeyRawBytes)
    ];
  }

  @protected
  List<dynamic> api2wire_p_256_sign_with_seed_req(P256SignWithSeedReq raw) {
    return [
      api2wire_uint_8_list(raw.msg),
      api2wire_uint_8_list(raw.seed)
    ];
  }

  @protected
  List<dynamic> api2wire_p_256_verify_req(P256VerifyReq raw) {
    return [
      api2wire_uint_8_list(raw.messageHash),
      api2wire_uint_8_list(raw.signatureBytes),
      api2wire_uint_8_list(raw.publicKeyBytes)
    ];
  }

  @protected
  List<dynamic> api2wire_pbkdf_derive_req(PBKDFDeriveReq raw) {
    return [
      api2wire_uint_8_list(raw.password),
      api2wire_uint_8_list(raw.salt),
      api2wire_u32(raw.c)
    ];
  }

  @protected
  List<dynamic> api2wire_phrase_to_seed_req(PhraseToSeedReq raw) {
    return [
      api2wire_String(raw.phrase),
      api2wire_String(raw.password)
    ];
  }

  @protected
  List<dynamic> api2wire_rbf_value(RbfValue raw) {
    if (raw is RbfValue_RbfDefault) {
      return [
        0
      ];
    }
    if (raw is RbfValue_Value) {
      return [
        1,
        api2wire_u32(raw.field0)
      ];
    }

    throw Exception('unreachable');
  }

  @protected
  List<dynamic> api2wire_rpc_config(RpcConfig raw) {
    return [
      api2wire_String(raw.url),
      api2wire_opt_String(raw.authCookie),
      api2wire_opt_box_autoadd_user_pass(raw.authUserPass),
      api2wire_network(raw.network),
      api2wire_String(raw.walletName),
      api2wire_opt_box_autoadd_rpc_sync_params(raw.syncParams)
    ];
  }

  @protected
  List<dynamic> api2wire_rpc_sync_params(RpcSyncParams raw) {
    return [
      api2wire_u64(raw.startScriptCount),
      api2wire_u64(raw.startTime),
      api2wire_bool(raw.forceStartTime),
      api2wire_u64(raw.pollRateSec)
    ];
  }

  @protected
  List<dynamic> api2wire_schnorr_from_seed_req(SchnorrFromSeedReq raw) {
    return [
      api2wire_uint_8_list(raw.seed)
    ];
  }

  @protected
  List<dynamic> api2wire_schnorr_sign_with_seed_req(SchnorrSignWithSeedReq raw) {
    return [
      api2wire_uint_8_list(raw.msg),
      api2wire_uint_8_list(raw.seed),
      api2wire_opt_uint_8_list(raw.auxRand)
    ];
  }

  @protected
  List<dynamic> api2wire_schnorr_verify_req(SchnorrVerifyReq raw) {
    return [
      api2wire_uint_8_list(raw.messageHash),
      api2wire_uint_8_list(raw.signatureBytes),
      api2wire_uint_8_list(raw.publicKeyBytes)
    ];
  }

  @protected
  List<dynamic> api2wire_script(Script raw) {
    return [
      api2wire_uint_8_list(raw.internal)
    ];
  }

  @protected
  List<dynamic> api2wire_script_amount(ScriptAmount raw) {
    return [
      api2wire_script(raw.script),
      api2wire_u64(raw.amount)
    ];
  }

  @protected
  List<dynamic> api2wire_script_derive_req(ScriptDeriveReq raw) {
    return [
      api2wire_uint_8_list(raw.password),
      api2wire_uint_8_list(raw.salt),
      api2wire_u32(raw.n),
      api2wire_u32(raw.p),
      api2wire_u32(raw.r)
    ];
  }

  @protected
  List<dynamic> api2wire_secp_256_k_1_from_seed_req(Secp256k1FromSeedReq raw) {
    return [
      api2wire_uint_8_list(raw.seed)
    ];
  }

  @protected
  List<dynamic> api2wire_secp_256_k_1_recover_req(Secp256k1RecoverReq raw) {
    return [
      api2wire_uint_8_list(raw.messagePreHashed),
      api2wire_uint_8_list(raw.signatureBytes),
      api2wire_opt_box_autoadd_u8(raw.chainId)
    ];
  }

  @protected
  List<dynamic> api2wire_secp_256_k_1_share_secret_req(Secp256k1ShareSecretReq raw) {
    return [
      api2wire_uint_8_list(raw.seed),
      api2wire_uint_8_list(raw.publicKeyRawBytes)
    ];
  }

  @protected
  List<dynamic> api2wire_secp_256_k_1_sign_with_rng_req(Secp256k1SignWithRngReq raw) {
    return [
      api2wire_uint_8_list(raw.msg),
      api2wire_uint_8_list(raw.privateBytes)
    ];
  }

  @protected
  List<dynamic> api2wire_secp_256_k_1_sign_with_seed_req(Secp256k1SignWithSeedReq raw) {
    return [
      api2wire_uint_8_list(raw.msg),
      api2wire_uint_8_list(raw.seed)
    ];
  }

  @protected
  List<dynamic> api2wire_secp_256_k_1_verify_req(Secp256k1VerifyReq raw) {
    return [
      api2wire_uint_8_list(raw.messageHash),
      api2wire_uint_8_list(raw.signatureBytes),
      api2wire_uint_8_list(raw.publicKeyBytes)
    ];
  }

  @protected
  List<dynamic> api2wire_seed_to_key_req(SeedToKeyReq raw) {
    return [
      api2wire_uint_8_list(raw.seed),
      api2wire_String(raw.path)
    ];
  }

  @protected
  List<dynamic> api2wire_sign_options(SignOptions raw) {
    return [
      api2wire_bool(raw.trustWitnessUtxo),
      api2wire_opt_box_autoadd_u32(raw.assumeHeight),
      api2wire_bool(raw.allowAllSighashes),
      api2wire_bool(raw.removePartialSigs),
      api2wire_bool(raw.tryFinalize),
      api2wire_bool(raw.signWithTapInternalKey),
      api2wire_bool(raw.allowGrinding)
    ];
  }

  @protected
  List<dynamic> api2wire_sled_db_configuration(SledDbConfiguration raw) {
    return [
      api2wire_String(raw.path),
      api2wire_String(raw.treeName)
    ];
  }

  @protected
  List<dynamic> api2wire_sqlite_db_configuration(SqliteDbConfiguration raw) {
    return [
      api2wire_String(raw.path)
    ];
  }

  @protected
  List<dynamic> api2wire_tx_bytes(TxBytes raw) {
    return [
      api2wire_String(raw.txId),
      api2wire_uint_8_list(raw.bytes)
    ];
  }

  @protected
  List<dynamic> api2wire_tx_out_foreign(TxOutForeign raw) {
    return [
      api2wire_u64(raw.value),
      api2wire_String(raw.scriptPubkey)
    ];
  }

  @protected
  Object api2wire_u64(int raw) {
    return castNativeBigInt(raw);
  }

  @protected
  Uint8List api2wire_uint_8_list(Uint8List raw) {
    return raw;
  }

  @protected
  List<dynamic> api2wire_user_pass(UserPass raw) {
    return [
      api2wire_String(raw.username),
      api2wire_String(raw.password)
    ];
  }

// Section: finalizer

  late final Finalizer<PlatformPointer> _BdkDescriptorFinalizer = Finalizer<PlatformPointer>(inner.drop_opaque_BdkDescriptor);
  Finalizer<PlatformPointer> get BdkDescriptorFinalizer => _BdkDescriptorFinalizer;
  late final Finalizer<PlatformPointer> _BlockchainInstanceFinalizer = Finalizer<PlatformPointer>(inner.drop_opaque_BlockchainInstance);
  Finalizer<PlatformPointer> get BlockchainInstanceFinalizer => _BlockchainInstanceFinalizer;
  late final Finalizer<PlatformPointer> _WalletInstanceFinalizer = Finalizer<PlatformPointer>(inner.drop_opaque_WalletInstance);
  Finalizer<PlatformPointer> get WalletInstanceFinalizer => _WalletInstanceFinalizer;
}

// Section: WASM wire module

@JS('wasm_bindgen')
external AgentDartWasmModule get wasmModule;

@JS()
@anonymous
class AgentDartWasmModule implements WasmModule {
  external Object /* Promise */ call([String? moduleName]);
  external AgentDartWasmModule bind(dynamic thisArg, String moduleName);
  external dynamic /* void */ wire_mnemonic_phrase_to_seed(NativePortType port_, List<dynamic> req);

  external dynamic /* void */ wire_mnemonic_seed_to_key(NativePortType port_, List<dynamic> req);

  external dynamic /* void */ wire_bls_init(NativePortType port_);

  external dynamic /* void */ wire_bls_verify(NativePortType port_, List<dynamic> req);

  external dynamic /* void */ wire_ed25519_from_seed(NativePortType port_, List<dynamic> req);

  external dynamic /* void */ wire_ed25519_sign(NativePortType port_, List<dynamic> req);

  external dynamic /* void */ wire_ed25519_verify(NativePortType port_, List<dynamic> req);

  external dynamic /* void */ wire_secp256k1_from_seed(NativePortType port_, List<dynamic> req);

  external dynamic /* void */ wire_secp256k1_sign(NativePortType port_, List<dynamic> req);

  external dynamic /* void */ wire_secp256k1_sign_with_rng(NativePortType port_, List<dynamic> req);

  external dynamic /* void */ wire_secp256k1_sign_recoverable(NativePortType port_, List<dynamic> req);

  external dynamic /* void */ wire_secp256k1_verify(NativePortType port_, List<dynamic> req);

  external dynamic /* void */ wire_secp256k1_get_shared_secret(NativePortType port_, List<dynamic> req);

  external dynamic /* void */ wire_secp256k1_recover(NativePortType port_, List<dynamic> req);

  external dynamic /* void */ wire_p256_from_seed(NativePortType port_, List<dynamic> req);

  external dynamic /* void */ wire_p256_sign(NativePortType port_, List<dynamic> req);

  external dynamic /* void */ wire_p256_verify(NativePortType port_, List<dynamic> req);

  external dynamic /* void */ wire_p256_get_shared_secret(NativePortType port_, List<dynamic> req);

  external dynamic /* void */ wire_schnorr_from_seed(NativePortType port_, List<dynamic> req);

  external dynamic /* void */ wire_schnorr_sign(NativePortType port_, List<dynamic> req);

  external dynamic /* void */ wire_schnorr_verify(NativePortType port_, List<dynamic> req);

  external dynamic /* void */ wire_aes_128_ctr_encrypt(NativePortType port_, List<dynamic> req);

  external dynamic /* void */ wire_aes_128_ctr_decrypt(NativePortType port_, List<dynamic> req);

  external dynamic /* void */ wire_aes_256_cbc_encrypt(NativePortType port_, List<dynamic> req);

  external dynamic /* void */ wire_aes_256_cbc_decrypt(NativePortType port_, List<dynamic> req);

  external dynamic /* void */ wire_aes_256_gcm_encrypt(NativePortType port_, List<dynamic> req);

  external dynamic /* void */ wire_aes_256_gcm_decrypt(NativePortType port_, List<dynamic> req);

  external dynamic /* void */ wire_pbkdf2_derive_key(NativePortType port_, List<dynamic> req);

  external dynamic /* void */ wire_scrypt_derive_key(NativePortType port_, List<dynamic> req);

  external dynamic /* void */ wire_create_blockchain__static_method__Api(NativePortType port_, List<dynamic> config);

  external dynamic /* void */ wire_get_height__static_method__Api(NativePortType port_, Object blockchain);

  external dynamic /* void */ wire_get_blockchain_hash__static_method__Api(NativePortType port_, int blockchain_height, Object blockchain);

  external dynamic /* void */ wire_estimate_fee__static_method__Api(NativePortType port_, Object target, Object blockchain);

  external dynamic /* void */ wire_broadcast__static_method__Api(NativePortType port_, String tx, Object blockchain);

  external dynamic /* void */ wire_get_tx__static_method__Api(NativePortType port_, String tx, Object blockchain);

  external dynamic /* void */ wire_create_transaction__static_method__Api(NativePortType port_, Uint8List tx);

  external dynamic /* void */ wire_tx_txid__static_method__Api(NativePortType port_, String tx);

  external dynamic /* void */ wire_weight__static_method__Api(NativePortType port_, String tx);

  external dynamic /* void */ wire_size__static_method__Api(NativePortType port_, String tx);

  external dynamic /* void */ wire_vsize__static_method__Api(NativePortType port_, String tx);

  external dynamic /* void */ wire_serialize_tx__static_method__Api(NativePortType port_, String tx);

  external dynamic /* void */ wire_is_coin_base__static_method__Api(NativePortType port_, String tx);

  external dynamic /* void */ wire_is_explicitly_rbf__static_method__Api(NativePortType port_, String tx);

  external dynamic /* void */ wire_is_lock_time_enabled__static_method__Api(NativePortType port_, String tx);

  external dynamic /* void */ wire_version__static_method__Api(NativePortType port_, String tx);

  external dynamic /* void */ wire_lock_time__static_method__Api(NativePortType port_, String tx);

  external dynamic /* void */ wire_input__static_method__Api(NativePortType port_, String tx);

  external dynamic /* void */ wire_output__static_method__Api(NativePortType port_, String tx);

  external dynamic /* void */ wire_serialize_psbt__static_method__Api(NativePortType port_, String psbt_str);

  external dynamic /* void */ wire_psbt_txid__static_method__Api(NativePortType port_, String psbt_str);

  external dynamic /* void */ wire_extract_tx__static_method__Api(NativePortType port_, String psbt_str);

  external dynamic /* void */ wire_psbt_fee_rate__static_method__Api(NativePortType port_, String psbt_str);

  external dynamic /* void */ wire_psbt_fee_amount__static_method__Api(NativePortType port_, String psbt_str);

  external dynamic /* void */ wire_combine_psbt__static_method__Api(NativePortType port_, String psbt_str, String other);

  external dynamic /* void */ wire_json_serialize__static_method__Api(NativePortType port_, String psbt_str);

  external dynamic /* void */ wire_get_inputs__static_method__Api(NativePortType port_, String psbt_str);

  external dynamic /* void */ wire_tx_builder_finish__static_method__Api(NativePortType port_, Object wallet, List<dynamic> recipients, List<dynamic> txs, List<dynamic> unspendable, List<dynamic> foreign_utxos, int change_policy, bool manually_selected_only, double? fee_rate, Object? fee_absolute, bool drain_wallet, List<dynamic>? drain_to, List<dynamic>? rbf, Uint8List data, bool? shuffle_utxo);

  external dynamic /* void */ wire_tx_cal_fee_finish__static_method__Api(NativePortType port_, Object wallet, List<dynamic> recipients, List<dynamic> txs, List<dynamic> unspendable, List<dynamic> foreign_utxos, int change_policy, bool manually_selected_only, double? fee_rate, Object? fee_absolute, bool drain_wallet, List<dynamic>? drain_to, List<dynamic>? rbf, Uint8List data, bool? shuffle_utxo);

  external dynamic /* void */ wire_bump_fee_tx_builder_finish__static_method__Api(NativePortType port_, String txid, double fee_rate, String? allow_shrinking, Object wallet, bool enable_rbf, bool keep_change, int? n_sequence);

  external dynamic /* void */ wire_create_descriptor__static_method__Api(NativePortType port_, String descriptor, int network);

  external dynamic /* void */ wire_import_single_wif__static_method__Api(NativePortType port_, String wif, String address_type, int network);

  external dynamic /* void */ wire_new_bip44_descriptor__static_method__Api(NativePortType port_, int key_chain_kind, String secret_key, int network);

  external dynamic /* void */ wire_new_bip44_public__static_method__Api(NativePortType port_, int key_chain_kind, String public_key, int network, String fingerprint);

  external dynamic /* void */ wire_new_bip49_descriptor__static_method__Api(NativePortType port_, int key_chain_kind, String secret_key, int network);

  external dynamic /* void */ wire_new_bip49_public__static_method__Api(NativePortType port_, int key_chain_kind, String public_key, int network, String fingerprint);

  external dynamic /* void */ wire_new_bip84_descriptor__static_method__Api(NativePortType port_, int key_chain_kind, String secret_key, int network);

  external dynamic /* void */ wire_new_bip84_public__static_method__Api(NativePortType port_, int key_chain_kind, String public_key, int network, String fingerprint);

  external dynamic /* void */ wire_new_bip86_descriptor__static_method__Api(NativePortType port_, int key_chain_kind, String secret_key, int network);

  external dynamic /* void */ wire_new_bip86_public__static_method__Api(NativePortType port_, int key_chain_kind, String public_key, int network, String fingerprint);

  external dynamic /* void */ wire_as_string_private__static_method__Api(NativePortType port_, Object descriptor);

  external dynamic /* void */ wire_as_string__static_method__Api(NativePortType port_, Object descriptor);

  external dynamic /* void */ wire_derive_address_at__static_method__Api(NativePortType port_, Object descriptor, int index, int network);

  external dynamic /* void */ wire_create_descriptor_secret__static_method__Api(NativePortType port_, int network, String mnemonic, String? password);

  external dynamic /* void */ wire_create_derived_descriptor_secret__static_method__Api(NativePortType port_, int network, String mnemonic, String path, String? password);

  external dynamic /* void */ wire_descriptor_secret_from_string__static_method__Api(NativePortType port_, String secret);

  external dynamic /* void */ wire_extend_descriptor_secret__static_method__Api(NativePortType port_, String secret, String path);

  external dynamic /* void */ wire_derive_descriptor_secret__static_method__Api(NativePortType port_, String secret, String path);

  external dynamic /* void */ wire_as_secret_bytes__static_method__Api(NativePortType port_, String secret);

  external dynamic /* void */ wire_as_public__static_method__Api(NativePortType port_, String secret);

  external dynamic /* void */ wire_get_pub_from_secret_bytes__static_method__Api(NativePortType port_, Uint8List bytes);

  external dynamic /* void */ wire_create_derivation_path__static_method__Api(NativePortType port_, String path);

  external dynamic /* void */ wire_descriptor_public_from_string__static_method__Api(NativePortType port_, String public_key);

  external dynamic /* void */ wire_master_finterprint__static_method__Api(NativePortType port_, String xpub);

  external dynamic /* void */ wire_create_descriptor_public__static_method__Api(NativePortType port_, String? xpub, String path, bool derive);

  external dynamic /* void */ wire_to_public_string__static_method__Api(NativePortType port_, String xpub);

  external dynamic /* void */ wire_create_script__static_method__Api(NativePortType port_, Uint8List raw_output_script);

  external dynamic /* void */ wire_create_address__static_method__Api(NativePortType port_, String address);

  external dynamic /* void */ wire_address_from_script__static_method__Api(NativePortType port_, List<dynamic> script, int network);

  external dynamic /* void */ wire_address_to_script_pubkey__static_method__Api(NativePortType port_, String address);

  external dynamic /* void */ wire_payload__static_method__Api(NativePortType port_, String address);

  external dynamic /* void */ wire_address_network__static_method__Api(NativePortType port_, String address);

  external dynamic /* void */ wire_get_address_type__static_method__Api(NativePortType port_, String address);

  external dynamic /* void */ wire_create_wallet__static_method__Api(NativePortType port_, Object descriptor, Object? change_descriptor, int network, List<dynamic> database_config);

  external dynamic /* void */ wire_get_address__static_method__Api(NativePortType port_, Object wallet, List<dynamic> address_index);

  external dynamic /* void */ wire_get_internal_address__static_method__Api(NativePortType port_, Object wallet, List<dynamic> address_index);

  external dynamic /* void */ wire_sync_wallet__static_method__Api(NativePortType port_, Object wallet, Object blockchain);

  external dynamic /* void */ wire_sync_wallet_thread__static_method__Api(NativePortType port_, Object wallet, Object blockchain);

  external dynamic /* void */ wire_get_balance__static_method__Api(NativePortType port_, Object wallet);

  external dynamic /* void */ wire_list_unspent_outputs__static_method__Api(NativePortType port_, Object wallet);

  external dynamic /* void */ wire_get_transactions__static_method__Api(NativePortType port_, Object wallet, bool include_raw);

  external dynamic /* void */ wire_sign__static_method__Api(NativePortType port_, Object wallet, String psbt_str, List<dynamic>? sign_options);

  external dynamic /* void */ wire_wallet_network__static_method__Api(NativePortType port_, Object wallet);

  external dynamic /* void */ wire_list_unspent__static_method__Api(NativePortType port_, Object wallet);

  external dynamic /* void */ wire_cache_address__static_method__Api(NativePortType port_, Object wallet, int cache_size);

  external dynamic /* void */ wire_generate_seed_from_word_count__static_method__Api(NativePortType port_, int word_count);

  external dynamic /* void */ wire_generate_seed_from_string__static_method__Api(NativePortType port_, String mnemonic);

  external dynamic /* void */ wire_generate_seed_from_entropy__static_method__Api(NativePortType port_, Uint8List entropy);

  external dynamic /* void */ wire_bip322_sign_segwit__static_method__Api(NativePortType port_, Uint8List secret, String message);

  external dynamic /* void */ wire_bip322_sign_taproot__static_method__Api(NativePortType port_, Uint8List secret, String message);

  external dynamic /*  */ drop_opaque_BdkDescriptor(ptr);

  external int /* *const c_void */ share_opaque_BdkDescriptor(ptr);

  external dynamic /*  */ drop_opaque_BlockchainInstance(ptr);

  external int /* *const c_void */ share_opaque_BlockchainInstance(ptr);

  external dynamic /*  */ drop_opaque_WalletInstance(ptr);

  external int /* *const c_void */ share_opaque_WalletInstance(ptr);
}

// Section: WASM wire connector

class AgentDartWire extends FlutterRustBridgeWasmWireBase<AgentDartWasmModule> {
  AgentDartWire(FutureOr<WasmModule> module) : super(WasmModule.cast<AgentDartWasmModule>(module));

  void wire_mnemonic_phrase_to_seed(NativePortType port_, List<dynamic> req) => wasmModule.wire_mnemonic_phrase_to_seed(port_, req);

  void wire_mnemonic_seed_to_key(NativePortType port_, List<dynamic> req) => wasmModule.wire_mnemonic_seed_to_key(port_, req);

  void wire_bls_init(NativePortType port_) => wasmModule.wire_bls_init(port_);

  void wire_bls_verify(NativePortType port_, List<dynamic> req) => wasmModule.wire_bls_verify(port_, req);

  void wire_ed25519_from_seed(NativePortType port_, List<dynamic> req) => wasmModule.wire_ed25519_from_seed(port_, req);

  void wire_ed25519_sign(NativePortType port_, List<dynamic> req) => wasmModule.wire_ed25519_sign(port_, req);

  void wire_ed25519_verify(NativePortType port_, List<dynamic> req) => wasmModule.wire_ed25519_verify(port_, req);

  void wire_secp256k1_from_seed(NativePortType port_, List<dynamic> req) => wasmModule.wire_secp256k1_from_seed(port_, req);

  void wire_secp256k1_sign(NativePortType port_, List<dynamic> req) => wasmModule.wire_secp256k1_sign(port_, req);

  void wire_secp256k1_sign_with_rng(NativePortType port_, List<dynamic> req) => wasmModule.wire_secp256k1_sign_with_rng(port_, req);

  void wire_secp256k1_sign_recoverable(NativePortType port_, List<dynamic> req) => wasmModule.wire_secp256k1_sign_recoverable(port_, req);

  void wire_secp256k1_verify(NativePortType port_, List<dynamic> req) => wasmModule.wire_secp256k1_verify(port_, req);

  void wire_secp256k1_get_shared_secret(NativePortType port_, List<dynamic> req) => wasmModule.wire_secp256k1_get_shared_secret(port_, req);

  void wire_secp256k1_recover(NativePortType port_, List<dynamic> req) => wasmModule.wire_secp256k1_recover(port_, req);

  void wire_p256_from_seed(NativePortType port_, List<dynamic> req) => wasmModule.wire_p256_from_seed(port_, req);

  void wire_p256_sign(NativePortType port_, List<dynamic> req) => wasmModule.wire_p256_sign(port_, req);

  void wire_p256_verify(NativePortType port_, List<dynamic> req) => wasmModule.wire_p256_verify(port_, req);

  void wire_p256_get_shared_secret(NativePortType port_, List<dynamic> req) => wasmModule.wire_p256_get_shared_secret(port_, req);

  void wire_schnorr_from_seed(NativePortType port_, List<dynamic> req) => wasmModule.wire_schnorr_from_seed(port_, req);

  void wire_schnorr_sign(NativePortType port_, List<dynamic> req) => wasmModule.wire_schnorr_sign(port_, req);

  void wire_schnorr_verify(NativePortType port_, List<dynamic> req) => wasmModule.wire_schnorr_verify(port_, req);

  void wire_aes_128_ctr_encrypt(NativePortType port_, List<dynamic> req) => wasmModule.wire_aes_128_ctr_encrypt(port_, req);

  void wire_aes_128_ctr_decrypt(NativePortType port_, List<dynamic> req) => wasmModule.wire_aes_128_ctr_decrypt(port_, req);

  void wire_aes_256_cbc_encrypt(NativePortType port_, List<dynamic> req) => wasmModule.wire_aes_256_cbc_encrypt(port_, req);

  void wire_aes_256_cbc_decrypt(NativePortType port_, List<dynamic> req) => wasmModule.wire_aes_256_cbc_decrypt(port_, req);

  void wire_aes_256_gcm_encrypt(NativePortType port_, List<dynamic> req) => wasmModule.wire_aes_256_gcm_encrypt(port_, req);

  void wire_aes_256_gcm_decrypt(NativePortType port_, List<dynamic> req) => wasmModule.wire_aes_256_gcm_decrypt(port_, req);

  void wire_pbkdf2_derive_key(NativePortType port_, List<dynamic> req) => wasmModule.wire_pbkdf2_derive_key(port_, req);

  void wire_scrypt_derive_key(NativePortType port_, List<dynamic> req) => wasmModule.wire_scrypt_derive_key(port_, req);

  void wire_create_blockchain__static_method__Api(NativePortType port_, List<dynamic> config) => wasmModule.wire_create_blockchain__static_method__Api(port_, config);

  void wire_get_height__static_method__Api(NativePortType port_, Object blockchain) => wasmModule.wire_get_height__static_method__Api(port_, blockchain);

  void wire_get_blockchain_hash__static_method__Api(NativePortType port_, int blockchain_height, Object blockchain) => wasmModule.wire_get_blockchain_hash__static_method__Api(port_, blockchain_height, blockchain);

  void wire_estimate_fee__static_method__Api(NativePortType port_, Object target, Object blockchain) => wasmModule.wire_estimate_fee__static_method__Api(port_, target, blockchain);

  void wire_broadcast__static_method__Api(NativePortType port_, String tx, Object blockchain) => wasmModule.wire_broadcast__static_method__Api(port_, tx, blockchain);

  void wire_get_tx__static_method__Api(NativePortType port_, String tx, Object blockchain) => wasmModule.wire_get_tx__static_method__Api(port_, tx, blockchain);

  void wire_create_transaction__static_method__Api(NativePortType port_, Uint8List tx) => wasmModule.wire_create_transaction__static_method__Api(port_, tx);

  void wire_tx_txid__static_method__Api(NativePortType port_, String tx) => wasmModule.wire_tx_txid__static_method__Api(port_, tx);

  void wire_weight__static_method__Api(NativePortType port_, String tx) => wasmModule.wire_weight__static_method__Api(port_, tx);

  void wire_size__static_method__Api(NativePortType port_, String tx) => wasmModule.wire_size__static_method__Api(port_, tx);

  void wire_vsize__static_method__Api(NativePortType port_, String tx) => wasmModule.wire_vsize__static_method__Api(port_, tx);

  void wire_serialize_tx__static_method__Api(NativePortType port_, String tx) => wasmModule.wire_serialize_tx__static_method__Api(port_, tx);

  void wire_is_coin_base__static_method__Api(NativePortType port_, String tx) => wasmModule.wire_is_coin_base__static_method__Api(port_, tx);

  void wire_is_explicitly_rbf__static_method__Api(NativePortType port_, String tx) => wasmModule.wire_is_explicitly_rbf__static_method__Api(port_, tx);

  void wire_is_lock_time_enabled__static_method__Api(NativePortType port_, String tx) => wasmModule.wire_is_lock_time_enabled__static_method__Api(port_, tx);

  void wire_version__static_method__Api(NativePortType port_, String tx) => wasmModule.wire_version__static_method__Api(port_, tx);

  void wire_lock_time__static_method__Api(NativePortType port_, String tx) => wasmModule.wire_lock_time__static_method__Api(port_, tx);

  void wire_input__static_method__Api(NativePortType port_, String tx) => wasmModule.wire_input__static_method__Api(port_, tx);

  void wire_output__static_method__Api(NativePortType port_, String tx) => wasmModule.wire_output__static_method__Api(port_, tx);

  void wire_serialize_psbt__static_method__Api(NativePortType port_, String psbt_str) => wasmModule.wire_serialize_psbt__static_method__Api(port_, psbt_str);

  void wire_psbt_txid__static_method__Api(NativePortType port_, String psbt_str) => wasmModule.wire_psbt_txid__static_method__Api(port_, psbt_str);

  void wire_extract_tx__static_method__Api(NativePortType port_, String psbt_str) => wasmModule.wire_extract_tx__static_method__Api(port_, psbt_str);

  void wire_psbt_fee_rate__static_method__Api(NativePortType port_, String psbt_str) => wasmModule.wire_psbt_fee_rate__static_method__Api(port_, psbt_str);

  void wire_psbt_fee_amount__static_method__Api(NativePortType port_, String psbt_str) => wasmModule.wire_psbt_fee_amount__static_method__Api(port_, psbt_str);

  void wire_combine_psbt__static_method__Api(NativePortType port_, String psbt_str, String other) => wasmModule.wire_combine_psbt__static_method__Api(port_, psbt_str, other);

  void wire_json_serialize__static_method__Api(NativePortType port_, String psbt_str) => wasmModule.wire_json_serialize__static_method__Api(port_, psbt_str);

  void wire_get_inputs__static_method__Api(NativePortType port_, String psbt_str) => wasmModule.wire_get_inputs__static_method__Api(port_, psbt_str);

  void wire_tx_builder_finish__static_method__Api(NativePortType port_, Object wallet, List<dynamic> recipients, List<dynamic> txs, List<dynamic> unspendable, List<dynamic> foreign_utxos, int change_policy, bool manually_selected_only, double? fee_rate, Object? fee_absolute, bool drain_wallet, List<dynamic>? drain_to, List<dynamic>? rbf, Uint8List data, bool? shuffle_utxo) => wasmModule.wire_tx_builder_finish__static_method__Api(port_, wallet, recipients, txs, unspendable, foreign_utxos, change_policy, manually_selected_only, fee_rate, fee_absolute, drain_wallet, drain_to, rbf, data, shuffle_utxo);

  void wire_tx_cal_fee_finish__static_method__Api(NativePortType port_, Object wallet, List<dynamic> recipients, List<dynamic> txs, List<dynamic> unspendable, List<dynamic> foreign_utxos, int change_policy, bool manually_selected_only, double? fee_rate, Object? fee_absolute, bool drain_wallet, List<dynamic>? drain_to, List<dynamic>? rbf, Uint8List data, bool? shuffle_utxo) => wasmModule.wire_tx_cal_fee_finish__static_method__Api(port_, wallet, recipients, txs, unspendable, foreign_utxos, change_policy, manually_selected_only, fee_rate, fee_absolute, drain_wallet, drain_to, rbf, data, shuffle_utxo);

  void wire_bump_fee_tx_builder_finish__static_method__Api(NativePortType port_, String txid, double fee_rate, String? allow_shrinking, Object wallet, bool enable_rbf, bool keep_change, int? n_sequence) => wasmModule.wire_bump_fee_tx_builder_finish__static_method__Api(port_, txid, fee_rate, allow_shrinking, wallet, enable_rbf, keep_change, n_sequence);

  void wire_create_descriptor__static_method__Api(NativePortType port_, String descriptor, int network) => wasmModule.wire_create_descriptor__static_method__Api(port_, descriptor, network);

  void wire_import_single_wif__static_method__Api(NativePortType port_, String wif, String address_type, int network) => wasmModule.wire_import_single_wif__static_method__Api(port_, wif, address_type, network);

  void wire_new_bip44_descriptor__static_method__Api(NativePortType port_, int key_chain_kind, String secret_key, int network) => wasmModule.wire_new_bip44_descriptor__static_method__Api(port_, key_chain_kind, secret_key, network);

  void wire_new_bip44_public__static_method__Api(NativePortType port_, int key_chain_kind, String public_key, int network, String fingerprint) => wasmModule.wire_new_bip44_public__static_method__Api(port_, key_chain_kind, public_key, network, fingerprint);

  void wire_new_bip49_descriptor__static_method__Api(NativePortType port_, int key_chain_kind, String secret_key, int network) => wasmModule.wire_new_bip49_descriptor__static_method__Api(port_, key_chain_kind, secret_key, network);

  void wire_new_bip49_public__static_method__Api(NativePortType port_, int key_chain_kind, String public_key, int network, String fingerprint) => wasmModule.wire_new_bip49_public__static_method__Api(port_, key_chain_kind, public_key, network, fingerprint);

  void wire_new_bip84_descriptor__static_method__Api(NativePortType port_, int key_chain_kind, String secret_key, int network) => wasmModule.wire_new_bip84_descriptor__static_method__Api(port_, key_chain_kind, secret_key, network);

  void wire_new_bip84_public__static_method__Api(NativePortType port_, int key_chain_kind, String public_key, int network, String fingerprint) => wasmModule.wire_new_bip84_public__static_method__Api(port_, key_chain_kind, public_key, network, fingerprint);

  void wire_new_bip86_descriptor__static_method__Api(NativePortType port_, int key_chain_kind, String secret_key, int network) => wasmModule.wire_new_bip86_descriptor__static_method__Api(port_, key_chain_kind, secret_key, network);

  void wire_new_bip86_public__static_method__Api(NativePortType port_, int key_chain_kind, String public_key, int network, String fingerprint) => wasmModule.wire_new_bip86_public__static_method__Api(port_, key_chain_kind, public_key, network, fingerprint);

  void wire_as_string_private__static_method__Api(NativePortType port_, Object descriptor) => wasmModule.wire_as_string_private__static_method__Api(port_, descriptor);

  void wire_as_string__static_method__Api(NativePortType port_, Object descriptor) => wasmModule.wire_as_string__static_method__Api(port_, descriptor);

  void wire_derive_address_at__static_method__Api(NativePortType port_, Object descriptor, int index, int network) => wasmModule.wire_derive_address_at__static_method__Api(port_, descriptor, index, network);

  void wire_create_descriptor_secret__static_method__Api(NativePortType port_, int network, String mnemonic, String? password) => wasmModule.wire_create_descriptor_secret__static_method__Api(port_, network, mnemonic, password);

  void wire_create_derived_descriptor_secret__static_method__Api(NativePortType port_, int network, String mnemonic, String path, String? password) => wasmModule.wire_create_derived_descriptor_secret__static_method__Api(port_, network, mnemonic, path, password);

  void wire_descriptor_secret_from_string__static_method__Api(NativePortType port_, String secret) => wasmModule.wire_descriptor_secret_from_string__static_method__Api(port_, secret);

  void wire_extend_descriptor_secret__static_method__Api(NativePortType port_, String secret, String path) => wasmModule.wire_extend_descriptor_secret__static_method__Api(port_, secret, path);

  void wire_derive_descriptor_secret__static_method__Api(NativePortType port_, String secret, String path) => wasmModule.wire_derive_descriptor_secret__static_method__Api(port_, secret, path);

  void wire_as_secret_bytes__static_method__Api(NativePortType port_, String secret) => wasmModule.wire_as_secret_bytes__static_method__Api(port_, secret);

  void wire_as_public__static_method__Api(NativePortType port_, String secret) => wasmModule.wire_as_public__static_method__Api(port_, secret);

  void wire_get_pub_from_secret_bytes__static_method__Api(NativePortType port_, Uint8List bytes) => wasmModule.wire_get_pub_from_secret_bytes__static_method__Api(port_, bytes);

  void wire_create_derivation_path__static_method__Api(NativePortType port_, String path) => wasmModule.wire_create_derivation_path__static_method__Api(port_, path);

  void wire_descriptor_public_from_string__static_method__Api(NativePortType port_, String public_key) => wasmModule.wire_descriptor_public_from_string__static_method__Api(port_, public_key);

  void wire_master_finterprint__static_method__Api(NativePortType port_, String xpub) => wasmModule.wire_master_finterprint__static_method__Api(port_, xpub);

  void wire_create_descriptor_public__static_method__Api(NativePortType port_, String? xpub, String path, bool derive) => wasmModule.wire_create_descriptor_public__static_method__Api(port_, xpub, path, derive);

  void wire_to_public_string__static_method__Api(NativePortType port_, String xpub) => wasmModule.wire_to_public_string__static_method__Api(port_, xpub);

  void wire_create_script__static_method__Api(NativePortType port_, Uint8List raw_output_script) => wasmModule.wire_create_script__static_method__Api(port_, raw_output_script);

  void wire_create_address__static_method__Api(NativePortType port_, String address) => wasmModule.wire_create_address__static_method__Api(port_, address);

  void wire_address_from_script__static_method__Api(NativePortType port_, List<dynamic> script, int network) => wasmModule.wire_address_from_script__static_method__Api(port_, script, network);

  void wire_address_to_script_pubkey__static_method__Api(NativePortType port_, String address) => wasmModule.wire_address_to_script_pubkey__static_method__Api(port_, address);

  void wire_payload__static_method__Api(NativePortType port_, String address) => wasmModule.wire_payload__static_method__Api(port_, address);

  void wire_address_network__static_method__Api(NativePortType port_, String address) => wasmModule.wire_address_network__static_method__Api(port_, address);

  void wire_get_address_type__static_method__Api(NativePortType port_, String address) => wasmModule.wire_get_address_type__static_method__Api(port_, address);

  void wire_create_wallet__static_method__Api(NativePortType port_, Object descriptor, Object? change_descriptor, int network, List<dynamic> database_config) => wasmModule.wire_create_wallet__static_method__Api(port_, descriptor, change_descriptor, network, database_config);

  void wire_get_address__static_method__Api(NativePortType port_, Object wallet, List<dynamic> address_index) => wasmModule.wire_get_address__static_method__Api(port_, wallet, address_index);

  void wire_get_internal_address__static_method__Api(NativePortType port_, Object wallet, List<dynamic> address_index) => wasmModule.wire_get_internal_address__static_method__Api(port_, wallet, address_index);

  void wire_sync_wallet__static_method__Api(NativePortType port_, Object wallet, Object blockchain) => wasmModule.wire_sync_wallet__static_method__Api(port_, wallet, blockchain);

  void wire_sync_wallet_thread__static_method__Api(NativePortType port_, Object wallet, Object blockchain) => wasmModule.wire_sync_wallet_thread__static_method__Api(port_, wallet, blockchain);

  void wire_get_balance__static_method__Api(NativePortType port_, Object wallet) => wasmModule.wire_get_balance__static_method__Api(port_, wallet);

  void wire_list_unspent_outputs__static_method__Api(NativePortType port_, Object wallet) => wasmModule.wire_list_unspent_outputs__static_method__Api(port_, wallet);

  void wire_get_transactions__static_method__Api(NativePortType port_, Object wallet, bool include_raw) => wasmModule.wire_get_transactions__static_method__Api(port_, wallet, include_raw);

  void wire_sign__static_method__Api(NativePortType port_, Object wallet, String psbt_str, List<dynamic>? sign_options) => wasmModule.wire_sign__static_method__Api(port_, wallet, psbt_str, sign_options);

  void wire_wallet_network__static_method__Api(NativePortType port_, Object wallet) => wasmModule.wire_wallet_network__static_method__Api(port_, wallet);

  void wire_list_unspent__static_method__Api(NativePortType port_, Object wallet) => wasmModule.wire_list_unspent__static_method__Api(port_, wallet);

  void wire_cache_address__static_method__Api(NativePortType port_, Object wallet, int cache_size) => wasmModule.wire_cache_address__static_method__Api(port_, wallet, cache_size);

  void wire_generate_seed_from_word_count__static_method__Api(NativePortType port_, int word_count) => wasmModule.wire_generate_seed_from_word_count__static_method__Api(port_, word_count);

  void wire_generate_seed_from_string__static_method__Api(NativePortType port_, String mnemonic) => wasmModule.wire_generate_seed_from_string__static_method__Api(port_, mnemonic);

  void wire_generate_seed_from_entropy__static_method__Api(NativePortType port_, Uint8List entropy) => wasmModule.wire_generate_seed_from_entropy__static_method__Api(port_, entropy);

  void wire_bip322_sign_segwit__static_method__Api(NativePortType port_, Uint8List secret, String message) => wasmModule.wire_bip322_sign_segwit__static_method__Api(port_, secret, message);

  void wire_bip322_sign_taproot__static_method__Api(NativePortType port_, Uint8List secret, String message) => wasmModule.wire_bip322_sign_taproot__static_method__Api(port_, secret, message);

  dynamic /*  */ drop_opaque_BdkDescriptor(ptr) => wasmModule.drop_opaque_BdkDescriptor(ptr);

  int /* *const c_void */ share_opaque_BdkDescriptor(ptr) => wasmModule.share_opaque_BdkDescriptor(ptr);

  dynamic /*  */ drop_opaque_BlockchainInstance(ptr) => wasmModule.drop_opaque_BlockchainInstance(ptr);

  int /* *const c_void */ share_opaque_BlockchainInstance(ptr) => wasmModule.share_opaque_BlockchainInstance(ptr);

  dynamic /*  */ drop_opaque_WalletInstance(ptr) => wasmModule.drop_opaque_WalletInstance(ptr);

  int /* *const c_void */ share_opaque_WalletInstance(ptr) => wasmModule.share_opaque_WalletInstance(ptr);
}
