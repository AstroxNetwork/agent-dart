// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.77.0.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, unnecessary_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names, invalid_use_of_internal_member, prefer_is_empty, unnecessary_const

import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:uuid/uuid.dart';
import 'bridge_generated.dart';
export 'bridge_generated.dart';
import 'dart:ffi' as ffi;

class AgentDartPlatform extends FlutterRustBridgeBase<AgentDartWire> {
  AgentDartPlatform(ffi.DynamicLibrary dylib) : super(AgentDartWire(dylib));

// Section: api2wire

  @protected
  wire_BdkDescriptor api2wire_BdkDescriptor(BdkDescriptor raw) {
    final ptr = inner.new_BdkDescriptor();
    _api_fill_to_wire_BdkDescriptor(raw, ptr);
    return ptr;
  }

  @protected
  wire_BlockchainInstance api2wire_BlockchainInstance(BlockchainInstance raw) {
    final ptr = inner.new_BlockchainInstance();
    _api_fill_to_wire_BlockchainInstance(raw, ptr);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_String(String raw) {
    return api2wire_uint_8_list(utf8.encoder.convert(raw));
  }

  @protected
  wire_WalletInstance api2wire_WalletInstance(WalletInstance raw) {
    final ptr = inner.new_WalletInstance();
    _api_fill_to_wire_WalletInstance(raw, ptr);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_BdkDescriptor> api2wire_box_autoadd_BdkDescriptor(BdkDescriptor raw) {
    final ptr = inner.new_box_autoadd_BdkDescriptor_0();
    _api_fill_to_wire_BdkDescriptor(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_AddressIndex> api2wire_box_autoadd_address_index(AddressIndex raw) {
    final ptr = inner.new_box_autoadd_address_index_0();
    _api_fill_to_wire_address_index(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_AesDecryptReq> api2wire_box_autoadd_aes_decrypt_req(AesDecryptReq raw) {
    final ptr = inner.new_box_autoadd_aes_decrypt_req_0();
    _api_fill_to_wire_aes_decrypt_req(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_AesEncryptReq> api2wire_box_autoadd_aes_encrypt_req(AesEncryptReq raw) {
    final ptr = inner.new_box_autoadd_aes_encrypt_req_0();
    _api_fill_to_wire_aes_encrypt_req(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_BlockchainConfig> api2wire_box_autoadd_blockchain_config(BlockchainConfig raw) {
    final ptr = inner.new_box_autoadd_blockchain_config_0();
    _api_fill_to_wire_blockchain_config(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_BLSVerifyReq> api2wire_box_autoadd_bls_verify_req(BLSVerifyReq raw) {
    final ptr = inner.new_box_autoadd_bls_verify_req_0();
    _api_fill_to_wire_bls_verify_req(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<ffi.Bool> api2wire_box_autoadd_bool(bool raw) {
    return inner.new_box_autoadd_bool_0(api2wire_bool(raw));
  }

  @protected
  ffi.Pointer<wire_DatabaseConfig> api2wire_box_autoadd_database_config(DatabaseConfig raw) {
    final ptr = inner.new_box_autoadd_database_config_0();
    _api_fill_to_wire_database_config(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_ED25519FromSeedReq> api2wire_box_autoadd_ed_25519_from_seed_req(ED25519FromSeedReq raw) {
    final ptr = inner.new_box_autoadd_ed_25519_from_seed_req_0();
    _api_fill_to_wire_ed_25519_from_seed_req(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_ED25519SignReq> api2wire_box_autoadd_ed_25519_sign_req(ED25519SignReq raw) {
    final ptr = inner.new_box_autoadd_ed_25519_sign_req_0();
    _api_fill_to_wire_ed_25519_sign_req(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_ED25519VerifyReq> api2wire_box_autoadd_ed_25519_verify_req(ED25519VerifyReq raw) {
    final ptr = inner.new_box_autoadd_ed_25519_verify_req_0();
    _api_fill_to_wire_ed_25519_verify_req(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_ElectrumConfig> api2wire_box_autoadd_electrum_config(ElectrumConfig raw) {
    final ptr = inner.new_box_autoadd_electrum_config_0();
    _api_fill_to_wire_electrum_config(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_EsploraConfig> api2wire_box_autoadd_esplora_config(EsploraConfig raw) {
    final ptr = inner.new_box_autoadd_esplora_config_0();
    _api_fill_to_wire_esplora_config(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<ffi.Float> api2wire_box_autoadd_f32(double raw) {
    return inner.new_box_autoadd_f32_0(api2wire_f32(raw));
  }

  @protected
  ffi.Pointer<wire_P256FromSeedReq> api2wire_box_autoadd_p_256_from_seed_req(P256FromSeedReq raw) {
    final ptr = inner.new_box_autoadd_p_256_from_seed_req_0();
    _api_fill_to_wire_p_256_from_seed_req(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_P256ShareSecretReq> api2wire_box_autoadd_p_256_share_secret_req(P256ShareSecretReq raw) {
    final ptr = inner.new_box_autoadd_p_256_share_secret_req_0();
    _api_fill_to_wire_p_256_share_secret_req(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_P256SignWithSeedReq> api2wire_box_autoadd_p_256_sign_with_seed_req(P256SignWithSeedReq raw) {
    final ptr = inner.new_box_autoadd_p_256_sign_with_seed_req_0();
    _api_fill_to_wire_p_256_sign_with_seed_req(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_P256VerifyReq> api2wire_box_autoadd_p_256_verify_req(P256VerifyReq raw) {
    final ptr = inner.new_box_autoadd_p_256_verify_req_0();
    _api_fill_to_wire_p_256_verify_req(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_PBKDFDeriveReq> api2wire_box_autoadd_pbkdf_derive_req(PBKDFDeriveReq raw) {
    final ptr = inner.new_box_autoadd_pbkdf_derive_req_0();
    _api_fill_to_wire_pbkdf_derive_req(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_PhraseToSeedReq> api2wire_box_autoadd_phrase_to_seed_req(PhraseToSeedReq raw) {
    final ptr = inner.new_box_autoadd_phrase_to_seed_req_0();
    _api_fill_to_wire_phrase_to_seed_req(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_RbfValue> api2wire_box_autoadd_rbf_value(RbfValue raw) {
    final ptr = inner.new_box_autoadd_rbf_value_0();
    _api_fill_to_wire_rbf_value(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_RpcConfig> api2wire_box_autoadd_rpc_config(RpcConfig raw) {
    final ptr = inner.new_box_autoadd_rpc_config_0();
    _api_fill_to_wire_rpc_config(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_RpcSyncParams> api2wire_box_autoadd_rpc_sync_params(RpcSyncParams raw) {
    final ptr = inner.new_box_autoadd_rpc_sync_params_0();
    _api_fill_to_wire_rpc_sync_params(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_SchnorrFromSeedReq> api2wire_box_autoadd_schnorr_from_seed_req(SchnorrFromSeedReq raw) {
    final ptr = inner.new_box_autoadd_schnorr_from_seed_req_0();
    _api_fill_to_wire_schnorr_from_seed_req(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_SchnorrSignWithSeedReq> api2wire_box_autoadd_schnorr_sign_with_seed_req(SchnorrSignWithSeedReq raw) {
    final ptr = inner.new_box_autoadd_schnorr_sign_with_seed_req_0();
    _api_fill_to_wire_schnorr_sign_with_seed_req(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_SchnorrVerifyReq> api2wire_box_autoadd_schnorr_verify_req(SchnorrVerifyReq raw) {
    final ptr = inner.new_box_autoadd_schnorr_verify_req_0();
    _api_fill_to_wire_schnorr_verify_req(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_Script> api2wire_box_autoadd_script(Script raw) {
    final ptr = inner.new_box_autoadd_script_0();
    _api_fill_to_wire_script(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_ScriptDeriveReq> api2wire_box_autoadd_script_derive_req(ScriptDeriveReq raw) {
    final ptr = inner.new_box_autoadd_script_derive_req_0();
    _api_fill_to_wire_script_derive_req(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_Secp256k1FromSeedReq> api2wire_box_autoadd_secp_256_k_1_from_seed_req(Secp256k1FromSeedReq raw) {
    final ptr = inner.new_box_autoadd_secp_256_k_1_from_seed_req_0();
    _api_fill_to_wire_secp_256_k_1_from_seed_req(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_Secp256k1RecoverReq> api2wire_box_autoadd_secp_256_k_1_recover_req(Secp256k1RecoverReq raw) {
    final ptr = inner.new_box_autoadd_secp_256_k_1_recover_req_0();
    _api_fill_to_wire_secp_256_k_1_recover_req(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_Secp256k1ShareSecretReq> api2wire_box_autoadd_secp_256_k_1_share_secret_req(Secp256k1ShareSecretReq raw) {
    final ptr = inner.new_box_autoadd_secp_256_k_1_share_secret_req_0();
    _api_fill_to_wire_secp_256_k_1_share_secret_req(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_Secp256k1SignWithSeedReq> api2wire_box_autoadd_secp_256_k_1_sign_with_seed_req(Secp256k1SignWithSeedReq raw) {
    final ptr = inner.new_box_autoadd_secp_256_k_1_sign_with_seed_req_0();
    _api_fill_to_wire_secp_256_k_1_sign_with_seed_req(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_Secp256k1VerifyReq> api2wire_box_autoadd_secp_256_k_1_verify_req(Secp256k1VerifyReq raw) {
    final ptr = inner.new_box_autoadd_secp_256_k_1_verify_req_0();
    _api_fill_to_wire_secp_256_k_1_verify_req(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_SeedToKeyReq> api2wire_box_autoadd_seed_to_key_req(SeedToKeyReq raw) {
    final ptr = inner.new_box_autoadd_seed_to_key_req_0();
    _api_fill_to_wire_seed_to_key_req(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_SignOptions> api2wire_box_autoadd_sign_options(SignOptions raw) {
    final ptr = inner.new_box_autoadd_sign_options_0();
    _api_fill_to_wire_sign_options(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_SledDbConfiguration> api2wire_box_autoadd_sled_db_configuration(SledDbConfiguration raw) {
    final ptr = inner.new_box_autoadd_sled_db_configuration_0();
    _api_fill_to_wire_sled_db_configuration(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_SqliteDbConfiguration> api2wire_box_autoadd_sqlite_db_configuration(SqliteDbConfiguration raw) {
    final ptr = inner.new_box_autoadd_sqlite_db_configuration_0();
    _api_fill_to_wire_sqlite_db_configuration(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<ffi.Uint32> api2wire_box_autoadd_u32(int raw) {
    return inner.new_box_autoadd_u32_0(api2wire_u32(raw));
  }

  @protected
  ffi.Pointer<ffi.Uint64> api2wire_box_autoadd_u64(int raw) {
    return inner.new_box_autoadd_u64_0(api2wire_u64(raw));
  }

  @protected
  ffi.Pointer<ffi.Uint8> api2wire_box_autoadd_u8(int raw) {
    return inner.new_box_autoadd_u8_0(api2wire_u8(raw));
  }

  @protected
  ffi.Pointer<wire_UserPass> api2wire_box_autoadd_user_pass(UserPass raw) {
    final ptr = inner.new_box_autoadd_user_pass_0();
    _api_fill_to_wire_user_pass(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_list_out_point> api2wire_list_out_point(List<OutPoint> raw) {
    final ans = inner.new_list_out_point_0(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      _api_fill_to_wire_out_point(raw[i], ans.ref.ptr[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_list_script_amount> api2wire_list_script_amount(List<ScriptAmount> raw) {
    final ans = inner.new_list_script_amount_0(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      _api_fill_to_wire_script_amount(raw[i], ans.ref.ptr[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_opt_String(String? raw) {
    return raw == null ? ffi.nullptr : api2wire_String(raw);
  }

  @protected
  ffi.Pointer<wire_BdkDescriptor> api2wire_opt_box_autoadd_BdkDescriptor(BdkDescriptor? raw) {
    return raw == null ? ffi.nullptr : api2wire_box_autoadd_BdkDescriptor(raw);
  }

  @protected
  ffi.Pointer<ffi.Bool> api2wire_opt_box_autoadd_bool(bool? raw) {
    return raw == null ? ffi.nullptr : api2wire_box_autoadd_bool(raw);
  }

  @protected
  ffi.Pointer<ffi.Float> api2wire_opt_box_autoadd_f32(double? raw) {
    return raw == null ? ffi.nullptr : api2wire_box_autoadd_f32(raw);
  }

  @protected
  ffi.Pointer<wire_RbfValue> api2wire_opt_box_autoadd_rbf_value(RbfValue? raw) {
    return raw == null ? ffi.nullptr : api2wire_box_autoadd_rbf_value(raw);
  }

  @protected
  ffi.Pointer<wire_RpcSyncParams> api2wire_opt_box_autoadd_rpc_sync_params(RpcSyncParams? raw) {
    return raw == null ? ffi.nullptr : api2wire_box_autoadd_rpc_sync_params(raw);
  }

  @protected
  ffi.Pointer<wire_Script> api2wire_opt_box_autoadd_script(Script? raw) {
    return raw == null ? ffi.nullptr : api2wire_box_autoadd_script(raw);
  }

  @protected
  ffi.Pointer<wire_SignOptions> api2wire_opt_box_autoadd_sign_options(SignOptions? raw) {
    return raw == null ? ffi.nullptr : api2wire_box_autoadd_sign_options(raw);
  }

  @protected
  ffi.Pointer<ffi.Uint32> api2wire_opt_box_autoadd_u32(int? raw) {
    return raw == null ? ffi.nullptr : api2wire_box_autoadd_u32(raw);
  }

  @protected
  ffi.Pointer<ffi.Uint64> api2wire_opt_box_autoadd_u64(int? raw) {
    return raw == null ? ffi.nullptr : api2wire_box_autoadd_u64(raw);
  }

  @protected
  ffi.Pointer<ffi.Uint8> api2wire_opt_box_autoadd_u8(int? raw) {
    return raw == null ? ffi.nullptr : api2wire_box_autoadd_u8(raw);
  }

  @protected
  ffi.Pointer<wire_UserPass> api2wire_opt_box_autoadd_user_pass(UserPass? raw) {
    return raw == null ? ffi.nullptr : api2wire_box_autoadd_user_pass(raw);
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_opt_uint_8_list(Uint8List? raw) {
    return raw == null ? ffi.nullptr : api2wire_uint_8_list(raw);
  }

  @protected
  int api2wire_u64(int raw) {
    return raw;
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_uint_8_list(Uint8List raw) {
    final ans = inner.new_uint_8_list_0(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }

// Section: finalizer

  late final OpaqueTypeFinalizer _BdkDescriptorFinalizer = OpaqueTypeFinalizer(inner._drop_opaque_BdkDescriptorPtr);
  OpaqueTypeFinalizer get BdkDescriptorFinalizer => _BdkDescriptorFinalizer;
  late final OpaqueTypeFinalizer _BlockchainInstanceFinalizer = OpaqueTypeFinalizer(inner._drop_opaque_BlockchainInstancePtr);
  OpaqueTypeFinalizer get BlockchainInstanceFinalizer => _BlockchainInstanceFinalizer;
  late final OpaqueTypeFinalizer _WalletInstanceFinalizer = OpaqueTypeFinalizer(inner._drop_opaque_WalletInstancePtr);
  OpaqueTypeFinalizer get WalletInstanceFinalizer => _WalletInstanceFinalizer;
// Section: api_fill_to_wire

  void _api_fill_to_wire_BdkDescriptor(BdkDescriptor apiObj, wire_BdkDescriptor wireObj) {
    wireObj.ptr = apiObj.shareOrMove();
  }

  void _api_fill_to_wire_BlockchainInstance(BlockchainInstance apiObj, wire_BlockchainInstance wireObj) {
    wireObj.ptr = apiObj.shareOrMove();
  }

  void _api_fill_to_wire_WalletInstance(WalletInstance apiObj, wire_WalletInstance wireObj) {
    wireObj.ptr = apiObj.shareOrMove();
  }

  void _api_fill_to_wire_address_index(AddressIndex apiObj, wire_AddressIndex wireObj) {
    if (apiObj is AddressIndex_New) {
      wireObj.tag = 0;
      return;
    }
    if (apiObj is AddressIndex_LastUnused) {
      wireObj.tag = 1;
      return;
    }
    if (apiObj is AddressIndex_Peek) {
      var pre_index = api2wire_u32(apiObj.index);
      wireObj.tag = 2;
      wireObj.kind = inner.inflate_AddressIndex_Peek();
      wireObj.kind.ref.Peek.ref.index = pre_index;
      return;
    }
    if (apiObj is AddressIndex_Reset) {
      var pre_index = api2wire_u32(apiObj.index);
      wireObj.tag = 3;
      wireObj.kind = inner.inflate_AddressIndex_Reset();
      wireObj.kind.ref.Reset.ref.index = pre_index;
      return;
    }
  }

  void _api_fill_to_wire_aes_decrypt_req(AesDecryptReq apiObj, wire_AesDecryptReq wireObj) {
    wireObj.key = api2wire_uint_8_list(apiObj.key);
    wireObj.iv = api2wire_uint_8_list(apiObj.iv);
    wireObj.cipher_text = api2wire_uint_8_list(apiObj.cipherText);
  }

  void _api_fill_to_wire_aes_encrypt_req(AesEncryptReq apiObj, wire_AesEncryptReq wireObj) {
    wireObj.key = api2wire_uint_8_list(apiObj.key);
    wireObj.iv = api2wire_uint_8_list(apiObj.iv);
    wireObj.message = api2wire_uint_8_list(apiObj.message);
  }

  void _api_fill_to_wire_blockchain_config(BlockchainConfig apiObj, wire_BlockchainConfig wireObj) {
    if (apiObj is BlockchainConfig_Electrum) {
      var pre_config = api2wire_box_autoadd_electrum_config(apiObj.config);
      wireObj.tag = 0;
      wireObj.kind = inner.inflate_BlockchainConfig_Electrum();
      wireObj.kind.ref.Electrum.ref.config = pre_config;
      return;
    }
    if (apiObj is BlockchainConfig_Esplora) {
      var pre_config = api2wire_box_autoadd_esplora_config(apiObj.config);
      wireObj.tag = 1;
      wireObj.kind = inner.inflate_BlockchainConfig_Esplora();
      wireObj.kind.ref.Esplora.ref.config = pre_config;
      return;
    }
    if (apiObj is BlockchainConfig_Rpc) {
      var pre_config = api2wire_box_autoadd_rpc_config(apiObj.config);
      wireObj.tag = 2;
      wireObj.kind = inner.inflate_BlockchainConfig_Rpc();
      wireObj.kind.ref.Rpc.ref.config = pre_config;
      return;
    }
  }

  void _api_fill_to_wire_bls_verify_req(BLSVerifyReq apiObj, wire_BLSVerifyReq wireObj) {
    wireObj.signature = api2wire_uint_8_list(apiObj.signature);
    wireObj.message = api2wire_uint_8_list(apiObj.message);
    wireObj.public_key = api2wire_uint_8_list(apiObj.publicKey);
  }

  void _api_fill_to_wire_box_autoadd_BdkDescriptor(BdkDescriptor apiObj, ffi.Pointer<wire_BdkDescriptor> wireObj) {
    _api_fill_to_wire_BdkDescriptor(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_address_index(AddressIndex apiObj, ffi.Pointer<wire_AddressIndex> wireObj) {
    _api_fill_to_wire_address_index(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_aes_decrypt_req(AesDecryptReq apiObj, ffi.Pointer<wire_AesDecryptReq> wireObj) {
    _api_fill_to_wire_aes_decrypt_req(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_aes_encrypt_req(AesEncryptReq apiObj, ffi.Pointer<wire_AesEncryptReq> wireObj) {
    _api_fill_to_wire_aes_encrypt_req(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_blockchain_config(BlockchainConfig apiObj, ffi.Pointer<wire_BlockchainConfig> wireObj) {
    _api_fill_to_wire_blockchain_config(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_bls_verify_req(BLSVerifyReq apiObj, ffi.Pointer<wire_BLSVerifyReq> wireObj) {
    _api_fill_to_wire_bls_verify_req(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_database_config(DatabaseConfig apiObj, ffi.Pointer<wire_DatabaseConfig> wireObj) {
    _api_fill_to_wire_database_config(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_ed_25519_from_seed_req(ED25519FromSeedReq apiObj, ffi.Pointer<wire_ED25519FromSeedReq> wireObj) {
    _api_fill_to_wire_ed_25519_from_seed_req(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_ed_25519_sign_req(ED25519SignReq apiObj, ffi.Pointer<wire_ED25519SignReq> wireObj) {
    _api_fill_to_wire_ed_25519_sign_req(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_ed_25519_verify_req(ED25519VerifyReq apiObj, ffi.Pointer<wire_ED25519VerifyReq> wireObj) {
    _api_fill_to_wire_ed_25519_verify_req(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_electrum_config(ElectrumConfig apiObj, ffi.Pointer<wire_ElectrumConfig> wireObj) {
    _api_fill_to_wire_electrum_config(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_esplora_config(EsploraConfig apiObj, ffi.Pointer<wire_EsploraConfig> wireObj) {
    _api_fill_to_wire_esplora_config(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_p_256_from_seed_req(P256FromSeedReq apiObj, ffi.Pointer<wire_P256FromSeedReq> wireObj) {
    _api_fill_to_wire_p_256_from_seed_req(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_p_256_share_secret_req(P256ShareSecretReq apiObj, ffi.Pointer<wire_P256ShareSecretReq> wireObj) {
    _api_fill_to_wire_p_256_share_secret_req(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_p_256_sign_with_seed_req(P256SignWithSeedReq apiObj, ffi.Pointer<wire_P256SignWithSeedReq> wireObj) {
    _api_fill_to_wire_p_256_sign_with_seed_req(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_p_256_verify_req(P256VerifyReq apiObj, ffi.Pointer<wire_P256VerifyReq> wireObj) {
    _api_fill_to_wire_p_256_verify_req(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_pbkdf_derive_req(PBKDFDeriveReq apiObj, ffi.Pointer<wire_PBKDFDeriveReq> wireObj) {
    _api_fill_to_wire_pbkdf_derive_req(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_phrase_to_seed_req(PhraseToSeedReq apiObj, ffi.Pointer<wire_PhraseToSeedReq> wireObj) {
    _api_fill_to_wire_phrase_to_seed_req(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_rbf_value(RbfValue apiObj, ffi.Pointer<wire_RbfValue> wireObj) {
    _api_fill_to_wire_rbf_value(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_rpc_config(RpcConfig apiObj, ffi.Pointer<wire_RpcConfig> wireObj) {
    _api_fill_to_wire_rpc_config(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_rpc_sync_params(RpcSyncParams apiObj, ffi.Pointer<wire_RpcSyncParams> wireObj) {
    _api_fill_to_wire_rpc_sync_params(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_schnorr_from_seed_req(SchnorrFromSeedReq apiObj, ffi.Pointer<wire_SchnorrFromSeedReq> wireObj) {
    _api_fill_to_wire_schnorr_from_seed_req(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_schnorr_sign_with_seed_req(SchnorrSignWithSeedReq apiObj, ffi.Pointer<wire_SchnorrSignWithSeedReq> wireObj) {
    _api_fill_to_wire_schnorr_sign_with_seed_req(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_schnorr_verify_req(SchnorrVerifyReq apiObj, ffi.Pointer<wire_SchnorrVerifyReq> wireObj) {
    _api_fill_to_wire_schnorr_verify_req(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_script(Script apiObj, ffi.Pointer<wire_Script> wireObj) {
    _api_fill_to_wire_script(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_script_derive_req(ScriptDeriveReq apiObj, ffi.Pointer<wire_ScriptDeriveReq> wireObj) {
    _api_fill_to_wire_script_derive_req(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_secp_256_k_1_from_seed_req(Secp256k1FromSeedReq apiObj, ffi.Pointer<wire_Secp256k1FromSeedReq> wireObj) {
    _api_fill_to_wire_secp_256_k_1_from_seed_req(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_secp_256_k_1_recover_req(Secp256k1RecoverReq apiObj, ffi.Pointer<wire_Secp256k1RecoverReq> wireObj) {
    _api_fill_to_wire_secp_256_k_1_recover_req(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_secp_256_k_1_share_secret_req(Secp256k1ShareSecretReq apiObj, ffi.Pointer<wire_Secp256k1ShareSecretReq> wireObj) {
    _api_fill_to_wire_secp_256_k_1_share_secret_req(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_secp_256_k_1_sign_with_seed_req(Secp256k1SignWithSeedReq apiObj, ffi.Pointer<wire_Secp256k1SignWithSeedReq> wireObj) {
    _api_fill_to_wire_secp_256_k_1_sign_with_seed_req(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_secp_256_k_1_verify_req(Secp256k1VerifyReq apiObj, ffi.Pointer<wire_Secp256k1VerifyReq> wireObj) {
    _api_fill_to_wire_secp_256_k_1_verify_req(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_seed_to_key_req(SeedToKeyReq apiObj, ffi.Pointer<wire_SeedToKeyReq> wireObj) {
    _api_fill_to_wire_seed_to_key_req(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_sign_options(SignOptions apiObj, ffi.Pointer<wire_SignOptions> wireObj) {
    _api_fill_to_wire_sign_options(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_sled_db_configuration(SledDbConfiguration apiObj, ffi.Pointer<wire_SledDbConfiguration> wireObj) {
    _api_fill_to_wire_sled_db_configuration(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_sqlite_db_configuration(SqliteDbConfiguration apiObj, ffi.Pointer<wire_SqliteDbConfiguration> wireObj) {
    _api_fill_to_wire_sqlite_db_configuration(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_user_pass(UserPass apiObj, ffi.Pointer<wire_UserPass> wireObj) {
    _api_fill_to_wire_user_pass(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_database_config(DatabaseConfig apiObj, wire_DatabaseConfig wireObj) {
    if (apiObj is DatabaseConfig_Memory) {
      wireObj.tag = 0;
      return;
    }
    if (apiObj is DatabaseConfig_Sqlite) {
      var pre_config = api2wire_box_autoadd_sqlite_db_configuration(apiObj.config);
      wireObj.tag = 1;
      wireObj.kind = inner.inflate_DatabaseConfig_Sqlite();
      wireObj.kind.ref.Sqlite.ref.config = pre_config;
      return;
    }
    if (apiObj is DatabaseConfig_Sled) {
      var pre_config = api2wire_box_autoadd_sled_db_configuration(apiObj.config);
      wireObj.tag = 2;
      wireObj.kind = inner.inflate_DatabaseConfig_Sled();
      wireObj.kind.ref.Sled.ref.config = pre_config;
      return;
    }
  }

  void _api_fill_to_wire_ed_25519_from_seed_req(ED25519FromSeedReq apiObj, wire_ED25519FromSeedReq wireObj) {
    wireObj.seed = api2wire_uint_8_list(apiObj.seed);
  }

  void _api_fill_to_wire_ed_25519_sign_req(ED25519SignReq apiObj, wire_ED25519SignReq wireObj) {
    wireObj.seed = api2wire_uint_8_list(apiObj.seed);
    wireObj.message = api2wire_uint_8_list(apiObj.message);
  }

  void _api_fill_to_wire_ed_25519_verify_req(ED25519VerifyReq apiObj, wire_ED25519VerifyReq wireObj) {
    wireObj.sig = api2wire_uint_8_list(apiObj.sig);
    wireObj.message = api2wire_uint_8_list(apiObj.message);
    wireObj.pub_key = api2wire_uint_8_list(apiObj.pubKey);
  }

  void _api_fill_to_wire_electrum_config(ElectrumConfig apiObj, wire_ElectrumConfig wireObj) {
    wireObj.url = api2wire_String(apiObj.url);
    wireObj.socks5 = api2wire_opt_String(apiObj.socks5);
    wireObj.retry = api2wire_u8(apiObj.retry);
    wireObj.timeout = api2wire_opt_box_autoadd_u8(apiObj.timeout);
    wireObj.stop_gap = api2wire_u64(apiObj.stopGap);
    wireObj.validate_domain = api2wire_bool(apiObj.validateDomain);
  }

  void _api_fill_to_wire_esplora_config(EsploraConfig apiObj, wire_EsploraConfig wireObj) {
    wireObj.base_url = api2wire_String(apiObj.baseUrl);
    wireObj.proxy = api2wire_opt_String(apiObj.proxy);
    wireObj.concurrency = api2wire_opt_box_autoadd_u8(apiObj.concurrency);
    wireObj.stop_gap = api2wire_u64(apiObj.stopGap);
    wireObj.timeout = api2wire_opt_box_autoadd_u64(apiObj.timeout);
  }

  void _api_fill_to_wire_opt_box_autoadd_BdkDescriptor(BdkDescriptor? apiObj, ffi.Pointer<wire_BdkDescriptor> wireObj) {
    if (apiObj != null) _api_fill_to_wire_box_autoadd_BdkDescriptor(apiObj, wireObj);
  }

  void _api_fill_to_wire_opt_box_autoadd_rbf_value(RbfValue? apiObj, ffi.Pointer<wire_RbfValue> wireObj) {
    if (apiObj != null) _api_fill_to_wire_box_autoadd_rbf_value(apiObj, wireObj);
  }

  void _api_fill_to_wire_opt_box_autoadd_rpc_sync_params(RpcSyncParams? apiObj, ffi.Pointer<wire_RpcSyncParams> wireObj) {
    if (apiObj != null) _api_fill_to_wire_box_autoadd_rpc_sync_params(apiObj, wireObj);
  }

  void _api_fill_to_wire_opt_box_autoadd_script(Script? apiObj, ffi.Pointer<wire_Script> wireObj) {
    if (apiObj != null) _api_fill_to_wire_box_autoadd_script(apiObj, wireObj);
  }

  void _api_fill_to_wire_opt_box_autoadd_sign_options(SignOptions? apiObj, ffi.Pointer<wire_SignOptions> wireObj) {
    if (apiObj != null) _api_fill_to_wire_box_autoadd_sign_options(apiObj, wireObj);
  }

  void _api_fill_to_wire_opt_box_autoadd_user_pass(UserPass? apiObj, ffi.Pointer<wire_UserPass> wireObj) {
    if (apiObj != null) _api_fill_to_wire_box_autoadd_user_pass(apiObj, wireObj);
  }

  void _api_fill_to_wire_out_point(OutPoint apiObj, wire_OutPoint wireObj) {
    wireObj.txid = api2wire_String(apiObj.txid);
    wireObj.vout = api2wire_u32(apiObj.vout);
  }

  void _api_fill_to_wire_p_256_from_seed_req(P256FromSeedReq apiObj, wire_P256FromSeedReq wireObj) {
    wireObj.seed = api2wire_uint_8_list(apiObj.seed);
  }

  void _api_fill_to_wire_p_256_share_secret_req(P256ShareSecretReq apiObj, wire_P256ShareSecretReq wireObj) {
    wireObj.seed = api2wire_uint_8_list(apiObj.seed);
    wireObj.public_key_raw_bytes = api2wire_uint_8_list(apiObj.publicKeyRawBytes);
  }

  void _api_fill_to_wire_p_256_sign_with_seed_req(P256SignWithSeedReq apiObj, wire_P256SignWithSeedReq wireObj) {
    wireObj.msg = api2wire_uint_8_list(apiObj.msg);
    wireObj.seed = api2wire_uint_8_list(apiObj.seed);
  }

  void _api_fill_to_wire_p_256_verify_req(P256VerifyReq apiObj, wire_P256VerifyReq wireObj) {
    wireObj.message_hash = api2wire_uint_8_list(apiObj.messageHash);
    wireObj.signature_bytes = api2wire_uint_8_list(apiObj.signatureBytes);
    wireObj.public_key_bytes = api2wire_uint_8_list(apiObj.publicKeyBytes);
  }

  void _api_fill_to_wire_pbkdf_derive_req(PBKDFDeriveReq apiObj, wire_PBKDFDeriveReq wireObj) {
    wireObj.password = api2wire_uint_8_list(apiObj.password);
    wireObj.salt = api2wire_uint_8_list(apiObj.salt);
    wireObj.c = api2wire_u32(apiObj.c);
  }

  void _api_fill_to_wire_phrase_to_seed_req(PhraseToSeedReq apiObj, wire_PhraseToSeedReq wireObj) {
    wireObj.phrase = api2wire_String(apiObj.phrase);
    wireObj.password = api2wire_String(apiObj.password);
  }

  void _api_fill_to_wire_rbf_value(RbfValue apiObj, wire_RbfValue wireObj) {
    if (apiObj is RbfValue_RbfDefault) {
      wireObj.tag = 0;
      return;
    }
    if (apiObj is RbfValue_Value) {
      var pre_field0 = api2wire_u32(apiObj.field0);
      wireObj.tag = 1;
      wireObj.kind = inner.inflate_RbfValue_Value();
      wireObj.kind.ref.Value.ref.field0 = pre_field0;
      return;
    }
  }

  void _api_fill_to_wire_rpc_config(RpcConfig apiObj, wire_RpcConfig wireObj) {
    wireObj.url = api2wire_String(apiObj.url);
    wireObj.auth_cookie = api2wire_opt_String(apiObj.authCookie);
    wireObj.auth_user_pass = api2wire_opt_box_autoadd_user_pass(apiObj.authUserPass);
    wireObj.network = api2wire_network(apiObj.network);
    wireObj.wallet_name = api2wire_String(apiObj.walletName);
    wireObj.sync_params = api2wire_opt_box_autoadd_rpc_sync_params(apiObj.syncParams);
  }

  void _api_fill_to_wire_rpc_sync_params(RpcSyncParams apiObj, wire_RpcSyncParams wireObj) {
    wireObj.start_script_count = api2wire_u64(apiObj.startScriptCount);
    wireObj.start_time = api2wire_u64(apiObj.startTime);
    wireObj.force_start_time = api2wire_bool(apiObj.forceStartTime);
    wireObj.poll_rate_sec = api2wire_u64(apiObj.pollRateSec);
  }

  void _api_fill_to_wire_schnorr_from_seed_req(SchnorrFromSeedReq apiObj, wire_SchnorrFromSeedReq wireObj) {
    wireObj.seed = api2wire_uint_8_list(apiObj.seed);
  }

  void _api_fill_to_wire_schnorr_sign_with_seed_req(SchnorrSignWithSeedReq apiObj, wire_SchnorrSignWithSeedReq wireObj) {
    wireObj.msg = api2wire_uint_8_list(apiObj.msg);
    wireObj.seed = api2wire_uint_8_list(apiObj.seed);
    wireObj.aux_rand = api2wire_opt_uint_8_list(apiObj.auxRand);
  }

  void _api_fill_to_wire_schnorr_verify_req(SchnorrVerifyReq apiObj, wire_SchnorrVerifyReq wireObj) {
    wireObj.message_hash = api2wire_uint_8_list(apiObj.messageHash);
    wireObj.signature_bytes = api2wire_uint_8_list(apiObj.signatureBytes);
    wireObj.public_key_bytes = api2wire_uint_8_list(apiObj.publicKeyBytes);
  }

  void _api_fill_to_wire_script(Script apiObj, wire_Script wireObj) {
    wireObj.internal = api2wire_uint_8_list(apiObj.internal);
  }

  void _api_fill_to_wire_script_amount(ScriptAmount apiObj, wire_ScriptAmount wireObj) {
    _api_fill_to_wire_script(apiObj.script, wireObj.script);
    wireObj.amount = api2wire_u64(apiObj.amount);
  }

  void _api_fill_to_wire_script_derive_req(ScriptDeriveReq apiObj, wire_ScriptDeriveReq wireObj) {
    wireObj.password = api2wire_uint_8_list(apiObj.password);
    wireObj.salt = api2wire_uint_8_list(apiObj.salt);
    wireObj.n = api2wire_u32(apiObj.n);
    wireObj.p = api2wire_u32(apiObj.p);
    wireObj.r = api2wire_u32(apiObj.r);
  }

  void _api_fill_to_wire_secp_256_k_1_from_seed_req(Secp256k1FromSeedReq apiObj, wire_Secp256k1FromSeedReq wireObj) {
    wireObj.seed = api2wire_uint_8_list(apiObj.seed);
  }

  void _api_fill_to_wire_secp_256_k_1_recover_req(Secp256k1RecoverReq apiObj, wire_Secp256k1RecoverReq wireObj) {
    wireObj.message_pre_hashed = api2wire_uint_8_list(apiObj.messagePreHashed);
    wireObj.signature_bytes = api2wire_uint_8_list(apiObj.signatureBytes);
    wireObj.chain_id = api2wire_opt_box_autoadd_u8(apiObj.chainId);
  }

  void _api_fill_to_wire_secp_256_k_1_share_secret_req(Secp256k1ShareSecretReq apiObj, wire_Secp256k1ShareSecretReq wireObj) {
    wireObj.seed = api2wire_uint_8_list(apiObj.seed);
    wireObj.public_key_raw_bytes = api2wire_uint_8_list(apiObj.publicKeyRawBytes);
  }

  void _api_fill_to_wire_secp_256_k_1_sign_with_seed_req(Secp256k1SignWithSeedReq apiObj, wire_Secp256k1SignWithSeedReq wireObj) {
    wireObj.msg = api2wire_uint_8_list(apiObj.msg);
    wireObj.seed = api2wire_uint_8_list(apiObj.seed);
  }

  void _api_fill_to_wire_secp_256_k_1_verify_req(Secp256k1VerifyReq apiObj, wire_Secp256k1VerifyReq wireObj) {
    wireObj.message_hash = api2wire_uint_8_list(apiObj.messageHash);
    wireObj.signature_bytes = api2wire_uint_8_list(apiObj.signatureBytes);
    wireObj.public_key_bytes = api2wire_uint_8_list(apiObj.publicKeyBytes);
  }

  void _api_fill_to_wire_seed_to_key_req(SeedToKeyReq apiObj, wire_SeedToKeyReq wireObj) {
    wireObj.seed = api2wire_uint_8_list(apiObj.seed);
    wireObj.path = api2wire_String(apiObj.path);
  }

  void _api_fill_to_wire_sign_options(SignOptions apiObj, wire_SignOptions wireObj) {
    wireObj.trust_witness_utxo = api2wire_bool(apiObj.trustWitnessUtxo);
    wireObj.assume_height = api2wire_opt_box_autoadd_u32(apiObj.assumeHeight);
    wireObj.allow_all_sighashes = api2wire_bool(apiObj.allowAllSighashes);
    wireObj.remove_partial_sigs = api2wire_bool(apiObj.removePartialSigs);
    wireObj.try_finalize = api2wire_bool(apiObj.tryFinalize);
    wireObj.sign_with_tap_internal_key = api2wire_bool(apiObj.signWithTapInternalKey);
    wireObj.allow_grinding = api2wire_bool(apiObj.allowGrinding);
  }

  void _api_fill_to_wire_sled_db_configuration(SledDbConfiguration apiObj, wire_SledDbConfiguration wireObj) {
    wireObj.path = api2wire_String(apiObj.path);
    wireObj.tree_name = api2wire_String(apiObj.treeName);
  }

  void _api_fill_to_wire_sqlite_db_configuration(SqliteDbConfiguration apiObj, wire_SqliteDbConfiguration wireObj) {
    wireObj.path = api2wire_String(apiObj.path);
  }

  void _api_fill_to_wire_user_pass(UserPass apiObj, wire_UserPass wireObj) {
    wireObj.username = api2wire_String(apiObj.username);
    wireObj.password = api2wire_String(apiObj.password);
  }
}

// ignore_for_file: camel_case_types, non_constant_identifier_names, avoid_positional_boolean_parameters, annotate_overrides, constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint

/// generated by flutter_rust_bridge
class AgentDartWire implements FlutterRustBridgeWireBase {
  @internal
  late final dartApi = DartApiDl(init_frb_dart_api_dl);

  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName) _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  AgentDartWire(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  AgentDartWire.fromLookup(ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName) lookup) : _lookup = lookup;

  void store_dart_post_cobject(
    DartPostCObjectFnType ptr,
  ) {
    return _store_dart_post_cobject(
      ptr,
    );
  }

  late final _store_dart_post_cobjectPtr = _lookup<ffi.NativeFunction<ffi.Void Function(DartPostCObjectFnType)>>('store_dart_post_cobject');
  late final _store_dart_post_cobject = _store_dart_post_cobjectPtr.asFunction<void Function(DartPostCObjectFnType)>();

  Object get_dart_object(
    int ptr,
  ) {
    return _get_dart_object(
      ptr,
    );
  }

  late final _get_dart_objectPtr = _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.UintPtr)>>('get_dart_object');
  late final _get_dart_object = _get_dart_objectPtr.asFunction<Object Function(int)>();

  void drop_dart_object(
    int ptr,
  ) {
    return _drop_dart_object(
      ptr,
    );
  }

  late final _drop_dart_objectPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UintPtr)>>('drop_dart_object');
  late final _drop_dart_object = _drop_dart_objectPtr.asFunction<void Function(int)>();

  int new_dart_opaque(
    Object handle,
  ) {
    return _new_dart_opaque(
      handle,
    );
  }

  late final _new_dart_opaquePtr = _lookup<ffi.NativeFunction<ffi.UintPtr Function(ffi.Handle)>>('new_dart_opaque');
  late final _new_dart_opaque = _new_dart_opaquePtr.asFunction<int Function(Object)>();

  int init_frb_dart_api_dl(
    ffi.Pointer<ffi.Void> obj,
  ) {
    return _init_frb_dart_api_dl(
      obj,
    );
  }

  late final _init_frb_dart_api_dlPtr = _lookup<ffi.NativeFunction<ffi.IntPtr Function(ffi.Pointer<ffi.Void>)>>('init_frb_dart_api_dl');
  late final _init_frb_dart_api_dl = _init_frb_dart_api_dlPtr.asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  void wire_mnemonic_phrase_to_seed(
    int port_,
    ffi.Pointer<wire_PhraseToSeedReq> req,
  ) {
    return _wire_mnemonic_phrase_to_seed(
      port_,
      req,
    );
  }

  late final _wire_mnemonic_phrase_to_seedPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_PhraseToSeedReq>)>>('wire_mnemonic_phrase_to_seed');
  late final _wire_mnemonic_phrase_to_seed = _wire_mnemonic_phrase_to_seedPtr.asFunction<void Function(int, ffi.Pointer<wire_PhraseToSeedReq>)>();

  void wire_mnemonic_seed_to_key(
    int port_,
    ffi.Pointer<wire_SeedToKeyReq> req,
  ) {
    return _wire_mnemonic_seed_to_key(
      port_,
      req,
    );
  }

  late final _wire_mnemonic_seed_to_keyPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_SeedToKeyReq>)>>('wire_mnemonic_seed_to_key');
  late final _wire_mnemonic_seed_to_key = _wire_mnemonic_seed_to_keyPtr.asFunction<void Function(int, ffi.Pointer<wire_SeedToKeyReq>)>();

  void wire_bls_init(
    int port_,
  ) {
    return _wire_bls_init(
      port_,
    );
  }

  late final _wire_bls_initPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_bls_init');
  late final _wire_bls_init = _wire_bls_initPtr.asFunction<void Function(int)>();

  void wire_bls_verify(
    int port_,
    ffi.Pointer<wire_BLSVerifyReq> req,
  ) {
    return _wire_bls_verify(
      port_,
      req,
    );
  }

  late final _wire_bls_verifyPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_BLSVerifyReq>)>>('wire_bls_verify');
  late final _wire_bls_verify = _wire_bls_verifyPtr.asFunction<void Function(int, ffi.Pointer<wire_BLSVerifyReq>)>();

  void wire_ed25519_from_seed(
    int port_,
    ffi.Pointer<wire_ED25519FromSeedReq> req,
  ) {
    return _wire_ed25519_from_seed(
      port_,
      req,
    );
  }

  late final _wire_ed25519_from_seedPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_ED25519FromSeedReq>)>>('wire_ed25519_from_seed');
  late final _wire_ed25519_from_seed = _wire_ed25519_from_seedPtr.asFunction<void Function(int, ffi.Pointer<wire_ED25519FromSeedReq>)>();

  void wire_ed25519_sign(
    int port_,
    ffi.Pointer<wire_ED25519SignReq> req,
  ) {
    return _wire_ed25519_sign(
      port_,
      req,
    );
  }

  late final _wire_ed25519_signPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_ED25519SignReq>)>>('wire_ed25519_sign');
  late final _wire_ed25519_sign = _wire_ed25519_signPtr.asFunction<void Function(int, ffi.Pointer<wire_ED25519SignReq>)>();

  void wire_ed25519_verify(
    int port_,
    ffi.Pointer<wire_ED25519VerifyReq> req,
  ) {
    return _wire_ed25519_verify(
      port_,
      req,
    );
  }

  late final _wire_ed25519_verifyPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_ED25519VerifyReq>)>>('wire_ed25519_verify');
  late final _wire_ed25519_verify = _wire_ed25519_verifyPtr.asFunction<void Function(int, ffi.Pointer<wire_ED25519VerifyReq>)>();

  void wire_secp256k1_from_seed(
    int port_,
    ffi.Pointer<wire_Secp256k1FromSeedReq> req,
  ) {
    return _wire_secp256k1_from_seed(
      port_,
      req,
    );
  }

  late final _wire_secp256k1_from_seedPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_Secp256k1FromSeedReq>)>>('wire_secp256k1_from_seed');
  late final _wire_secp256k1_from_seed = _wire_secp256k1_from_seedPtr.asFunction<void Function(int, ffi.Pointer<wire_Secp256k1FromSeedReq>)>();

  void wire_secp256k1_sign(
    int port_,
    ffi.Pointer<wire_Secp256k1SignWithSeedReq> req,
  ) {
    return _wire_secp256k1_sign(
      port_,
      req,
    );
  }

  late final _wire_secp256k1_signPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_Secp256k1SignWithSeedReq>)>>('wire_secp256k1_sign');
  late final _wire_secp256k1_sign = _wire_secp256k1_signPtr.asFunction<void Function(int, ffi.Pointer<wire_Secp256k1SignWithSeedReq>)>();

  void wire_secp256k1_sign_recoverable(
    int port_,
    ffi.Pointer<wire_Secp256k1SignWithSeedReq> req,
  ) {
    return _wire_secp256k1_sign_recoverable(
      port_,
      req,
    );
  }

  late final _wire_secp256k1_sign_recoverablePtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_Secp256k1SignWithSeedReq>)>>('wire_secp256k1_sign_recoverable');
  late final _wire_secp256k1_sign_recoverable = _wire_secp256k1_sign_recoverablePtr.asFunction<void Function(int, ffi.Pointer<wire_Secp256k1SignWithSeedReq>)>();

  void wire_secp256k1_verify(
    int port_,
    ffi.Pointer<wire_Secp256k1VerifyReq> req,
  ) {
    return _wire_secp256k1_verify(
      port_,
      req,
    );
  }

  late final _wire_secp256k1_verifyPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_Secp256k1VerifyReq>)>>('wire_secp256k1_verify');
  late final _wire_secp256k1_verify = _wire_secp256k1_verifyPtr.asFunction<void Function(int, ffi.Pointer<wire_Secp256k1VerifyReq>)>();

  void wire_secp256k1_get_shared_secret(
    int port_,
    ffi.Pointer<wire_Secp256k1ShareSecretReq> req,
  ) {
    return _wire_secp256k1_get_shared_secret(
      port_,
      req,
    );
  }

  late final _wire_secp256k1_get_shared_secretPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_Secp256k1ShareSecretReq>)>>('wire_secp256k1_get_shared_secret');
  late final _wire_secp256k1_get_shared_secret = _wire_secp256k1_get_shared_secretPtr.asFunction<void Function(int, ffi.Pointer<wire_Secp256k1ShareSecretReq>)>();

  void wire_secp256k1_recover(
    int port_,
    ffi.Pointer<wire_Secp256k1RecoverReq> req,
  ) {
    return _wire_secp256k1_recover(
      port_,
      req,
    );
  }

  late final _wire_secp256k1_recoverPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_Secp256k1RecoverReq>)>>('wire_secp256k1_recover');
  late final _wire_secp256k1_recover = _wire_secp256k1_recoverPtr.asFunction<void Function(int, ffi.Pointer<wire_Secp256k1RecoverReq>)>();

  void wire_p256_from_seed(
    int port_,
    ffi.Pointer<wire_P256FromSeedReq> req,
  ) {
    return _wire_p256_from_seed(
      port_,
      req,
    );
  }

  late final _wire_p256_from_seedPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_P256FromSeedReq>)>>('wire_p256_from_seed');
  late final _wire_p256_from_seed = _wire_p256_from_seedPtr.asFunction<void Function(int, ffi.Pointer<wire_P256FromSeedReq>)>();

  void wire_p256_sign(
    int port_,
    ffi.Pointer<wire_P256SignWithSeedReq> req,
  ) {
    return _wire_p256_sign(
      port_,
      req,
    );
  }

  late final _wire_p256_signPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_P256SignWithSeedReq>)>>('wire_p256_sign');
  late final _wire_p256_sign = _wire_p256_signPtr.asFunction<void Function(int, ffi.Pointer<wire_P256SignWithSeedReq>)>();

  void wire_p256_verify(
    int port_,
    ffi.Pointer<wire_P256VerifyReq> req,
  ) {
    return _wire_p256_verify(
      port_,
      req,
    );
  }

  late final _wire_p256_verifyPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_P256VerifyReq>)>>('wire_p256_verify');
  late final _wire_p256_verify = _wire_p256_verifyPtr.asFunction<void Function(int, ffi.Pointer<wire_P256VerifyReq>)>();

  void wire_p256_get_shared_secret(
    int port_,
    ffi.Pointer<wire_P256ShareSecretReq> req,
  ) {
    return _wire_p256_get_shared_secret(
      port_,
      req,
    );
  }

  late final _wire_p256_get_shared_secretPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_P256ShareSecretReq>)>>('wire_p256_get_shared_secret');
  late final _wire_p256_get_shared_secret = _wire_p256_get_shared_secretPtr.asFunction<void Function(int, ffi.Pointer<wire_P256ShareSecretReq>)>();

  void wire_schnorr_from_seed(
    int port_,
    ffi.Pointer<wire_SchnorrFromSeedReq> req,
  ) {
    return _wire_schnorr_from_seed(
      port_,
      req,
    );
  }

  late final _wire_schnorr_from_seedPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_SchnorrFromSeedReq>)>>('wire_schnorr_from_seed');
  late final _wire_schnorr_from_seed = _wire_schnorr_from_seedPtr.asFunction<void Function(int, ffi.Pointer<wire_SchnorrFromSeedReq>)>();

  void wire_schnorr_sign(
    int port_,
    ffi.Pointer<wire_SchnorrSignWithSeedReq> req,
  ) {
    return _wire_schnorr_sign(
      port_,
      req,
    );
  }

  late final _wire_schnorr_signPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_SchnorrSignWithSeedReq>)>>('wire_schnorr_sign');
  late final _wire_schnorr_sign = _wire_schnorr_signPtr.asFunction<void Function(int, ffi.Pointer<wire_SchnorrSignWithSeedReq>)>();

  void wire_schnorr_verify(
    int port_,
    ffi.Pointer<wire_SchnorrVerifyReq> req,
  ) {
    return _wire_schnorr_verify(
      port_,
      req,
    );
  }

  late final _wire_schnorr_verifyPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_SchnorrVerifyReq>)>>('wire_schnorr_verify');
  late final _wire_schnorr_verify = _wire_schnorr_verifyPtr.asFunction<void Function(int, ffi.Pointer<wire_SchnorrVerifyReq>)>();

  void wire_aes_128_ctr_encrypt(
    int port_,
    ffi.Pointer<wire_AesEncryptReq> req,
  ) {
    return _wire_aes_128_ctr_encrypt(
      port_,
      req,
    );
  }

  late final _wire_aes_128_ctr_encryptPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_AesEncryptReq>)>>('wire_aes_128_ctr_encrypt');
  late final _wire_aes_128_ctr_encrypt = _wire_aes_128_ctr_encryptPtr.asFunction<void Function(int, ffi.Pointer<wire_AesEncryptReq>)>();

  void wire_aes_128_ctr_decrypt(
    int port_,
    ffi.Pointer<wire_AesDecryptReq> req,
  ) {
    return _wire_aes_128_ctr_decrypt(
      port_,
      req,
    );
  }

  late final _wire_aes_128_ctr_decryptPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_AesDecryptReq>)>>('wire_aes_128_ctr_decrypt');
  late final _wire_aes_128_ctr_decrypt = _wire_aes_128_ctr_decryptPtr.asFunction<void Function(int, ffi.Pointer<wire_AesDecryptReq>)>();

  void wire_aes_256_cbc_encrypt(
    int port_,
    ffi.Pointer<wire_AesEncryptReq> req,
  ) {
    return _wire_aes_256_cbc_encrypt(
      port_,
      req,
    );
  }

  late final _wire_aes_256_cbc_encryptPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_AesEncryptReq>)>>('wire_aes_256_cbc_encrypt');
  late final _wire_aes_256_cbc_encrypt = _wire_aes_256_cbc_encryptPtr.asFunction<void Function(int, ffi.Pointer<wire_AesEncryptReq>)>();

  void wire_aes_256_cbc_decrypt(
    int port_,
    ffi.Pointer<wire_AesDecryptReq> req,
  ) {
    return _wire_aes_256_cbc_decrypt(
      port_,
      req,
    );
  }

  late final _wire_aes_256_cbc_decryptPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_AesDecryptReq>)>>('wire_aes_256_cbc_decrypt');
  late final _wire_aes_256_cbc_decrypt = _wire_aes_256_cbc_decryptPtr.asFunction<void Function(int, ffi.Pointer<wire_AesDecryptReq>)>();

  void wire_aes_256_gcm_encrypt(
    int port_,
    ffi.Pointer<wire_AesEncryptReq> req,
  ) {
    return _wire_aes_256_gcm_encrypt(
      port_,
      req,
    );
  }

  late final _wire_aes_256_gcm_encryptPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_AesEncryptReq>)>>('wire_aes_256_gcm_encrypt');
  late final _wire_aes_256_gcm_encrypt = _wire_aes_256_gcm_encryptPtr.asFunction<void Function(int, ffi.Pointer<wire_AesEncryptReq>)>();

  void wire_aes_256_gcm_decrypt(
    int port_,
    ffi.Pointer<wire_AesDecryptReq> req,
  ) {
    return _wire_aes_256_gcm_decrypt(
      port_,
      req,
    );
  }

  late final _wire_aes_256_gcm_decryptPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_AesDecryptReq>)>>('wire_aes_256_gcm_decrypt');
  late final _wire_aes_256_gcm_decrypt = _wire_aes_256_gcm_decryptPtr.asFunction<void Function(int, ffi.Pointer<wire_AesDecryptReq>)>();

  void wire_pbkdf2_derive_key(
    int port_,
    ffi.Pointer<wire_PBKDFDeriveReq> req,
  ) {
    return _wire_pbkdf2_derive_key(
      port_,
      req,
    );
  }

  late final _wire_pbkdf2_derive_keyPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_PBKDFDeriveReq>)>>('wire_pbkdf2_derive_key');
  late final _wire_pbkdf2_derive_key = _wire_pbkdf2_derive_keyPtr.asFunction<void Function(int, ffi.Pointer<wire_PBKDFDeriveReq>)>();

  void wire_scrypt_derive_key(
    int port_,
    ffi.Pointer<wire_ScriptDeriveReq> req,
  ) {
    return _wire_scrypt_derive_key(
      port_,
      req,
    );
  }

  late final _wire_scrypt_derive_keyPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_ScriptDeriveReq>)>>('wire_scrypt_derive_key');
  late final _wire_scrypt_derive_key = _wire_scrypt_derive_keyPtr.asFunction<void Function(int, ffi.Pointer<wire_ScriptDeriveReq>)>();

  void wire_create_blockchain__static_method__Api(
    int port_,
    ffi.Pointer<wire_BlockchainConfig> config,
  ) {
    return _wire_create_blockchain__static_method__Api(
      port_,
      config,
    );
  }

  late final _wire_create_blockchain__static_method__ApiPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_BlockchainConfig>)>>('wire_create_blockchain__static_method__Api');
  late final _wire_create_blockchain__static_method__Api = _wire_create_blockchain__static_method__ApiPtr.asFunction<void Function(int, ffi.Pointer<wire_BlockchainConfig>)>();

  void wire_get_height__static_method__Api(
    int port_,
    wire_BlockchainInstance blockchain,
  ) {
    return _wire_get_height__static_method__Api(
      port_,
      blockchain,
    );
  }

  late final _wire_get_height__static_method__ApiPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, wire_BlockchainInstance)>>('wire_get_height__static_method__Api');
  late final _wire_get_height__static_method__Api = _wire_get_height__static_method__ApiPtr.asFunction<void Function(int, wire_BlockchainInstance)>();

  void wire_get_blockchain_hash__static_method__Api(
    int port_,
    int blockchain_height,
    wire_BlockchainInstance blockchain,
  ) {
    return _wire_get_blockchain_hash__static_method__Api(
      port_,
      blockchain_height,
      blockchain,
    );
  }

  late final _wire_get_blockchain_hash__static_method__ApiPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Uint32, wire_BlockchainInstance)>>('wire_get_blockchain_hash__static_method__Api');
  late final _wire_get_blockchain_hash__static_method__Api = _wire_get_blockchain_hash__static_method__ApiPtr.asFunction<void Function(int, int, wire_BlockchainInstance)>();

  void wire_estimate_fee__static_method__Api(
    int port_,
    int target,
    wire_BlockchainInstance blockchain,
  ) {
    return _wire_estimate_fee__static_method__Api(
      port_,
      target,
      blockchain,
    );
  }

  late final _wire_estimate_fee__static_method__ApiPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Uint64, wire_BlockchainInstance)>>('wire_estimate_fee__static_method__Api');
  late final _wire_estimate_fee__static_method__Api = _wire_estimate_fee__static_method__ApiPtr.asFunction<void Function(int, int, wire_BlockchainInstance)>();

  void wire_broadcast__static_method__Api(
    int port_,
    ffi.Pointer<wire_uint_8_list> tx,
    wire_BlockchainInstance blockchain,
  ) {
    return _wire_broadcast__static_method__Api(
      port_,
      tx,
      blockchain,
    );
  }

  late final _wire_broadcast__static_method__ApiPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>, wire_BlockchainInstance)>>('wire_broadcast__static_method__Api');
  late final _wire_broadcast__static_method__Api = _wire_broadcast__static_method__ApiPtr.asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>, wire_BlockchainInstance)>();

  void wire_create_transaction__static_method__Api(
    int port_,
    ffi.Pointer<wire_uint_8_list> tx,
  ) {
    return _wire_create_transaction__static_method__Api(
      port_,
      tx,
    );
  }

  late final _wire_create_transaction__static_method__ApiPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>('wire_create_transaction__static_method__Api');
  late final _wire_create_transaction__static_method__Api = _wire_create_transaction__static_method__ApiPtr.asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_tx_txid__static_method__Api(
    int port_,
    ffi.Pointer<wire_uint_8_list> tx,
  ) {
    return _wire_tx_txid__static_method__Api(
      port_,
      tx,
    );
  }

  late final _wire_tx_txid__static_method__ApiPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>('wire_tx_txid__static_method__Api');
  late final _wire_tx_txid__static_method__Api = _wire_tx_txid__static_method__ApiPtr.asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_weight__static_method__Api(
    int port_,
    ffi.Pointer<wire_uint_8_list> tx,
  ) {
    return _wire_weight__static_method__Api(
      port_,
      tx,
    );
  }

  late final _wire_weight__static_method__ApiPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>('wire_weight__static_method__Api');
  late final _wire_weight__static_method__Api = _wire_weight__static_method__ApiPtr.asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_size__static_method__Api(
    int port_,
    ffi.Pointer<wire_uint_8_list> tx,
  ) {
    return _wire_size__static_method__Api(
      port_,
      tx,
    );
  }

  late final _wire_size__static_method__ApiPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>('wire_size__static_method__Api');
  late final _wire_size__static_method__Api = _wire_size__static_method__ApiPtr.asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_vsize__static_method__Api(
    int port_,
    ffi.Pointer<wire_uint_8_list> tx,
  ) {
    return _wire_vsize__static_method__Api(
      port_,
      tx,
    );
  }

  late final _wire_vsize__static_method__ApiPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>('wire_vsize__static_method__Api');
  late final _wire_vsize__static_method__Api = _wire_vsize__static_method__ApiPtr.asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_serialize_tx__static_method__Api(
    int port_,
    ffi.Pointer<wire_uint_8_list> tx,
  ) {
    return _wire_serialize_tx__static_method__Api(
      port_,
      tx,
    );
  }

  late final _wire_serialize_tx__static_method__ApiPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>('wire_serialize_tx__static_method__Api');
  late final _wire_serialize_tx__static_method__Api = _wire_serialize_tx__static_method__ApiPtr.asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_is_coin_base__static_method__Api(
    int port_,
    ffi.Pointer<wire_uint_8_list> tx,
  ) {
    return _wire_is_coin_base__static_method__Api(
      port_,
      tx,
    );
  }

  late final _wire_is_coin_base__static_method__ApiPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>('wire_is_coin_base__static_method__Api');
  late final _wire_is_coin_base__static_method__Api = _wire_is_coin_base__static_method__ApiPtr.asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_is_explicitly_rbf__static_method__Api(
    int port_,
    ffi.Pointer<wire_uint_8_list> tx,
  ) {
    return _wire_is_explicitly_rbf__static_method__Api(
      port_,
      tx,
    );
  }

  late final _wire_is_explicitly_rbf__static_method__ApiPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>('wire_is_explicitly_rbf__static_method__Api');
  late final _wire_is_explicitly_rbf__static_method__Api = _wire_is_explicitly_rbf__static_method__ApiPtr.asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_is_lock_time_enabled__static_method__Api(
    int port_,
    ffi.Pointer<wire_uint_8_list> tx,
  ) {
    return _wire_is_lock_time_enabled__static_method__Api(
      port_,
      tx,
    );
  }

  late final _wire_is_lock_time_enabled__static_method__ApiPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>('wire_is_lock_time_enabled__static_method__Api');
  late final _wire_is_lock_time_enabled__static_method__Api = _wire_is_lock_time_enabled__static_method__ApiPtr.asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_version__static_method__Api(
    int port_,
    ffi.Pointer<wire_uint_8_list> tx,
  ) {
    return _wire_version__static_method__Api(
      port_,
      tx,
    );
  }

  late final _wire_version__static_method__ApiPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>('wire_version__static_method__Api');
  late final _wire_version__static_method__Api = _wire_version__static_method__ApiPtr.asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_lock_time__static_method__Api(
    int port_,
    ffi.Pointer<wire_uint_8_list> tx,
  ) {
    return _wire_lock_time__static_method__Api(
      port_,
      tx,
    );
  }

  late final _wire_lock_time__static_method__ApiPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>('wire_lock_time__static_method__Api');
  late final _wire_lock_time__static_method__Api = _wire_lock_time__static_method__ApiPtr.asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_input__static_method__Api(
    int port_,
    ffi.Pointer<wire_uint_8_list> tx,
  ) {
    return _wire_input__static_method__Api(
      port_,
      tx,
    );
  }

  late final _wire_input__static_method__ApiPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>('wire_input__static_method__Api');
  late final _wire_input__static_method__Api = _wire_input__static_method__ApiPtr.asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_output__static_method__Api(
    int port_,
    ffi.Pointer<wire_uint_8_list> tx,
  ) {
    return _wire_output__static_method__Api(
      port_,
      tx,
    );
  }

  late final _wire_output__static_method__ApiPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>('wire_output__static_method__Api');
  late final _wire_output__static_method__Api = _wire_output__static_method__ApiPtr.asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_serialize_psbt__static_method__Api(
    int port_,
    ffi.Pointer<wire_uint_8_list> psbt_str,
  ) {
    return _wire_serialize_psbt__static_method__Api(
      port_,
      psbt_str,
    );
  }

  late final _wire_serialize_psbt__static_method__ApiPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>('wire_serialize_psbt__static_method__Api');
  late final _wire_serialize_psbt__static_method__Api = _wire_serialize_psbt__static_method__ApiPtr.asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_psbt_txid__static_method__Api(
    int port_,
    ffi.Pointer<wire_uint_8_list> psbt_str,
  ) {
    return _wire_psbt_txid__static_method__Api(
      port_,
      psbt_str,
    );
  }

  late final _wire_psbt_txid__static_method__ApiPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>('wire_psbt_txid__static_method__Api');
  late final _wire_psbt_txid__static_method__Api = _wire_psbt_txid__static_method__ApiPtr.asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_extract_tx__static_method__Api(
    int port_,
    ffi.Pointer<wire_uint_8_list> psbt_str,
  ) {
    return _wire_extract_tx__static_method__Api(
      port_,
      psbt_str,
    );
  }

  late final _wire_extract_tx__static_method__ApiPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>('wire_extract_tx__static_method__Api');
  late final _wire_extract_tx__static_method__Api = _wire_extract_tx__static_method__ApiPtr.asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_psbt_fee_rate__static_method__Api(
    int port_,
    ffi.Pointer<wire_uint_8_list> psbt_str,
  ) {
    return _wire_psbt_fee_rate__static_method__Api(
      port_,
      psbt_str,
    );
  }

  late final _wire_psbt_fee_rate__static_method__ApiPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>('wire_psbt_fee_rate__static_method__Api');
  late final _wire_psbt_fee_rate__static_method__Api = _wire_psbt_fee_rate__static_method__ApiPtr.asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_psbt_fee_amount__static_method__Api(
    int port_,
    ffi.Pointer<wire_uint_8_list> psbt_str,
  ) {
    return _wire_psbt_fee_amount__static_method__Api(
      port_,
      psbt_str,
    );
  }

  late final _wire_psbt_fee_amount__static_method__ApiPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>('wire_psbt_fee_amount__static_method__Api');
  late final _wire_psbt_fee_amount__static_method__Api = _wire_psbt_fee_amount__static_method__ApiPtr.asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_combine_psbt__static_method__Api(
    int port_,
    ffi.Pointer<wire_uint_8_list> psbt_str,
    ffi.Pointer<wire_uint_8_list> other,
  ) {
    return _wire_combine_psbt__static_method__Api(
      port_,
      psbt_str,
      other,
    );
  }

  late final _wire_combine_psbt__static_method__ApiPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>>('wire_combine_psbt__static_method__Api');
  late final _wire_combine_psbt__static_method__Api = _wire_combine_psbt__static_method__ApiPtr.asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_json_serialize__static_method__Api(
    int port_,
    ffi.Pointer<wire_uint_8_list> psbt_str,
  ) {
    return _wire_json_serialize__static_method__Api(
      port_,
      psbt_str,
    );
  }

  late final _wire_json_serialize__static_method__ApiPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>('wire_json_serialize__static_method__Api');
  late final _wire_json_serialize__static_method__Api = _wire_json_serialize__static_method__ApiPtr.asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_get_inputs__static_method__Api(
    int port_,
    ffi.Pointer<wire_uint_8_list> psbt_str,
  ) {
    return _wire_get_inputs__static_method__Api(
      port_,
      psbt_str,
    );
  }

  late final _wire_get_inputs__static_method__ApiPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>('wire_get_inputs__static_method__Api');
  late final _wire_get_inputs__static_method__Api = _wire_get_inputs__static_method__ApiPtr.asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_tx_builder_finish__static_method__Api(
    int port_,
    wire_WalletInstance wallet,
    ffi.Pointer<wire_list_script_amount> recipients,
    ffi.Pointer<wire_list_out_point> utxos,
    ffi.Pointer<wire_list_out_point> unspendable,
    int change_policy,
    bool manually_selected_only,
    ffi.Pointer<ffi.Float> fee_rate,
    ffi.Pointer<ffi.Uint64> fee_absolute,
    bool drain_wallet,
    ffi.Pointer<wire_Script> drain_to,
    ffi.Pointer<wire_RbfValue> rbf,
    ffi.Pointer<wire_uint_8_list> data,
    ffi.Pointer<ffi.Bool> shuffle_utxo,
  ) {
    return _wire_tx_builder_finish__static_method__Api(
      port_,
      wallet,
      recipients,
      utxos,
      unspendable,
      change_policy,
      manually_selected_only,
      fee_rate,
      fee_absolute,
      drain_wallet,
      drain_to,
      rbf,
      data,
      shuffle_utxo,
    );
  }

  late final _wire_tx_builder_finish__static_method__ApiPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, wire_WalletInstance, ffi.Pointer<wire_list_script_amount>, ffi.Pointer<wire_list_out_point>, ffi.Pointer<wire_list_out_point>, ffi.Int32, ffi.Bool, ffi.Pointer<ffi.Float>, ffi.Pointer<ffi.Uint64>, ffi.Bool, ffi.Pointer<wire_Script>, ffi.Pointer<wire_RbfValue>, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<ffi.Bool>)>>('wire_tx_builder_finish__static_method__Api');
  late final _wire_tx_builder_finish__static_method__Api = _wire_tx_builder_finish__static_method__ApiPtr.asFunction<void Function(int, wire_WalletInstance, ffi.Pointer<wire_list_script_amount>, ffi.Pointer<wire_list_out_point>, ffi.Pointer<wire_list_out_point>, int, bool, ffi.Pointer<ffi.Float>, ffi.Pointer<ffi.Uint64>, bool, ffi.Pointer<wire_Script>, ffi.Pointer<wire_RbfValue>, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<ffi.Bool>)>();

  void wire_bump_fee_tx_builder_finish__static_method__Api(
    int port_,
    ffi.Pointer<wire_uint_8_list> txid,
    double fee_rate,
    ffi.Pointer<wire_uint_8_list> allow_shrinking,
    wire_WalletInstance wallet,
    bool enable_rbf,
    bool keep_change,
    ffi.Pointer<ffi.Uint32> n_sequence,
  ) {
    return _wire_bump_fee_tx_builder_finish__static_method__Api(
      port_,
      txid,
      fee_rate,
      allow_shrinking,
      wallet,
      enable_rbf,
      keep_change,
      n_sequence,
    );
  }

  late final _wire_bump_fee_tx_builder_finish__static_method__ApiPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>, ffi.Float, ffi.Pointer<wire_uint_8_list>, wire_WalletInstance, ffi.Bool, ffi.Bool, ffi.Pointer<ffi.Uint32>)>>('wire_bump_fee_tx_builder_finish__static_method__Api');
  late final _wire_bump_fee_tx_builder_finish__static_method__Api = _wire_bump_fee_tx_builder_finish__static_method__ApiPtr.asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>, double, ffi.Pointer<wire_uint_8_list>, wire_WalletInstance, bool, bool, ffi.Pointer<ffi.Uint32>)>();

  void wire_create_descriptor__static_method__Api(
    int port_,
    ffi.Pointer<wire_uint_8_list> descriptor,
    int network,
  ) {
    return _wire_create_descriptor__static_method__Api(
      port_,
      descriptor,
      network,
    );
  }

  late final _wire_create_descriptor__static_method__ApiPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>, ffi.Int32)>>('wire_create_descriptor__static_method__Api');
  late final _wire_create_descriptor__static_method__Api = _wire_create_descriptor__static_method__ApiPtr.asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>, int)>();

  void wire_new_bip44_descriptor__static_method__Api(
    int port_,
    int key_chain_kind,
    ffi.Pointer<wire_uint_8_list> secret_key,
    int network,
  ) {
    return _wire_new_bip44_descriptor__static_method__Api(
      port_,
      key_chain_kind,
      secret_key,
      network,
    );
  }

  late final _wire_new_bip44_descriptor__static_method__ApiPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Int32, ffi.Pointer<wire_uint_8_list>, ffi.Int32)>>('wire_new_bip44_descriptor__static_method__Api');
  late final _wire_new_bip44_descriptor__static_method__Api = _wire_new_bip44_descriptor__static_method__ApiPtr.asFunction<void Function(int, int, ffi.Pointer<wire_uint_8_list>, int)>();

  void wire_new_bip44_public__static_method__Api(
    int port_,
    int key_chain_kind,
    ffi.Pointer<wire_uint_8_list> public_key,
    int network,
    ffi.Pointer<wire_uint_8_list> fingerprint,
  ) {
    return _wire_new_bip44_public__static_method__Api(
      port_,
      key_chain_kind,
      public_key,
      network,
      fingerprint,
    );
  }

  late final _wire_new_bip44_public__static_method__ApiPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Int32, ffi.Pointer<wire_uint_8_list>, ffi.Int32, ffi.Pointer<wire_uint_8_list>)>>('wire_new_bip44_public__static_method__Api');
  late final _wire_new_bip44_public__static_method__Api = _wire_new_bip44_public__static_method__ApiPtr.asFunction<void Function(int, int, ffi.Pointer<wire_uint_8_list>, int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_new_bip49_descriptor__static_method__Api(
    int port_,
    int key_chain_kind,
    ffi.Pointer<wire_uint_8_list> secret_key,
    int network,
  ) {
    return _wire_new_bip49_descriptor__static_method__Api(
      port_,
      key_chain_kind,
      secret_key,
      network,
    );
  }

  late final _wire_new_bip49_descriptor__static_method__ApiPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Int32, ffi.Pointer<wire_uint_8_list>, ffi.Int32)>>('wire_new_bip49_descriptor__static_method__Api');
  late final _wire_new_bip49_descriptor__static_method__Api = _wire_new_bip49_descriptor__static_method__ApiPtr.asFunction<void Function(int, int, ffi.Pointer<wire_uint_8_list>, int)>();

  void wire_new_bip49_public__static_method__Api(
    int port_,
    int key_chain_kind,
    ffi.Pointer<wire_uint_8_list> public_key,
    int network,
    ffi.Pointer<wire_uint_8_list> fingerprint,
  ) {
    return _wire_new_bip49_public__static_method__Api(
      port_,
      key_chain_kind,
      public_key,
      network,
      fingerprint,
    );
  }

  late final _wire_new_bip49_public__static_method__ApiPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Int32, ffi.Pointer<wire_uint_8_list>, ffi.Int32, ffi.Pointer<wire_uint_8_list>)>>('wire_new_bip49_public__static_method__Api');
  late final _wire_new_bip49_public__static_method__Api = _wire_new_bip49_public__static_method__ApiPtr.asFunction<void Function(int, int, ffi.Pointer<wire_uint_8_list>, int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_new_bip84_descriptor__static_method__Api(
    int port_,
    int key_chain_kind,
    ffi.Pointer<wire_uint_8_list> secret_key,
    int network,
  ) {
    return _wire_new_bip84_descriptor__static_method__Api(
      port_,
      key_chain_kind,
      secret_key,
      network,
    );
  }

  late final _wire_new_bip84_descriptor__static_method__ApiPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Int32, ffi.Pointer<wire_uint_8_list>, ffi.Int32)>>('wire_new_bip84_descriptor__static_method__Api');
  late final _wire_new_bip84_descriptor__static_method__Api = _wire_new_bip84_descriptor__static_method__ApiPtr.asFunction<void Function(int, int, ffi.Pointer<wire_uint_8_list>, int)>();

  void wire_new_bip84_public__static_method__Api(
    int port_,
    int key_chain_kind,
    ffi.Pointer<wire_uint_8_list> public_key,
    int network,
    ffi.Pointer<wire_uint_8_list> fingerprint,
  ) {
    return _wire_new_bip84_public__static_method__Api(
      port_,
      key_chain_kind,
      public_key,
      network,
      fingerprint,
    );
  }

  late final _wire_new_bip84_public__static_method__ApiPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Int32, ffi.Pointer<wire_uint_8_list>, ffi.Int32, ffi.Pointer<wire_uint_8_list>)>>('wire_new_bip84_public__static_method__Api');
  late final _wire_new_bip84_public__static_method__Api = _wire_new_bip84_public__static_method__ApiPtr.asFunction<void Function(int, int, ffi.Pointer<wire_uint_8_list>, int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_new_bip86_descriptor__static_method__Api(
    int port_,
    int key_chain_kind,
    ffi.Pointer<wire_uint_8_list> secret_key,
    int network,
  ) {
    return _wire_new_bip86_descriptor__static_method__Api(
      port_,
      key_chain_kind,
      secret_key,
      network,
    );
  }

  late final _wire_new_bip86_descriptor__static_method__ApiPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Int32, ffi.Pointer<wire_uint_8_list>, ffi.Int32)>>('wire_new_bip86_descriptor__static_method__Api');
  late final _wire_new_bip86_descriptor__static_method__Api = _wire_new_bip86_descriptor__static_method__ApiPtr.asFunction<void Function(int, int, ffi.Pointer<wire_uint_8_list>, int)>();

  void wire_new_bip86_public__static_method__Api(
    int port_,
    int key_chain_kind,
    ffi.Pointer<wire_uint_8_list> public_key,
    int network,
    ffi.Pointer<wire_uint_8_list> fingerprint,
  ) {
    return _wire_new_bip86_public__static_method__Api(
      port_,
      key_chain_kind,
      public_key,
      network,
      fingerprint,
    );
  }

  late final _wire_new_bip86_public__static_method__ApiPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Int32, ffi.Pointer<wire_uint_8_list>, ffi.Int32, ffi.Pointer<wire_uint_8_list>)>>('wire_new_bip86_public__static_method__Api');
  late final _wire_new_bip86_public__static_method__Api = _wire_new_bip86_public__static_method__ApiPtr.asFunction<void Function(int, int, ffi.Pointer<wire_uint_8_list>, int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_as_string_private__static_method__Api(
    int port_,
    wire_BdkDescriptor descriptor,
  ) {
    return _wire_as_string_private__static_method__Api(
      port_,
      descriptor,
    );
  }

  late final _wire_as_string_private__static_method__ApiPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, wire_BdkDescriptor)>>('wire_as_string_private__static_method__Api');
  late final _wire_as_string_private__static_method__Api = _wire_as_string_private__static_method__ApiPtr.asFunction<void Function(int, wire_BdkDescriptor)>();

  void wire_as_string__static_method__Api(
    int port_,
    wire_BdkDescriptor descriptor,
  ) {
    return _wire_as_string__static_method__Api(
      port_,
      descriptor,
    );
  }

  late final _wire_as_string__static_method__ApiPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, wire_BdkDescriptor)>>('wire_as_string__static_method__Api');
  late final _wire_as_string__static_method__Api = _wire_as_string__static_method__ApiPtr.asFunction<void Function(int, wire_BdkDescriptor)>();

  void wire_create_descriptor_secret__static_method__Api(
    int port_,
    int network,
    ffi.Pointer<wire_uint_8_list> mnemonic,
    ffi.Pointer<wire_uint_8_list> password,
  ) {
    return _wire_create_descriptor_secret__static_method__Api(
      port_,
      network,
      mnemonic,
      password,
    );
  }

  late final _wire_create_descriptor_secret__static_method__ApiPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Int32, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>>('wire_create_descriptor_secret__static_method__Api');
  late final _wire_create_descriptor_secret__static_method__Api = _wire_create_descriptor_secret__static_method__ApiPtr.asFunction<void Function(int, int, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_descriptor_secret_from_string__static_method__Api(
    int port_,
    ffi.Pointer<wire_uint_8_list> secret,
  ) {
    return _wire_descriptor_secret_from_string__static_method__Api(
      port_,
      secret,
    );
  }

  late final _wire_descriptor_secret_from_string__static_method__ApiPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>('wire_descriptor_secret_from_string__static_method__Api');
  late final _wire_descriptor_secret_from_string__static_method__Api = _wire_descriptor_secret_from_string__static_method__ApiPtr.asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_extend_descriptor_secret__static_method__Api(
    int port_,
    ffi.Pointer<wire_uint_8_list> secret,
    ffi.Pointer<wire_uint_8_list> path,
  ) {
    return _wire_extend_descriptor_secret__static_method__Api(
      port_,
      secret,
      path,
    );
  }

  late final _wire_extend_descriptor_secret__static_method__ApiPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>>('wire_extend_descriptor_secret__static_method__Api');
  late final _wire_extend_descriptor_secret__static_method__Api = _wire_extend_descriptor_secret__static_method__ApiPtr.asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_derive_descriptor_secret__static_method__Api(
    int port_,
    ffi.Pointer<wire_uint_8_list> secret,
    ffi.Pointer<wire_uint_8_list> path,
  ) {
    return _wire_derive_descriptor_secret__static_method__Api(
      port_,
      secret,
      path,
    );
  }

  late final _wire_derive_descriptor_secret__static_method__ApiPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>>('wire_derive_descriptor_secret__static_method__Api');
  late final _wire_derive_descriptor_secret__static_method__Api = _wire_derive_descriptor_secret__static_method__ApiPtr.asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_as_secret_bytes__static_method__Api(
    int port_,
    ffi.Pointer<wire_uint_8_list> secret,
  ) {
    return _wire_as_secret_bytes__static_method__Api(
      port_,
      secret,
    );
  }

  late final _wire_as_secret_bytes__static_method__ApiPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>('wire_as_secret_bytes__static_method__Api');
  late final _wire_as_secret_bytes__static_method__Api = _wire_as_secret_bytes__static_method__ApiPtr.asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_as_public__static_method__Api(
    int port_,
    ffi.Pointer<wire_uint_8_list> secret,
  ) {
    return _wire_as_public__static_method__Api(
      port_,
      secret,
    );
  }

  late final _wire_as_public__static_method__ApiPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>('wire_as_public__static_method__Api');
  late final _wire_as_public__static_method__Api = _wire_as_public__static_method__ApiPtr.asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_get_pub_from_secret_bytes__static_method__Api(
    int port_,
    ffi.Pointer<wire_uint_8_list> bytes,
  ) {
    return _wire_get_pub_from_secret_bytes__static_method__Api(
      port_,
      bytes,
    );
  }

  late final _wire_get_pub_from_secret_bytes__static_method__ApiPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>('wire_get_pub_from_secret_bytes__static_method__Api');
  late final _wire_get_pub_from_secret_bytes__static_method__Api = _wire_get_pub_from_secret_bytes__static_method__ApiPtr.asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_create_derivation_path__static_method__Api(
    int port_,
    ffi.Pointer<wire_uint_8_list> path,
  ) {
    return _wire_create_derivation_path__static_method__Api(
      port_,
      path,
    );
  }

  late final _wire_create_derivation_path__static_method__ApiPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>('wire_create_derivation_path__static_method__Api');
  late final _wire_create_derivation_path__static_method__Api = _wire_create_derivation_path__static_method__ApiPtr.asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_descriptor_public_from_string__static_method__Api(
    int port_,
    ffi.Pointer<wire_uint_8_list> public_key,
  ) {
    return _wire_descriptor_public_from_string__static_method__Api(
      port_,
      public_key,
    );
  }

  late final _wire_descriptor_public_from_string__static_method__ApiPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>('wire_descriptor_public_from_string__static_method__Api');
  late final _wire_descriptor_public_from_string__static_method__Api = _wire_descriptor_public_from_string__static_method__ApiPtr.asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_master_finterprint__static_method__Api(
    int port_,
    ffi.Pointer<wire_uint_8_list> xpub,
  ) {
    return _wire_master_finterprint__static_method__Api(
      port_,
      xpub,
    );
  }

  late final _wire_master_finterprint__static_method__ApiPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>('wire_master_finterprint__static_method__Api');
  late final _wire_master_finterprint__static_method__Api = _wire_master_finterprint__static_method__ApiPtr.asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_create_descriptor_public__static_method__Api(
    int port_,
    ffi.Pointer<wire_uint_8_list> xpub,
    ffi.Pointer<wire_uint_8_list> path,
    bool derive,
  ) {
    return _wire_create_descriptor_public__static_method__Api(
      port_,
      xpub,
      path,
      derive,
    );
  }

  late final _wire_create_descriptor_public__static_method__ApiPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>, ffi.Bool)>>('wire_create_descriptor_public__static_method__Api');
  late final _wire_create_descriptor_public__static_method__Api = _wire_create_descriptor_public__static_method__ApiPtr.asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>, bool)>();

  void wire_to_public_string__static_method__Api(
    int port_,
    ffi.Pointer<wire_uint_8_list> xpub,
  ) {
    return _wire_to_public_string__static_method__Api(
      port_,
      xpub,
    );
  }

  late final _wire_to_public_string__static_method__ApiPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>('wire_to_public_string__static_method__Api');
  late final _wire_to_public_string__static_method__Api = _wire_to_public_string__static_method__ApiPtr.asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_create_script__static_method__Api(
    int port_,
    ffi.Pointer<wire_uint_8_list> raw_output_script,
  ) {
    return _wire_create_script__static_method__Api(
      port_,
      raw_output_script,
    );
  }

  late final _wire_create_script__static_method__ApiPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>('wire_create_script__static_method__Api');
  late final _wire_create_script__static_method__Api = _wire_create_script__static_method__ApiPtr.asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_create_address__static_method__Api(
    int port_,
    ffi.Pointer<wire_uint_8_list> address,
  ) {
    return _wire_create_address__static_method__Api(
      port_,
      address,
    );
  }

  late final _wire_create_address__static_method__ApiPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>('wire_create_address__static_method__Api');
  late final _wire_create_address__static_method__Api = _wire_create_address__static_method__ApiPtr.asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_address_from_script__static_method__Api(
    int port_,
    ffi.Pointer<wire_Script> script,
    int network,
  ) {
    return _wire_address_from_script__static_method__Api(
      port_,
      script,
      network,
    );
  }

  late final _wire_address_from_script__static_method__ApiPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_Script>, ffi.Int32)>>('wire_address_from_script__static_method__Api');
  late final _wire_address_from_script__static_method__Api = _wire_address_from_script__static_method__ApiPtr.asFunction<void Function(int, ffi.Pointer<wire_Script>, int)>();

  void wire_address_to_script_pubkey__static_method__Api(
    int port_,
    ffi.Pointer<wire_uint_8_list> address,
  ) {
    return _wire_address_to_script_pubkey__static_method__Api(
      port_,
      address,
    );
  }

  late final _wire_address_to_script_pubkey__static_method__ApiPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>('wire_address_to_script_pubkey__static_method__Api');
  late final _wire_address_to_script_pubkey__static_method__Api = _wire_address_to_script_pubkey__static_method__ApiPtr.asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_payload__static_method__Api(
    int port_,
    ffi.Pointer<wire_uint_8_list> address,
  ) {
    return _wire_payload__static_method__Api(
      port_,
      address,
    );
  }

  late final _wire_payload__static_method__ApiPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>('wire_payload__static_method__Api');
  late final _wire_payload__static_method__Api = _wire_payload__static_method__ApiPtr.asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_address_network__static_method__Api(
    int port_,
    ffi.Pointer<wire_uint_8_list> address,
  ) {
    return _wire_address_network__static_method__Api(
      port_,
      address,
    );
  }

  late final _wire_address_network__static_method__ApiPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>('wire_address_network__static_method__Api');
  late final _wire_address_network__static_method__Api = _wire_address_network__static_method__ApiPtr.asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_create_wallet__static_method__Api(
    int port_,
    wire_BdkDescriptor descriptor,
    ffi.Pointer<wire_BdkDescriptor> change_descriptor,
    int network,
    ffi.Pointer<wire_DatabaseConfig> database_config,
  ) {
    return _wire_create_wallet__static_method__Api(
      port_,
      descriptor,
      change_descriptor,
      network,
      database_config,
    );
  }

  late final _wire_create_wallet__static_method__ApiPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, wire_BdkDescriptor, ffi.Pointer<wire_BdkDescriptor>, ffi.Int32, ffi.Pointer<wire_DatabaseConfig>)>>('wire_create_wallet__static_method__Api');
  late final _wire_create_wallet__static_method__Api = _wire_create_wallet__static_method__ApiPtr.asFunction<void Function(int, wire_BdkDescriptor, ffi.Pointer<wire_BdkDescriptor>, int, ffi.Pointer<wire_DatabaseConfig>)>();

  void wire_get_address__static_method__Api(
    int port_,
    wire_WalletInstance wallet,
    ffi.Pointer<wire_AddressIndex> address_index,
  ) {
    return _wire_get_address__static_method__Api(
      port_,
      wallet,
      address_index,
    );
  }

  late final _wire_get_address__static_method__ApiPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, wire_WalletInstance, ffi.Pointer<wire_AddressIndex>)>>('wire_get_address__static_method__Api');
  late final _wire_get_address__static_method__Api = _wire_get_address__static_method__ApiPtr.asFunction<void Function(int, wire_WalletInstance, ffi.Pointer<wire_AddressIndex>)>();

  void wire_get_internal_address__static_method__Api(
    int port_,
    wire_WalletInstance wallet,
    ffi.Pointer<wire_AddressIndex> address_index,
  ) {
    return _wire_get_internal_address__static_method__Api(
      port_,
      wallet,
      address_index,
    );
  }

  late final _wire_get_internal_address__static_method__ApiPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, wire_WalletInstance, ffi.Pointer<wire_AddressIndex>)>>('wire_get_internal_address__static_method__Api');
  late final _wire_get_internal_address__static_method__Api = _wire_get_internal_address__static_method__ApiPtr.asFunction<void Function(int, wire_WalletInstance, ffi.Pointer<wire_AddressIndex>)>();

  void wire_sync_wallet__static_method__Api(
    int port_,
    wire_WalletInstance wallet,
    wire_BlockchainInstance blockchain,
  ) {
    return _wire_sync_wallet__static_method__Api(
      port_,
      wallet,
      blockchain,
    );
  }

  late final _wire_sync_wallet__static_method__ApiPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, wire_WalletInstance, wire_BlockchainInstance)>>('wire_sync_wallet__static_method__Api');
  late final _wire_sync_wallet__static_method__Api = _wire_sync_wallet__static_method__ApiPtr.asFunction<void Function(int, wire_WalletInstance, wire_BlockchainInstance)>();

  void wire_sync_wallet_thread__static_method__Api(
    int port_,
    wire_WalletInstance wallet,
    wire_BlockchainInstance blockchain,
  ) {
    return _wire_sync_wallet_thread__static_method__Api(
      port_,
      wallet,
      blockchain,
    );
  }

  late final _wire_sync_wallet_thread__static_method__ApiPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, wire_WalletInstance, wire_BlockchainInstance)>>('wire_sync_wallet_thread__static_method__Api');
  late final _wire_sync_wallet_thread__static_method__Api = _wire_sync_wallet_thread__static_method__ApiPtr.asFunction<void Function(int, wire_WalletInstance, wire_BlockchainInstance)>();

  void wire_get_balance__static_method__Api(
    int port_,
    wire_WalletInstance wallet,
  ) {
    return _wire_get_balance__static_method__Api(
      port_,
      wallet,
    );
  }

  late final _wire_get_balance__static_method__ApiPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, wire_WalletInstance)>>('wire_get_balance__static_method__Api');
  late final _wire_get_balance__static_method__Api = _wire_get_balance__static_method__ApiPtr.asFunction<void Function(int, wire_WalletInstance)>();

  void wire_list_unspent_outputs__static_method__Api(
    int port_,
    wire_WalletInstance wallet,
  ) {
    return _wire_list_unspent_outputs__static_method__Api(
      port_,
      wallet,
    );
  }

  late final _wire_list_unspent_outputs__static_method__ApiPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, wire_WalletInstance)>>('wire_list_unspent_outputs__static_method__Api');
  late final _wire_list_unspent_outputs__static_method__Api = _wire_list_unspent_outputs__static_method__ApiPtr.asFunction<void Function(int, wire_WalletInstance)>();

  void wire_get_transactions__static_method__Api(
    int port_,
    wire_WalletInstance wallet,
    bool include_raw,
  ) {
    return _wire_get_transactions__static_method__Api(
      port_,
      wallet,
      include_raw,
    );
  }

  late final _wire_get_transactions__static_method__ApiPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, wire_WalletInstance, ffi.Bool)>>('wire_get_transactions__static_method__Api');
  late final _wire_get_transactions__static_method__Api = _wire_get_transactions__static_method__ApiPtr.asFunction<void Function(int, wire_WalletInstance, bool)>();

  void wire_sign__static_method__Api(
    int port_,
    wire_WalletInstance wallet,
    ffi.Pointer<wire_uint_8_list> psbt_str,
    ffi.Pointer<wire_SignOptions> sign_options,
  ) {
    return _wire_sign__static_method__Api(
      port_,
      wallet,
      psbt_str,
      sign_options,
    );
  }

  late final _wire_sign__static_method__ApiPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, wire_WalletInstance, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_SignOptions>)>>('wire_sign__static_method__Api');
  late final _wire_sign__static_method__Api = _wire_sign__static_method__ApiPtr.asFunction<void Function(int, wire_WalletInstance, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_SignOptions>)>();

  void wire_wallet_network__static_method__Api(
    int port_,
    wire_WalletInstance wallet,
  ) {
    return _wire_wallet_network__static_method__Api(
      port_,
      wallet,
    );
  }

  late final _wire_wallet_network__static_method__ApiPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, wire_WalletInstance)>>('wire_wallet_network__static_method__Api');
  late final _wire_wallet_network__static_method__Api = _wire_wallet_network__static_method__ApiPtr.asFunction<void Function(int, wire_WalletInstance)>();

  void wire_list_unspent__static_method__Api(
    int port_,
    wire_WalletInstance wallet,
  ) {
    return _wire_list_unspent__static_method__Api(
      port_,
      wallet,
    );
  }

  late final _wire_list_unspent__static_method__ApiPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, wire_WalletInstance)>>('wire_list_unspent__static_method__Api');
  late final _wire_list_unspent__static_method__Api = _wire_list_unspent__static_method__ApiPtr.asFunction<void Function(int, wire_WalletInstance)>();

  void wire_generate_seed_from_word_count__static_method__Api(
    int port_,
    int word_count,
  ) {
    return _wire_generate_seed_from_word_count__static_method__Api(
      port_,
      word_count,
    );
  }

  late final _wire_generate_seed_from_word_count__static_method__ApiPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Int32)>>('wire_generate_seed_from_word_count__static_method__Api');
  late final _wire_generate_seed_from_word_count__static_method__Api = _wire_generate_seed_from_word_count__static_method__ApiPtr.asFunction<void Function(int, int)>();

  void wire_generate_seed_from_string__static_method__Api(
    int port_,
    ffi.Pointer<wire_uint_8_list> mnemonic,
  ) {
    return _wire_generate_seed_from_string__static_method__Api(
      port_,
      mnemonic,
    );
  }

  late final _wire_generate_seed_from_string__static_method__ApiPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>('wire_generate_seed_from_string__static_method__Api');
  late final _wire_generate_seed_from_string__static_method__Api = _wire_generate_seed_from_string__static_method__ApiPtr.asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_generate_seed_from_entropy__static_method__Api(
    int port_,
    ffi.Pointer<wire_uint_8_list> entropy,
  ) {
    return _wire_generate_seed_from_entropy__static_method__Api(
      port_,
      entropy,
    );
  }

  late final _wire_generate_seed_from_entropy__static_method__ApiPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>('wire_generate_seed_from_entropy__static_method__Api');
  late final _wire_generate_seed_from_entropy__static_method__Api = _wire_generate_seed_from_entropy__static_method__ApiPtr.asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  wire_BdkDescriptor new_BdkDescriptor() {
    return _new_BdkDescriptor();
  }

  late final _new_BdkDescriptorPtr = _lookup<ffi.NativeFunction<wire_BdkDescriptor Function()>>('new_BdkDescriptor');
  late final _new_BdkDescriptor = _new_BdkDescriptorPtr.asFunction<wire_BdkDescriptor Function()>();

  wire_BlockchainInstance new_BlockchainInstance() {
    return _new_BlockchainInstance();
  }

  late final _new_BlockchainInstancePtr = _lookup<ffi.NativeFunction<wire_BlockchainInstance Function()>>('new_BlockchainInstance');
  late final _new_BlockchainInstance = _new_BlockchainInstancePtr.asFunction<wire_BlockchainInstance Function()>();

  wire_WalletInstance new_WalletInstance() {
    return _new_WalletInstance();
  }

  late final _new_WalletInstancePtr = _lookup<ffi.NativeFunction<wire_WalletInstance Function()>>('new_WalletInstance');
  late final _new_WalletInstance = _new_WalletInstancePtr.asFunction<wire_WalletInstance Function()>();

  ffi.Pointer<wire_BdkDescriptor> new_box_autoadd_BdkDescriptor_0() {
    return _new_box_autoadd_BdkDescriptor_0();
  }

  late final _new_box_autoadd_BdkDescriptor_0Ptr = _lookup<ffi.NativeFunction<ffi.Pointer<wire_BdkDescriptor> Function()>>('new_box_autoadd_BdkDescriptor_0');
  late final _new_box_autoadd_BdkDescriptor_0 = _new_box_autoadd_BdkDescriptor_0Ptr.asFunction<ffi.Pointer<wire_BdkDescriptor> Function()>();

  ffi.Pointer<wire_AddressIndex> new_box_autoadd_address_index_0() {
    return _new_box_autoadd_address_index_0();
  }

  late final _new_box_autoadd_address_index_0Ptr = _lookup<ffi.NativeFunction<ffi.Pointer<wire_AddressIndex> Function()>>('new_box_autoadd_address_index_0');
  late final _new_box_autoadd_address_index_0 = _new_box_autoadd_address_index_0Ptr.asFunction<ffi.Pointer<wire_AddressIndex> Function()>();

  ffi.Pointer<wire_AesDecryptReq> new_box_autoadd_aes_decrypt_req_0() {
    return _new_box_autoadd_aes_decrypt_req_0();
  }

  late final _new_box_autoadd_aes_decrypt_req_0Ptr = _lookup<ffi.NativeFunction<ffi.Pointer<wire_AesDecryptReq> Function()>>('new_box_autoadd_aes_decrypt_req_0');
  late final _new_box_autoadd_aes_decrypt_req_0 = _new_box_autoadd_aes_decrypt_req_0Ptr.asFunction<ffi.Pointer<wire_AesDecryptReq> Function()>();

  ffi.Pointer<wire_AesEncryptReq> new_box_autoadd_aes_encrypt_req_0() {
    return _new_box_autoadd_aes_encrypt_req_0();
  }

  late final _new_box_autoadd_aes_encrypt_req_0Ptr = _lookup<ffi.NativeFunction<ffi.Pointer<wire_AesEncryptReq> Function()>>('new_box_autoadd_aes_encrypt_req_0');
  late final _new_box_autoadd_aes_encrypt_req_0 = _new_box_autoadd_aes_encrypt_req_0Ptr.asFunction<ffi.Pointer<wire_AesEncryptReq> Function()>();

  ffi.Pointer<wire_BlockchainConfig> new_box_autoadd_blockchain_config_0() {
    return _new_box_autoadd_blockchain_config_0();
  }

  late final _new_box_autoadd_blockchain_config_0Ptr = _lookup<ffi.NativeFunction<ffi.Pointer<wire_BlockchainConfig> Function()>>('new_box_autoadd_blockchain_config_0');
  late final _new_box_autoadd_blockchain_config_0 = _new_box_autoadd_blockchain_config_0Ptr.asFunction<ffi.Pointer<wire_BlockchainConfig> Function()>();

  ffi.Pointer<wire_BLSVerifyReq> new_box_autoadd_bls_verify_req_0() {
    return _new_box_autoadd_bls_verify_req_0();
  }

  late final _new_box_autoadd_bls_verify_req_0Ptr = _lookup<ffi.NativeFunction<ffi.Pointer<wire_BLSVerifyReq> Function()>>('new_box_autoadd_bls_verify_req_0');
  late final _new_box_autoadd_bls_verify_req_0 = _new_box_autoadd_bls_verify_req_0Ptr.asFunction<ffi.Pointer<wire_BLSVerifyReq> Function()>();

  ffi.Pointer<ffi.Bool> new_box_autoadd_bool_0(
    bool value,
  ) {
    return _new_box_autoadd_bool_0(
      value,
    );
  }

  late final _new_box_autoadd_bool_0Ptr = _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Bool> Function(ffi.Bool)>>('new_box_autoadd_bool_0');
  late final _new_box_autoadd_bool_0 = _new_box_autoadd_bool_0Ptr.asFunction<ffi.Pointer<ffi.Bool> Function(bool)>();

  ffi.Pointer<wire_DatabaseConfig> new_box_autoadd_database_config_0() {
    return _new_box_autoadd_database_config_0();
  }

  late final _new_box_autoadd_database_config_0Ptr = _lookup<ffi.NativeFunction<ffi.Pointer<wire_DatabaseConfig> Function()>>('new_box_autoadd_database_config_0');
  late final _new_box_autoadd_database_config_0 = _new_box_autoadd_database_config_0Ptr.asFunction<ffi.Pointer<wire_DatabaseConfig> Function()>();

  ffi.Pointer<wire_ED25519FromSeedReq> new_box_autoadd_ed_25519_from_seed_req_0() {
    return _new_box_autoadd_ed_25519_from_seed_req_0();
  }

  late final _new_box_autoadd_ed_25519_from_seed_req_0Ptr = _lookup<ffi.NativeFunction<ffi.Pointer<wire_ED25519FromSeedReq> Function()>>('new_box_autoadd_ed_25519_from_seed_req_0');
  late final _new_box_autoadd_ed_25519_from_seed_req_0 = _new_box_autoadd_ed_25519_from_seed_req_0Ptr.asFunction<ffi.Pointer<wire_ED25519FromSeedReq> Function()>();

  ffi.Pointer<wire_ED25519SignReq> new_box_autoadd_ed_25519_sign_req_0() {
    return _new_box_autoadd_ed_25519_sign_req_0();
  }

  late final _new_box_autoadd_ed_25519_sign_req_0Ptr = _lookup<ffi.NativeFunction<ffi.Pointer<wire_ED25519SignReq> Function()>>('new_box_autoadd_ed_25519_sign_req_0');
  late final _new_box_autoadd_ed_25519_sign_req_0 = _new_box_autoadd_ed_25519_sign_req_0Ptr.asFunction<ffi.Pointer<wire_ED25519SignReq> Function()>();

  ffi.Pointer<wire_ED25519VerifyReq> new_box_autoadd_ed_25519_verify_req_0() {
    return _new_box_autoadd_ed_25519_verify_req_0();
  }

  late final _new_box_autoadd_ed_25519_verify_req_0Ptr = _lookup<ffi.NativeFunction<ffi.Pointer<wire_ED25519VerifyReq> Function()>>('new_box_autoadd_ed_25519_verify_req_0');
  late final _new_box_autoadd_ed_25519_verify_req_0 = _new_box_autoadd_ed_25519_verify_req_0Ptr.asFunction<ffi.Pointer<wire_ED25519VerifyReq> Function()>();

  ffi.Pointer<wire_ElectrumConfig> new_box_autoadd_electrum_config_0() {
    return _new_box_autoadd_electrum_config_0();
  }

  late final _new_box_autoadd_electrum_config_0Ptr = _lookup<ffi.NativeFunction<ffi.Pointer<wire_ElectrumConfig> Function()>>('new_box_autoadd_electrum_config_0');
  late final _new_box_autoadd_electrum_config_0 = _new_box_autoadd_electrum_config_0Ptr.asFunction<ffi.Pointer<wire_ElectrumConfig> Function()>();

  ffi.Pointer<wire_EsploraConfig> new_box_autoadd_esplora_config_0() {
    return _new_box_autoadd_esplora_config_0();
  }

  late final _new_box_autoadd_esplora_config_0Ptr = _lookup<ffi.NativeFunction<ffi.Pointer<wire_EsploraConfig> Function()>>('new_box_autoadd_esplora_config_0');
  late final _new_box_autoadd_esplora_config_0 = _new_box_autoadd_esplora_config_0Ptr.asFunction<ffi.Pointer<wire_EsploraConfig> Function()>();

  ffi.Pointer<ffi.Float> new_box_autoadd_f32_0(
    double value,
  ) {
    return _new_box_autoadd_f32_0(
      value,
    );
  }

  late final _new_box_autoadd_f32_0Ptr = _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Float> Function(ffi.Float)>>('new_box_autoadd_f32_0');
  late final _new_box_autoadd_f32_0 = _new_box_autoadd_f32_0Ptr.asFunction<ffi.Pointer<ffi.Float> Function(double)>();

  ffi.Pointer<wire_P256FromSeedReq> new_box_autoadd_p_256_from_seed_req_0() {
    return _new_box_autoadd_p_256_from_seed_req_0();
  }

  late final _new_box_autoadd_p_256_from_seed_req_0Ptr = _lookup<ffi.NativeFunction<ffi.Pointer<wire_P256FromSeedReq> Function()>>('new_box_autoadd_p_256_from_seed_req_0');
  late final _new_box_autoadd_p_256_from_seed_req_0 = _new_box_autoadd_p_256_from_seed_req_0Ptr.asFunction<ffi.Pointer<wire_P256FromSeedReq> Function()>();

  ffi.Pointer<wire_P256ShareSecretReq> new_box_autoadd_p_256_share_secret_req_0() {
    return _new_box_autoadd_p_256_share_secret_req_0();
  }

  late final _new_box_autoadd_p_256_share_secret_req_0Ptr = _lookup<ffi.NativeFunction<ffi.Pointer<wire_P256ShareSecretReq> Function()>>('new_box_autoadd_p_256_share_secret_req_0');
  late final _new_box_autoadd_p_256_share_secret_req_0 = _new_box_autoadd_p_256_share_secret_req_0Ptr.asFunction<ffi.Pointer<wire_P256ShareSecretReq> Function()>();

  ffi.Pointer<wire_P256SignWithSeedReq> new_box_autoadd_p_256_sign_with_seed_req_0() {
    return _new_box_autoadd_p_256_sign_with_seed_req_0();
  }

  late final _new_box_autoadd_p_256_sign_with_seed_req_0Ptr = _lookup<ffi.NativeFunction<ffi.Pointer<wire_P256SignWithSeedReq> Function()>>('new_box_autoadd_p_256_sign_with_seed_req_0');
  late final _new_box_autoadd_p_256_sign_with_seed_req_0 = _new_box_autoadd_p_256_sign_with_seed_req_0Ptr.asFunction<ffi.Pointer<wire_P256SignWithSeedReq> Function()>();

  ffi.Pointer<wire_P256VerifyReq> new_box_autoadd_p_256_verify_req_0() {
    return _new_box_autoadd_p_256_verify_req_0();
  }

  late final _new_box_autoadd_p_256_verify_req_0Ptr = _lookup<ffi.NativeFunction<ffi.Pointer<wire_P256VerifyReq> Function()>>('new_box_autoadd_p_256_verify_req_0');
  late final _new_box_autoadd_p_256_verify_req_0 = _new_box_autoadd_p_256_verify_req_0Ptr.asFunction<ffi.Pointer<wire_P256VerifyReq> Function()>();

  ffi.Pointer<wire_PBKDFDeriveReq> new_box_autoadd_pbkdf_derive_req_0() {
    return _new_box_autoadd_pbkdf_derive_req_0();
  }

  late final _new_box_autoadd_pbkdf_derive_req_0Ptr = _lookup<ffi.NativeFunction<ffi.Pointer<wire_PBKDFDeriveReq> Function()>>('new_box_autoadd_pbkdf_derive_req_0');
  late final _new_box_autoadd_pbkdf_derive_req_0 = _new_box_autoadd_pbkdf_derive_req_0Ptr.asFunction<ffi.Pointer<wire_PBKDFDeriveReq> Function()>();

  ffi.Pointer<wire_PhraseToSeedReq> new_box_autoadd_phrase_to_seed_req_0() {
    return _new_box_autoadd_phrase_to_seed_req_0();
  }

  late final _new_box_autoadd_phrase_to_seed_req_0Ptr = _lookup<ffi.NativeFunction<ffi.Pointer<wire_PhraseToSeedReq> Function()>>('new_box_autoadd_phrase_to_seed_req_0');
  late final _new_box_autoadd_phrase_to_seed_req_0 = _new_box_autoadd_phrase_to_seed_req_0Ptr.asFunction<ffi.Pointer<wire_PhraseToSeedReq> Function()>();

  ffi.Pointer<wire_RbfValue> new_box_autoadd_rbf_value_0() {
    return _new_box_autoadd_rbf_value_0();
  }

  late final _new_box_autoadd_rbf_value_0Ptr = _lookup<ffi.NativeFunction<ffi.Pointer<wire_RbfValue> Function()>>('new_box_autoadd_rbf_value_0');
  late final _new_box_autoadd_rbf_value_0 = _new_box_autoadd_rbf_value_0Ptr.asFunction<ffi.Pointer<wire_RbfValue> Function()>();

  ffi.Pointer<wire_RpcConfig> new_box_autoadd_rpc_config_0() {
    return _new_box_autoadd_rpc_config_0();
  }

  late final _new_box_autoadd_rpc_config_0Ptr = _lookup<ffi.NativeFunction<ffi.Pointer<wire_RpcConfig> Function()>>('new_box_autoadd_rpc_config_0');
  late final _new_box_autoadd_rpc_config_0 = _new_box_autoadd_rpc_config_0Ptr.asFunction<ffi.Pointer<wire_RpcConfig> Function()>();

  ffi.Pointer<wire_RpcSyncParams> new_box_autoadd_rpc_sync_params_0() {
    return _new_box_autoadd_rpc_sync_params_0();
  }

  late final _new_box_autoadd_rpc_sync_params_0Ptr = _lookup<ffi.NativeFunction<ffi.Pointer<wire_RpcSyncParams> Function()>>('new_box_autoadd_rpc_sync_params_0');
  late final _new_box_autoadd_rpc_sync_params_0 = _new_box_autoadd_rpc_sync_params_0Ptr.asFunction<ffi.Pointer<wire_RpcSyncParams> Function()>();

  ffi.Pointer<wire_SchnorrFromSeedReq> new_box_autoadd_schnorr_from_seed_req_0() {
    return _new_box_autoadd_schnorr_from_seed_req_0();
  }

  late final _new_box_autoadd_schnorr_from_seed_req_0Ptr = _lookup<ffi.NativeFunction<ffi.Pointer<wire_SchnorrFromSeedReq> Function()>>('new_box_autoadd_schnorr_from_seed_req_0');
  late final _new_box_autoadd_schnorr_from_seed_req_0 = _new_box_autoadd_schnorr_from_seed_req_0Ptr.asFunction<ffi.Pointer<wire_SchnorrFromSeedReq> Function()>();

  ffi.Pointer<wire_SchnorrSignWithSeedReq> new_box_autoadd_schnorr_sign_with_seed_req_0() {
    return _new_box_autoadd_schnorr_sign_with_seed_req_0();
  }

  late final _new_box_autoadd_schnorr_sign_with_seed_req_0Ptr = _lookup<ffi.NativeFunction<ffi.Pointer<wire_SchnorrSignWithSeedReq> Function()>>('new_box_autoadd_schnorr_sign_with_seed_req_0');
  late final _new_box_autoadd_schnorr_sign_with_seed_req_0 = _new_box_autoadd_schnorr_sign_with_seed_req_0Ptr.asFunction<ffi.Pointer<wire_SchnorrSignWithSeedReq> Function()>();

  ffi.Pointer<wire_SchnorrVerifyReq> new_box_autoadd_schnorr_verify_req_0() {
    return _new_box_autoadd_schnorr_verify_req_0();
  }

  late final _new_box_autoadd_schnorr_verify_req_0Ptr = _lookup<ffi.NativeFunction<ffi.Pointer<wire_SchnorrVerifyReq> Function()>>('new_box_autoadd_schnorr_verify_req_0');
  late final _new_box_autoadd_schnorr_verify_req_0 = _new_box_autoadd_schnorr_verify_req_0Ptr.asFunction<ffi.Pointer<wire_SchnorrVerifyReq> Function()>();

  ffi.Pointer<wire_Script> new_box_autoadd_script_0() {
    return _new_box_autoadd_script_0();
  }

  late final _new_box_autoadd_script_0Ptr = _lookup<ffi.NativeFunction<ffi.Pointer<wire_Script> Function()>>('new_box_autoadd_script_0');
  late final _new_box_autoadd_script_0 = _new_box_autoadd_script_0Ptr.asFunction<ffi.Pointer<wire_Script> Function()>();

  ffi.Pointer<wire_ScriptDeriveReq> new_box_autoadd_script_derive_req_0() {
    return _new_box_autoadd_script_derive_req_0();
  }

  late final _new_box_autoadd_script_derive_req_0Ptr = _lookup<ffi.NativeFunction<ffi.Pointer<wire_ScriptDeriveReq> Function()>>('new_box_autoadd_script_derive_req_0');
  late final _new_box_autoadd_script_derive_req_0 = _new_box_autoadd_script_derive_req_0Ptr.asFunction<ffi.Pointer<wire_ScriptDeriveReq> Function()>();

  ffi.Pointer<wire_Secp256k1FromSeedReq> new_box_autoadd_secp_256_k_1_from_seed_req_0() {
    return _new_box_autoadd_secp_256_k_1_from_seed_req_0();
  }

  late final _new_box_autoadd_secp_256_k_1_from_seed_req_0Ptr = _lookup<ffi.NativeFunction<ffi.Pointer<wire_Secp256k1FromSeedReq> Function()>>('new_box_autoadd_secp_256_k_1_from_seed_req_0');
  late final _new_box_autoadd_secp_256_k_1_from_seed_req_0 = _new_box_autoadd_secp_256_k_1_from_seed_req_0Ptr.asFunction<ffi.Pointer<wire_Secp256k1FromSeedReq> Function()>();

  ffi.Pointer<wire_Secp256k1RecoverReq> new_box_autoadd_secp_256_k_1_recover_req_0() {
    return _new_box_autoadd_secp_256_k_1_recover_req_0();
  }

  late final _new_box_autoadd_secp_256_k_1_recover_req_0Ptr = _lookup<ffi.NativeFunction<ffi.Pointer<wire_Secp256k1RecoverReq> Function()>>('new_box_autoadd_secp_256_k_1_recover_req_0');
  late final _new_box_autoadd_secp_256_k_1_recover_req_0 = _new_box_autoadd_secp_256_k_1_recover_req_0Ptr.asFunction<ffi.Pointer<wire_Secp256k1RecoverReq> Function()>();

  ffi.Pointer<wire_Secp256k1ShareSecretReq> new_box_autoadd_secp_256_k_1_share_secret_req_0() {
    return _new_box_autoadd_secp_256_k_1_share_secret_req_0();
  }

  late final _new_box_autoadd_secp_256_k_1_share_secret_req_0Ptr = _lookup<ffi.NativeFunction<ffi.Pointer<wire_Secp256k1ShareSecretReq> Function()>>('new_box_autoadd_secp_256_k_1_share_secret_req_0');
  late final _new_box_autoadd_secp_256_k_1_share_secret_req_0 = _new_box_autoadd_secp_256_k_1_share_secret_req_0Ptr.asFunction<ffi.Pointer<wire_Secp256k1ShareSecretReq> Function()>();

  ffi.Pointer<wire_Secp256k1SignWithSeedReq> new_box_autoadd_secp_256_k_1_sign_with_seed_req_0() {
    return _new_box_autoadd_secp_256_k_1_sign_with_seed_req_0();
  }

  late final _new_box_autoadd_secp_256_k_1_sign_with_seed_req_0Ptr = _lookup<ffi.NativeFunction<ffi.Pointer<wire_Secp256k1SignWithSeedReq> Function()>>('new_box_autoadd_secp_256_k_1_sign_with_seed_req_0');
  late final _new_box_autoadd_secp_256_k_1_sign_with_seed_req_0 = _new_box_autoadd_secp_256_k_1_sign_with_seed_req_0Ptr.asFunction<ffi.Pointer<wire_Secp256k1SignWithSeedReq> Function()>();

  ffi.Pointer<wire_Secp256k1VerifyReq> new_box_autoadd_secp_256_k_1_verify_req_0() {
    return _new_box_autoadd_secp_256_k_1_verify_req_0();
  }

  late final _new_box_autoadd_secp_256_k_1_verify_req_0Ptr = _lookup<ffi.NativeFunction<ffi.Pointer<wire_Secp256k1VerifyReq> Function()>>('new_box_autoadd_secp_256_k_1_verify_req_0');
  late final _new_box_autoadd_secp_256_k_1_verify_req_0 = _new_box_autoadd_secp_256_k_1_verify_req_0Ptr.asFunction<ffi.Pointer<wire_Secp256k1VerifyReq> Function()>();

  ffi.Pointer<wire_SeedToKeyReq> new_box_autoadd_seed_to_key_req_0() {
    return _new_box_autoadd_seed_to_key_req_0();
  }

  late final _new_box_autoadd_seed_to_key_req_0Ptr = _lookup<ffi.NativeFunction<ffi.Pointer<wire_SeedToKeyReq> Function()>>('new_box_autoadd_seed_to_key_req_0');
  late final _new_box_autoadd_seed_to_key_req_0 = _new_box_autoadd_seed_to_key_req_0Ptr.asFunction<ffi.Pointer<wire_SeedToKeyReq> Function()>();

  ffi.Pointer<wire_SignOptions> new_box_autoadd_sign_options_0() {
    return _new_box_autoadd_sign_options_0();
  }

  late final _new_box_autoadd_sign_options_0Ptr = _lookup<ffi.NativeFunction<ffi.Pointer<wire_SignOptions> Function()>>('new_box_autoadd_sign_options_0');
  late final _new_box_autoadd_sign_options_0 = _new_box_autoadd_sign_options_0Ptr.asFunction<ffi.Pointer<wire_SignOptions> Function()>();

  ffi.Pointer<wire_SledDbConfiguration> new_box_autoadd_sled_db_configuration_0() {
    return _new_box_autoadd_sled_db_configuration_0();
  }

  late final _new_box_autoadd_sled_db_configuration_0Ptr = _lookup<ffi.NativeFunction<ffi.Pointer<wire_SledDbConfiguration> Function()>>('new_box_autoadd_sled_db_configuration_0');
  late final _new_box_autoadd_sled_db_configuration_0 = _new_box_autoadd_sled_db_configuration_0Ptr.asFunction<ffi.Pointer<wire_SledDbConfiguration> Function()>();

  ffi.Pointer<wire_SqliteDbConfiguration> new_box_autoadd_sqlite_db_configuration_0() {
    return _new_box_autoadd_sqlite_db_configuration_0();
  }

  late final _new_box_autoadd_sqlite_db_configuration_0Ptr = _lookup<ffi.NativeFunction<ffi.Pointer<wire_SqliteDbConfiguration> Function()>>('new_box_autoadd_sqlite_db_configuration_0');
  late final _new_box_autoadd_sqlite_db_configuration_0 = _new_box_autoadd_sqlite_db_configuration_0Ptr.asFunction<ffi.Pointer<wire_SqliteDbConfiguration> Function()>();

  ffi.Pointer<ffi.Uint32> new_box_autoadd_u32_0(
    int value,
  ) {
    return _new_box_autoadd_u32_0(
      value,
    );
  }

  late final _new_box_autoadd_u32_0Ptr = _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Uint32> Function(ffi.Uint32)>>('new_box_autoadd_u32_0');
  late final _new_box_autoadd_u32_0 = _new_box_autoadd_u32_0Ptr.asFunction<ffi.Pointer<ffi.Uint32> Function(int)>();

  ffi.Pointer<ffi.Uint64> new_box_autoadd_u64_0(
    int value,
  ) {
    return _new_box_autoadd_u64_0(
      value,
    );
  }

  late final _new_box_autoadd_u64_0Ptr = _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Uint64> Function(ffi.Uint64)>>('new_box_autoadd_u64_0');
  late final _new_box_autoadd_u64_0 = _new_box_autoadd_u64_0Ptr.asFunction<ffi.Pointer<ffi.Uint64> Function(int)>();

  ffi.Pointer<ffi.Uint8> new_box_autoadd_u8_0(
    int value,
  ) {
    return _new_box_autoadd_u8_0(
      value,
    );
  }

  late final _new_box_autoadd_u8_0Ptr = _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Uint8> Function(ffi.Uint8)>>('new_box_autoadd_u8_0');
  late final _new_box_autoadd_u8_0 = _new_box_autoadd_u8_0Ptr.asFunction<ffi.Pointer<ffi.Uint8> Function(int)>();

  ffi.Pointer<wire_UserPass> new_box_autoadd_user_pass_0() {
    return _new_box_autoadd_user_pass_0();
  }

  late final _new_box_autoadd_user_pass_0Ptr = _lookup<ffi.NativeFunction<ffi.Pointer<wire_UserPass> Function()>>('new_box_autoadd_user_pass_0');
  late final _new_box_autoadd_user_pass_0 = _new_box_autoadd_user_pass_0Ptr.asFunction<ffi.Pointer<wire_UserPass> Function()>();

  ffi.Pointer<wire_list_out_point> new_list_out_point_0(
    int len,
  ) {
    return _new_list_out_point_0(
      len,
    );
  }

  late final _new_list_out_point_0Ptr = _lookup<ffi.NativeFunction<ffi.Pointer<wire_list_out_point> Function(ffi.Int32)>>('new_list_out_point_0');
  late final _new_list_out_point_0 = _new_list_out_point_0Ptr.asFunction<ffi.Pointer<wire_list_out_point> Function(int)>();

  ffi.Pointer<wire_list_script_amount> new_list_script_amount_0(
    int len,
  ) {
    return _new_list_script_amount_0(
      len,
    );
  }

  late final _new_list_script_amount_0Ptr = _lookup<ffi.NativeFunction<ffi.Pointer<wire_list_script_amount> Function(ffi.Int32)>>('new_list_script_amount_0');
  late final _new_list_script_amount_0 = _new_list_script_amount_0Ptr.asFunction<ffi.Pointer<wire_list_script_amount> Function(int)>();

  ffi.Pointer<wire_uint_8_list> new_uint_8_list_0(
    int len,
  ) {
    return _new_uint_8_list_0(
      len,
    );
  }

  late final _new_uint_8_list_0Ptr = _lookup<ffi.NativeFunction<ffi.Pointer<wire_uint_8_list> Function(ffi.Int32)>>('new_uint_8_list_0');
  late final _new_uint_8_list_0 = _new_uint_8_list_0Ptr.asFunction<ffi.Pointer<wire_uint_8_list> Function(int)>();

  void drop_opaque_BdkDescriptor(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _drop_opaque_BdkDescriptor(
      ptr,
    );
  }

  late final _drop_opaque_BdkDescriptorPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>('drop_opaque_BdkDescriptor');
  late final _drop_opaque_BdkDescriptor = _drop_opaque_BdkDescriptorPtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> share_opaque_BdkDescriptor(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _share_opaque_BdkDescriptor(
      ptr,
    );
  }

  late final _share_opaque_BdkDescriptorPtr = _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>('share_opaque_BdkDescriptor');
  late final _share_opaque_BdkDescriptor = _share_opaque_BdkDescriptorPtr.asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  void drop_opaque_BlockchainInstance(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _drop_opaque_BlockchainInstance(
      ptr,
    );
  }

  late final _drop_opaque_BlockchainInstancePtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>('drop_opaque_BlockchainInstance');
  late final _drop_opaque_BlockchainInstance = _drop_opaque_BlockchainInstancePtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> share_opaque_BlockchainInstance(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _share_opaque_BlockchainInstance(
      ptr,
    );
  }

  late final _share_opaque_BlockchainInstancePtr = _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>('share_opaque_BlockchainInstance');
  late final _share_opaque_BlockchainInstance = _share_opaque_BlockchainInstancePtr.asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  void drop_opaque_WalletInstance(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _drop_opaque_WalletInstance(
      ptr,
    );
  }

  late final _drop_opaque_WalletInstancePtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>('drop_opaque_WalletInstance');
  late final _drop_opaque_WalletInstance = _drop_opaque_WalletInstancePtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> share_opaque_WalletInstance(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _share_opaque_WalletInstance(
      ptr,
    );
  }

  late final _share_opaque_WalletInstancePtr = _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>('share_opaque_WalletInstance');
  late final _share_opaque_WalletInstance = _share_opaque_WalletInstancePtr.asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<AddressIndexKind> inflate_AddressIndex_Peek() {
    return _inflate_AddressIndex_Peek();
  }

  late final _inflate_AddressIndex_PeekPtr = _lookup<ffi.NativeFunction<ffi.Pointer<AddressIndexKind> Function()>>('inflate_AddressIndex_Peek');
  late final _inflate_AddressIndex_Peek = _inflate_AddressIndex_PeekPtr.asFunction<ffi.Pointer<AddressIndexKind> Function()>();

  ffi.Pointer<AddressIndexKind> inflate_AddressIndex_Reset() {
    return _inflate_AddressIndex_Reset();
  }

  late final _inflate_AddressIndex_ResetPtr = _lookup<ffi.NativeFunction<ffi.Pointer<AddressIndexKind> Function()>>('inflate_AddressIndex_Reset');
  late final _inflate_AddressIndex_Reset = _inflate_AddressIndex_ResetPtr.asFunction<ffi.Pointer<AddressIndexKind> Function()>();

  ffi.Pointer<BlockchainConfigKind> inflate_BlockchainConfig_Electrum() {
    return _inflate_BlockchainConfig_Electrum();
  }

  late final _inflate_BlockchainConfig_ElectrumPtr = _lookup<ffi.NativeFunction<ffi.Pointer<BlockchainConfigKind> Function()>>('inflate_BlockchainConfig_Electrum');
  late final _inflate_BlockchainConfig_Electrum = _inflate_BlockchainConfig_ElectrumPtr.asFunction<ffi.Pointer<BlockchainConfigKind> Function()>();

  ffi.Pointer<BlockchainConfigKind> inflate_BlockchainConfig_Esplora() {
    return _inflate_BlockchainConfig_Esplora();
  }

  late final _inflate_BlockchainConfig_EsploraPtr = _lookup<ffi.NativeFunction<ffi.Pointer<BlockchainConfigKind> Function()>>('inflate_BlockchainConfig_Esplora');
  late final _inflate_BlockchainConfig_Esplora = _inflate_BlockchainConfig_EsploraPtr.asFunction<ffi.Pointer<BlockchainConfigKind> Function()>();

  ffi.Pointer<BlockchainConfigKind> inflate_BlockchainConfig_Rpc() {
    return _inflate_BlockchainConfig_Rpc();
  }

  late final _inflate_BlockchainConfig_RpcPtr = _lookup<ffi.NativeFunction<ffi.Pointer<BlockchainConfigKind> Function()>>('inflate_BlockchainConfig_Rpc');
  late final _inflate_BlockchainConfig_Rpc = _inflate_BlockchainConfig_RpcPtr.asFunction<ffi.Pointer<BlockchainConfigKind> Function()>();

  ffi.Pointer<DatabaseConfigKind> inflate_DatabaseConfig_Sqlite() {
    return _inflate_DatabaseConfig_Sqlite();
  }

  late final _inflate_DatabaseConfig_SqlitePtr = _lookup<ffi.NativeFunction<ffi.Pointer<DatabaseConfigKind> Function()>>('inflate_DatabaseConfig_Sqlite');
  late final _inflate_DatabaseConfig_Sqlite = _inflate_DatabaseConfig_SqlitePtr.asFunction<ffi.Pointer<DatabaseConfigKind> Function()>();

  ffi.Pointer<DatabaseConfigKind> inflate_DatabaseConfig_Sled() {
    return _inflate_DatabaseConfig_Sled();
  }

  late final _inflate_DatabaseConfig_SledPtr = _lookup<ffi.NativeFunction<ffi.Pointer<DatabaseConfigKind> Function()>>('inflate_DatabaseConfig_Sled');
  late final _inflate_DatabaseConfig_Sled = _inflate_DatabaseConfig_SledPtr.asFunction<ffi.Pointer<DatabaseConfigKind> Function()>();

  ffi.Pointer<RbfValueKind> inflate_RbfValue_Value() {
    return _inflate_RbfValue_Value();
  }

  late final _inflate_RbfValue_ValuePtr = _lookup<ffi.NativeFunction<ffi.Pointer<RbfValueKind> Function()>>('inflate_RbfValue_Value');
  late final _inflate_RbfValue_Value = _inflate_RbfValue_ValuePtr.asFunction<ffi.Pointer<RbfValueKind> Function()>();

  void free_WireSyncReturn(
    WireSyncReturn ptr,
  ) {
    return _free_WireSyncReturn(
      ptr,
    );
  }

  late final _free_WireSyncReturnPtr = _lookup<ffi.NativeFunction<ffi.Void Function(WireSyncReturn)>>('free_WireSyncReturn');
  late final _free_WireSyncReturn = _free_WireSyncReturnPtr.asFunction<void Function(WireSyncReturn)>();
}

final class _Dart_Handle extends ffi.Opaque {}

final class wire_uint_8_list extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_PhraseToSeedReq extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> phrase;

  external ffi.Pointer<wire_uint_8_list> password;
}

final class wire_SeedToKeyReq extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> seed;

  external ffi.Pointer<wire_uint_8_list> path;
}

final class wire_BLSVerifyReq extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> signature;

  external ffi.Pointer<wire_uint_8_list> message;

  external ffi.Pointer<wire_uint_8_list> public_key;
}

final class wire_ED25519FromSeedReq extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> seed;
}

final class wire_ED25519SignReq extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> seed;

  external ffi.Pointer<wire_uint_8_list> message;
}

final class wire_ED25519VerifyReq extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> sig;

  external ffi.Pointer<wire_uint_8_list> message;

  external ffi.Pointer<wire_uint_8_list> pub_key;
}

final class wire_Secp256k1FromSeedReq extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> seed;
}

final class wire_Secp256k1SignWithSeedReq extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> msg;

  external ffi.Pointer<wire_uint_8_list> seed;
}

final class wire_Secp256k1VerifyReq extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> message_hash;

  external ffi.Pointer<wire_uint_8_list> signature_bytes;

  external ffi.Pointer<wire_uint_8_list> public_key_bytes;
}

final class wire_Secp256k1ShareSecretReq extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> seed;

  external ffi.Pointer<wire_uint_8_list> public_key_raw_bytes;
}

final class wire_Secp256k1RecoverReq extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> message_pre_hashed;

  external ffi.Pointer<wire_uint_8_list> signature_bytes;

  external ffi.Pointer<ffi.Uint8> chain_id;
}

final class wire_P256FromSeedReq extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> seed;
}

final class wire_P256SignWithSeedReq extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> msg;

  external ffi.Pointer<wire_uint_8_list> seed;
}

final class wire_P256VerifyReq extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> message_hash;

  external ffi.Pointer<wire_uint_8_list> signature_bytes;

  external ffi.Pointer<wire_uint_8_list> public_key_bytes;
}

final class wire_P256ShareSecretReq extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> seed;

  external ffi.Pointer<wire_uint_8_list> public_key_raw_bytes;
}

final class wire_SchnorrFromSeedReq extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> seed;
}

final class wire_SchnorrSignWithSeedReq extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> msg;

  external ffi.Pointer<wire_uint_8_list> seed;

  external ffi.Pointer<wire_uint_8_list> aux_rand;
}

final class wire_SchnorrVerifyReq extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> message_hash;

  external ffi.Pointer<wire_uint_8_list> signature_bytes;

  external ffi.Pointer<wire_uint_8_list> public_key_bytes;
}

final class wire_AesEncryptReq extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> key;

  external ffi.Pointer<wire_uint_8_list> iv;

  external ffi.Pointer<wire_uint_8_list> message;
}

final class wire_AesDecryptReq extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> key;

  external ffi.Pointer<wire_uint_8_list> iv;

  external ffi.Pointer<wire_uint_8_list> cipher_text;
}

final class wire_PBKDFDeriveReq extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> password;

  external ffi.Pointer<wire_uint_8_list> salt;

  @ffi.Uint32()
  external int c;
}

final class wire_ScriptDeriveReq extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> password;

  external ffi.Pointer<wire_uint_8_list> salt;

  @ffi.Uint32()
  external int n;

  @ffi.Uint32()
  external int p;

  @ffi.Uint32()
  external int r;
}

final class wire_ElectrumConfig extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> url;

  external ffi.Pointer<wire_uint_8_list> socks5;

  @ffi.Uint8()
  external int retry;

  external ffi.Pointer<ffi.Uint8> timeout;

  @ffi.Uint64()
  external int stop_gap;

  @ffi.Bool()
  external bool validate_domain;
}

final class wire_BlockchainConfig_Electrum extends ffi.Struct {
  external ffi.Pointer<wire_ElectrumConfig> config;
}

final class wire_EsploraConfig extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> base_url;

  external ffi.Pointer<wire_uint_8_list> proxy;

  external ffi.Pointer<ffi.Uint8> concurrency;

  @ffi.Uint64()
  external int stop_gap;

  external ffi.Pointer<ffi.Uint64> timeout;
}

final class wire_BlockchainConfig_Esplora extends ffi.Struct {
  external ffi.Pointer<wire_EsploraConfig> config;
}

final class wire_UserPass extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> username;

  external ffi.Pointer<wire_uint_8_list> password;
}

final class wire_RpcSyncParams extends ffi.Struct {
  @ffi.Uint64()
  external int start_script_count;

  @ffi.Uint64()
  external int start_time;

  @ffi.Bool()
  external bool force_start_time;

  @ffi.Uint64()
  external int poll_rate_sec;
}

final class wire_RpcConfig extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> url;

  external ffi.Pointer<wire_uint_8_list> auth_cookie;

  external ffi.Pointer<wire_UserPass> auth_user_pass;

  @ffi.Int32()
  external int network;

  external ffi.Pointer<wire_uint_8_list> wallet_name;

  external ffi.Pointer<wire_RpcSyncParams> sync_params;
}

final class wire_BlockchainConfig_Rpc extends ffi.Struct {
  external ffi.Pointer<wire_RpcConfig> config;
}

final class BlockchainConfigKind extends ffi.Union {
  external ffi.Pointer<wire_BlockchainConfig_Electrum> Electrum;

  external ffi.Pointer<wire_BlockchainConfig_Esplora> Esplora;

  external ffi.Pointer<wire_BlockchainConfig_Rpc> Rpc;
}

final class wire_BlockchainConfig extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external ffi.Pointer<BlockchainConfigKind> kind;
}

final class wire_BlockchainInstance extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

final class wire_WalletInstance extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

final class wire_Script extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> internal;
}

final class wire_ScriptAmount extends ffi.Struct {
  external wire_Script script;

  @ffi.Uint64()
  external int amount;
}

final class wire_list_script_amount extends ffi.Struct {
  external ffi.Pointer<wire_ScriptAmount> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_OutPoint extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> txid;

  @ffi.Uint32()
  external int vout;
}

final class wire_list_out_point extends ffi.Struct {
  external ffi.Pointer<wire_OutPoint> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_RbfValue_RbfDefault extends ffi.Opaque {}

final class wire_RbfValue_Value extends ffi.Struct {
  @ffi.Uint32()
  external int field0;
}

final class RbfValueKind extends ffi.Union {
  external ffi.Pointer<wire_RbfValue_RbfDefault> RbfDefault;

  external ffi.Pointer<wire_RbfValue_Value> Value;
}

final class wire_RbfValue extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external ffi.Pointer<RbfValueKind> kind;
}

final class wire_BdkDescriptor extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

final class wire_DatabaseConfig_Memory extends ffi.Opaque {}

final class wire_SqliteDbConfiguration extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> path;
}

final class wire_DatabaseConfig_Sqlite extends ffi.Struct {
  external ffi.Pointer<wire_SqliteDbConfiguration> config;
}

final class wire_SledDbConfiguration extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> path;

  external ffi.Pointer<wire_uint_8_list> tree_name;
}

final class wire_DatabaseConfig_Sled extends ffi.Struct {
  external ffi.Pointer<wire_SledDbConfiguration> config;
}

final class DatabaseConfigKind extends ffi.Union {
  external ffi.Pointer<wire_DatabaseConfig_Memory> Memory;

  external ffi.Pointer<wire_DatabaseConfig_Sqlite> Sqlite;

  external ffi.Pointer<wire_DatabaseConfig_Sled> Sled;
}

final class wire_DatabaseConfig extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external ffi.Pointer<DatabaseConfigKind> kind;
}

final class wire_AddressIndex_New extends ffi.Opaque {}

final class wire_AddressIndex_LastUnused extends ffi.Opaque {}

final class wire_AddressIndex_Peek extends ffi.Struct {
  @ffi.Uint32()
  external int index;
}

final class wire_AddressIndex_Reset extends ffi.Struct {
  @ffi.Uint32()
  external int index;
}

final class AddressIndexKind extends ffi.Union {
  external ffi.Pointer<wire_AddressIndex_New> New;

  external ffi.Pointer<wire_AddressIndex_LastUnused> LastUnused;

  external ffi.Pointer<wire_AddressIndex_Peek> Peek;

  external ffi.Pointer<wire_AddressIndex_Reset> Reset;
}

final class wire_AddressIndex extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external ffi.Pointer<AddressIndexKind> kind;
}

final class wire_SignOptions extends ffi.Struct {
  @ffi.Bool()
  external bool trust_witness_utxo;

  external ffi.Pointer<ffi.Uint32> assume_height;

  @ffi.Bool()
  external bool allow_all_sighashes;

  @ffi.Bool()
  external bool remove_partial_sigs;

  @ffi.Bool()
  external bool try_finalize;

  @ffi.Bool()
  external bool sign_with_tap_internal_key;

  @ffi.Bool()
  external bool allow_grinding;
}

typedef DartPostCObjectFnType = ffi.Pointer<ffi.NativeFunction<ffi.Bool Function(DartPort port_id, ffi.Pointer<ffi.Void> message)>>;
typedef DartPort = ffi.Int64;

const int ECB = 0;

const int CBC = 1;

const int CFB1 = 2;

const int CFB2 = 3;

const int CFB4 = 5;

const int OFB1 = 14;

const int OFB2 = 15;

const int OFB4 = 17;

const int OFB8 = 21;

const int OFB16 = 29;

const int CTR1 = 30;

const int CTR2 = 31;

const int CTR4 = 33;

const int CTR8 = 37;

const int CTR16 = 45;

const int CHUNK = 64;

const int MODBYTES = 48;

const int BASEBITS = 58;

const int NLEN = 7;

const int DNLEN = 14;

const int HBITS = 29;

const int BIGBITS = 384;

const int BLS_OK = 0;

const int BLS_FAIL = -1;

const int WEIERSTRASS = 0;

const int EDWARDS = 1;

const int MONTGOMERY = 2;

const int NOT = 0;

const int BN = 1;

const int BLS12 = 2;

const int BLS24 = 3;

const int BLS48 = 4;

const int D_TYPE = 0;

const int M_TYPE = 1;

const int POSITIVEX = 0;

const int NEGATIVEX = 1;

const int CURVETYPE = 0;

const int CURVE_A = 0;

const int CURVE_PAIRING_TYPE = 2;

const int SEXTIC_TWIST = 1;

const int SIGN_OF_X = 1;

const int ATE_BITS = 65;

const int G2_TABLE = 69;

const int HTC_ISO = 11;

const int HTC_ISO_G2 = 3;

const int ALLOW_ALT_COMPRESS = 1;

const int HASH_TYPE = 32;

const int AESKEY = 16;

const int NOT_SPECIAL = 0;

const int PSEUDO_MERSENNE = 1;

const int MONTGOMERY_FRIENDLY = 2;

const int GENERALISED_MERSENNE = 3;

const int NEGATOWER = 0;

const int POSITOWER = 1;

const int MODBITS = 381;

const int PM1D2 = 1;

const int RIADZ = 11;

const int RIADZG2A = -2;

const int RIADZG2B = -1;

const int MODTYPE = 0;

const int QNRI = 0;

const int TOWER = 0;

const int FEXCESS = 33554431;

const int BIG_ENDIAN_SIGN = 0;

const int ZERO = 0;

const int ONE = 1;

const int SPARSEST = 2;

const int SPARSER = 3;

const int SPARSE = 4;

const int DENSE = 5;

const int BAD_PARAMS = -11;

const int INVALID_POINT = -14;

const int WRONG_ORDER = -18;

const int BAD_PIN = -19;

const int SHA256 = 32;

const int SHA384 = 48;

const int SHA512 = 64;

const int MAXPIN = 10000;

const int PBLEN = 14;

const int CURVE_COF_I = 0;

const int CURVE_B_I = 4;

const int USE_GLV = 1;

const int USE_GS_G2 = 1;

const int USE_GS_GT = 1;

const int GT_STRONG = 0;

const int MC_SHA2 = 2;

const int MC_SHA3 = 3;

const int HASH224 = 28;

const int HASH256 = 32;

const int HASH384 = 48;

const int HASH512 = 64;

const int SHAKE128 = 16;

const int SHAKE256 = 32;

const int KEY_LENGTH = 32;

const int KEY_LENGTH_AES = 16;

const int BMASK = 2147483647;

const int HMASK = 536870911;

const int MCONST = 140737475470229501;
