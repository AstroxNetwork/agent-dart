#![allow(
    non_camel_case_types,
    unused,
    clippy::redundant_closure,
    clippy::useless_conversion,
    clippy::unit_arg,
    clippy::double_parens,
    non_snake_case,
    clippy::too_many_arguments
)]
// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.72.0.

use crate::api::*;
use core::panic::UnwindSafe;
use flutter_rust_bridge::*;
use std::ffi::c_void;
use std::sync::Arc;

// Section: imports

use crate::p256::P256IdentityExport;
use crate::schnorr::SchnorrIdentityExport;
use crate::secp256k1::Secp256k1IdentityExport;
use crate::types::AesDecryptReq;
use crate::types::AesEncryptReq;
use crate::types::BLSVerifyReq;
use crate::types::ED25519FromSeedReq;
use crate::types::ED25519Res;
use crate::types::ED25519SignReq;
use crate::types::ED25519VerifyReq;
use crate::types::KeyDerivedRes;
use crate::types::P256FromSeedReq;
use crate::types::P256ShareSecretReq;
use crate::types::P256SignWithSeedReq;
use crate::types::P256VerifyReq;
use crate::types::PBKDFDeriveReq;
use crate::types::PhraseToSeedReq;
use crate::types::SchnorrFromSeedReq;
use crate::types::SchnorrSignWithSeedReq;
use crate::types::SchnorrVerifyReq;
use crate::types::ScriptDeriveReq;
use crate::types::Secp256k1FromSeedReq;
use crate::types::Secp256k1RecoverReq;
use crate::types::Secp256k1ShareSecretReq;
use crate::types::Secp256k1SignWithSeedReq;
use crate::types::Secp256k1VerifyReq;
use crate::types::SeedToKeyReq;
use crate::types::SignatureFFI;

// Section: wire functions

fn wire_mnemonic_phrase_to_seed_impl(
    port_: MessagePort,
    req: impl Wire2Api<PhraseToSeedReq> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "mnemonic_phrase_to_seed",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_req = req.wire2api();
            move |task_callback| Ok(mnemonic_phrase_to_seed(api_req))
        },
    )
}
fn wire_mnemonic_seed_to_key_impl(
    port_: MessagePort,
    req: impl Wire2Api<SeedToKeyReq> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "mnemonic_seed_to_key",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_req = req.wire2api();
            move |task_callback| Ok(mnemonic_seed_to_key(api_req))
        },
    )
}
fn wire_bls_init_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "bls_init",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| Ok(bls_init()),
    )
}
fn wire_bls_verify_impl(port_: MessagePort, req: impl Wire2Api<BLSVerifyReq> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "bls_verify",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_req = req.wire2api();
            move |task_callback| Ok(bls_verify(api_req))
        },
    )
}
fn wire_ed25519_from_seed_impl(
    port_: MessagePort,
    req: impl Wire2Api<ED25519FromSeedReq> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "ed25519_from_seed",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_req = req.wire2api();
            move |task_callback| Ok(ed25519_from_seed(api_req))
        },
    )
}
fn wire_ed25519_sign_impl(port_: MessagePort, req: impl Wire2Api<ED25519SignReq> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "ed25519_sign",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_req = req.wire2api();
            move |task_callback| Ok(ed25519_sign(api_req))
        },
    )
}
fn wire_ed25519_verify_impl(port_: MessagePort, req: impl Wire2Api<ED25519VerifyReq> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "ed25519_verify",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_req = req.wire2api();
            move |task_callback| Ok(ed25519_verify(api_req))
        },
    )
}
fn wire_secp256k1_from_seed_impl(
    port_: MessagePort,
    req: impl Wire2Api<Secp256k1FromSeedReq> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "secp256k1_from_seed",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_req = req.wire2api();
            move |task_callback| Ok(secp256k1_from_seed(api_req))
        },
    )
}
fn wire_secp256k1_sign_impl(
    port_: MessagePort,
    req: impl Wire2Api<Secp256k1SignWithSeedReq> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "secp256k1_sign",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_req = req.wire2api();
            move |task_callback| Ok(secp256k1_sign(api_req))
        },
    )
}
fn wire_secp256k1_sign_recoverable_impl(
    port_: MessagePort,
    req: impl Wire2Api<Secp256k1SignWithSeedReq> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "secp256k1_sign_recoverable",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_req = req.wire2api();
            move |task_callback| Ok(secp256k1_sign_recoverable(api_req))
        },
    )
}
fn wire_secp256k1_verify_impl(
    port_: MessagePort,
    req: impl Wire2Api<Secp256k1VerifyReq> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "secp256k1_verify",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_req = req.wire2api();
            move |task_callback| Ok(secp256k1_verify(api_req))
        },
    )
}
fn wire_secp256k1_get_shared_secret_impl(
    port_: MessagePort,
    req: impl Wire2Api<Secp256k1ShareSecretReq> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "secp256k1_get_shared_secret",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_req = req.wire2api();
            move |task_callback| Ok(secp256k1_get_shared_secret(api_req))
        },
    )
}
fn wire_secp256k1_recover_impl(
    port_: MessagePort,
    req: impl Wire2Api<Secp256k1RecoverReq> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "secp256k1_recover",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_req = req.wire2api();
            move |task_callback| Ok(secp256k1_recover(api_req))
        },
    )
}
fn wire_p256_from_seed_impl(port_: MessagePort, req: impl Wire2Api<P256FromSeedReq> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "p256_from_seed",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_req = req.wire2api();
            move |task_callback| Ok(p256_from_seed(api_req))
        },
    )
}
fn wire_p256_sign_impl(port_: MessagePort, req: impl Wire2Api<P256SignWithSeedReq> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "p256_sign",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_req = req.wire2api();
            move |task_callback| Ok(p256_sign(api_req))
        },
    )
}
fn wire_p256_verify_impl(port_: MessagePort, req: impl Wire2Api<P256VerifyReq> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "p256_verify",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_req = req.wire2api();
            move |task_callback| Ok(p256_verify(api_req))
        },
    )
}
fn wire_p256_get_shared_secret_impl(
    port_: MessagePort,
    req: impl Wire2Api<P256ShareSecretReq> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "p256_get_shared_secret",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_req = req.wire2api();
            move |task_callback| Ok(p256_get_shared_secret(api_req))
        },
    )
}
fn wire_schnorr_from_seed_impl(
    port_: MessagePort,
    req: impl Wire2Api<SchnorrFromSeedReq> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "schnorr_from_seed",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_req = req.wire2api();
            move |task_callback| Ok(schnorr_from_seed(api_req))
        },
    )
}
fn wire_schnorr_sign_impl(
    port_: MessagePort,
    req: impl Wire2Api<SchnorrSignWithSeedReq> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "schnorr_sign",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_req = req.wire2api();
            move |task_callback| Ok(schnorr_sign(api_req))
        },
    )
}
fn wire_schnorr_verify_impl(port_: MessagePort, req: impl Wire2Api<SchnorrVerifyReq> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "schnorr_verify",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_req = req.wire2api();
            move |task_callback| Ok(schnorr_verify(api_req))
        },
    )
}
fn wire_aes_128_ctr_encrypt_impl(
    port_: MessagePort,
    req: impl Wire2Api<AesEncryptReq> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "aes_128_ctr_encrypt",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_req = req.wire2api();
            move |task_callback| Ok(aes_128_ctr_encrypt(api_req))
        },
    )
}
fn wire_aes_128_ctr_decrypt_impl(
    port_: MessagePort,
    req: impl Wire2Api<AesDecryptReq> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "aes_128_ctr_decrypt",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_req = req.wire2api();
            move |task_callback| Ok(aes_128_ctr_decrypt(api_req))
        },
    )
}
fn wire_aes_256_cbc_encrypt_impl(
    port_: MessagePort,
    req: impl Wire2Api<AesEncryptReq> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "aes_256_cbc_encrypt",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_req = req.wire2api();
            move |task_callback| Ok(aes_256_cbc_encrypt(api_req))
        },
    )
}
fn wire_aes_256_cbc_decrypt_impl(
    port_: MessagePort,
    req: impl Wire2Api<AesDecryptReq> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "aes_256_cbc_decrypt",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_req = req.wire2api();
            move |task_callback| Ok(aes_256_cbc_decrypt(api_req))
        },
    )
}
fn wire_aes_256_gcm_encrypt_impl(
    port_: MessagePort,
    req: impl Wire2Api<AesEncryptReq> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "aes_256_gcm_encrypt",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_req = req.wire2api();
            move |task_callback| Ok(aes_256_gcm_encrypt(api_req))
        },
    )
}
fn wire_aes_256_gcm_decrypt_impl(
    port_: MessagePort,
    req: impl Wire2Api<AesDecryptReq> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "aes_256_gcm_decrypt",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_req = req.wire2api();
            move |task_callback| Ok(aes_256_gcm_decrypt(api_req))
        },
    )
}
fn wire_pbkdf2_derive_key_impl(
    port_: MessagePort,
    req: impl Wire2Api<PBKDFDeriveReq> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "pbkdf2_derive_key",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_req = req.wire2api();
            move |task_callback| Ok(pbkdf2_derive_key(api_req))
        },
    )
}
fn wire_scrypt_derive_key_impl(
    port_: MessagePort,
    req: impl Wire2Api<ScriptDeriveReq> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "scrypt_derive_key",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_req = req.wire2api();
            move |task_callback| Ok(scrypt_derive_key(api_req))
        },
    )
}
// Section: wrapper structs

// Section: static checks

// Section: allocate functions

// Section: related functions

// Section: impl Wire2Api

pub trait Wire2Api<T> {
    fn wire2api(self) -> T;
}

impl<T, S> Wire2Api<Option<T>> for *mut S
where
    *mut S: Wire2Api<T>,
{
    fn wire2api(self) -> Option<T> {
        (!self.is_null()).then(|| self.wire2api())
    }
}

impl Wire2Api<u32> for u32 {
    fn wire2api(self) -> u32 {
        self
    }
}
impl Wire2Api<u8> for u8 {
    fn wire2api(self) -> u8 {
        self
    }
}

// Section: impl IntoDart

impl support::IntoDart for ED25519Res {
    fn into_dart(self) -> support::DartAbi {
        vec![self.seed.into_dart(), self.public_key.into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for ED25519Res {}

impl support::IntoDart for KeyDerivedRes {
    fn into_dart(self) -> support::DartAbi {
        vec![self.left_bits.into_dart(), self.right_bits.into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for KeyDerivedRes {}

impl support::IntoDart for P256IdentityExport {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.private_key_hash.into_dart(),
            self.der_encoded_public_key.into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for P256IdentityExport {}

impl support::IntoDart for SchnorrIdentityExport {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.private_key_hash.into_dart(),
            self.public_key_hash.into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for SchnorrIdentityExport {}

impl support::IntoDart for Secp256k1IdentityExport {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.private_key_hash.into_dart(),
            self.der_encoded_public_key.into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for Secp256k1IdentityExport {}

impl support::IntoDart for SignatureFFI {
    fn into_dart(self) -> support::DartAbi {
        vec![self.public_key.into_dart(), self.signature.into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for SignatureFFI {}

// Section: executor

support::lazy_static! {
    pub static ref FLUTTER_RUST_BRIDGE_HANDLER: support::DefaultHandler = Default::default();
}

/// cbindgen:ignore
#[cfg(target_family = "wasm")]
mod web {
    use super::*;
    // Section: wire functions

    #[wasm_bindgen]
    pub fn wire_mnemonic_phrase_to_seed(port_: MessagePort, req: JsValue) {
        wire_mnemonic_phrase_to_seed_impl(port_, req)
    }

    #[wasm_bindgen]
    pub fn wire_mnemonic_seed_to_key(port_: MessagePort, req: JsValue) {
        wire_mnemonic_seed_to_key_impl(port_, req)
    }

    #[wasm_bindgen]
    pub fn wire_bls_init(port_: MessagePort) {
        wire_bls_init_impl(port_)
    }

    #[wasm_bindgen]
    pub fn wire_bls_verify(port_: MessagePort, req: JsValue) {
        wire_bls_verify_impl(port_, req)
    }

    #[wasm_bindgen]
    pub fn wire_ed25519_from_seed(port_: MessagePort, req: JsValue) {
        wire_ed25519_from_seed_impl(port_, req)
    }

    #[wasm_bindgen]
    pub fn wire_ed25519_sign(port_: MessagePort, req: JsValue) {
        wire_ed25519_sign_impl(port_, req)
    }

    #[wasm_bindgen]
    pub fn wire_ed25519_verify(port_: MessagePort, req: JsValue) {
        wire_ed25519_verify_impl(port_, req)
    }

    #[wasm_bindgen]
    pub fn wire_secp256k1_from_seed(port_: MessagePort, req: JsValue) {
        wire_secp256k1_from_seed_impl(port_, req)
    }

    #[wasm_bindgen]
    pub fn wire_secp256k1_sign(port_: MessagePort, req: JsValue) {
        wire_secp256k1_sign_impl(port_, req)
    }

    #[wasm_bindgen]
    pub fn wire_secp256k1_sign_recoverable(port_: MessagePort, req: JsValue) {
        wire_secp256k1_sign_recoverable_impl(port_, req)
    }

    #[wasm_bindgen]
    pub fn wire_secp256k1_verify(port_: MessagePort, req: JsValue) {
        wire_secp256k1_verify_impl(port_, req)
    }

    #[wasm_bindgen]
    pub fn wire_secp256k1_get_shared_secret(port_: MessagePort, req: JsValue) {
        wire_secp256k1_get_shared_secret_impl(port_, req)
    }

    #[wasm_bindgen]
    pub fn wire_secp256k1_recover(port_: MessagePort, req: JsValue) {
        wire_secp256k1_recover_impl(port_, req)
    }

    #[wasm_bindgen]
    pub fn wire_p256_from_seed(port_: MessagePort, req: JsValue) {
        wire_p256_from_seed_impl(port_, req)
    }

    #[wasm_bindgen]
    pub fn wire_p256_sign(port_: MessagePort, req: JsValue) {
        wire_p256_sign_impl(port_, req)
    }

    #[wasm_bindgen]
    pub fn wire_p256_verify(port_: MessagePort, req: JsValue) {
        wire_p256_verify_impl(port_, req)
    }

    #[wasm_bindgen]
    pub fn wire_p256_get_shared_secret(port_: MessagePort, req: JsValue) {
        wire_p256_get_shared_secret_impl(port_, req)
    }

    #[wasm_bindgen]
    pub fn wire_schnorr_from_seed(port_: MessagePort, req: JsValue) {
        wire_schnorr_from_seed_impl(port_, req)
    }

    #[wasm_bindgen]
    pub fn wire_schnorr_sign(port_: MessagePort, req: JsValue) {
        wire_schnorr_sign_impl(port_, req)
    }

    #[wasm_bindgen]
    pub fn wire_schnorr_verify(port_: MessagePort, req: JsValue) {
        wire_schnorr_verify_impl(port_, req)
    }

    #[wasm_bindgen]
    pub fn wire_aes_128_ctr_encrypt(port_: MessagePort, req: JsValue) {
        wire_aes_128_ctr_encrypt_impl(port_, req)
    }

    #[wasm_bindgen]
    pub fn wire_aes_128_ctr_decrypt(port_: MessagePort, req: JsValue) {
        wire_aes_128_ctr_decrypt_impl(port_, req)
    }

    #[wasm_bindgen]
    pub fn wire_aes_256_cbc_encrypt(port_: MessagePort, req: JsValue) {
        wire_aes_256_cbc_encrypt_impl(port_, req)
    }

    #[wasm_bindgen]
    pub fn wire_aes_256_cbc_decrypt(port_: MessagePort, req: JsValue) {
        wire_aes_256_cbc_decrypt_impl(port_, req)
    }

    #[wasm_bindgen]
    pub fn wire_aes_256_gcm_encrypt(port_: MessagePort, req: JsValue) {
        wire_aes_256_gcm_encrypt_impl(port_, req)
    }

    #[wasm_bindgen]
    pub fn wire_aes_256_gcm_decrypt(port_: MessagePort, req: JsValue) {
        wire_aes_256_gcm_decrypt_impl(port_, req)
    }

    #[wasm_bindgen]
    pub fn wire_pbkdf2_derive_key(port_: MessagePort, req: JsValue) {
        wire_pbkdf2_derive_key_impl(port_, req)
    }

    #[wasm_bindgen]
    pub fn wire_scrypt_derive_key(port_: MessagePort, req: JsValue) {
        wire_scrypt_derive_key_impl(port_, req)
    }

    // Section: allocate functions

    // Section: related functions

    // Section: impl Wire2Api

    impl Wire2Api<String> for String {
        fn wire2api(self) -> String {
            self
        }
    }
    impl Wire2Api<AesDecryptReq> for JsValue {
        fn wire2api(self) -> AesDecryptReq {
            let self_ = self.dyn_into::<JsArray>().unwrap();
            assert_eq!(
                self_.length(),
                3,
                "Expected 3 elements, got {}",
                self_.length()
            );
            AesDecryptReq {
                key: self_.get(0).wire2api(),
                iv: self_.get(1).wire2api(),
                cipher_text: self_.get(2).wire2api(),
            }
        }
    }
    impl Wire2Api<AesEncryptReq> for JsValue {
        fn wire2api(self) -> AesEncryptReq {
            let self_ = self.dyn_into::<JsArray>().unwrap();
            assert_eq!(
                self_.length(),
                3,
                "Expected 3 elements, got {}",
                self_.length()
            );
            AesEncryptReq {
                key: self_.get(0).wire2api(),
                iv: self_.get(1).wire2api(),
                message: self_.get(2).wire2api(),
            }
        }
    }
    impl Wire2Api<BLSVerifyReq> for JsValue {
        fn wire2api(self) -> BLSVerifyReq {
            let self_ = self.dyn_into::<JsArray>().unwrap();
            assert_eq!(
                self_.length(),
                3,
                "Expected 3 elements, got {}",
                self_.length()
            );
            BLSVerifyReq {
                signature: self_.get(0).wire2api(),
                message: self_.get(1).wire2api(),
                public_key: self_.get(2).wire2api(),
            }
        }
    }

    impl Wire2Api<ED25519FromSeedReq> for JsValue {
        fn wire2api(self) -> ED25519FromSeedReq {
            let self_ = self.dyn_into::<JsArray>().unwrap();
            assert_eq!(
                self_.length(),
                1,
                "Expected 1 elements, got {}",
                self_.length()
            );
            ED25519FromSeedReq {
                seed: self_.get(0).wire2api(),
            }
        }
    }
    impl Wire2Api<ED25519SignReq> for JsValue {
        fn wire2api(self) -> ED25519SignReq {
            let self_ = self.dyn_into::<JsArray>().unwrap();
            assert_eq!(
                self_.length(),
                2,
                "Expected 2 elements, got {}",
                self_.length()
            );
            ED25519SignReq {
                seed: self_.get(0).wire2api(),
                message: self_.get(1).wire2api(),
            }
        }
    }
    impl Wire2Api<ED25519VerifyReq> for JsValue {
        fn wire2api(self) -> ED25519VerifyReq {
            let self_ = self.dyn_into::<JsArray>().unwrap();
            assert_eq!(
                self_.length(),
                3,
                "Expected 3 elements, got {}",
                self_.length()
            );
            ED25519VerifyReq {
                sig: self_.get(0).wire2api(),
                message: self_.get(1).wire2api(),
                pub_key: self_.get(2).wire2api(),
            }
        }
    }

    impl Wire2Api<Option<Vec<u8>>> for Option<Box<[u8]>> {
        fn wire2api(self) -> Option<Vec<u8>> {
            self.map(Wire2Api::wire2api)
        }
    }
    impl Wire2Api<P256FromSeedReq> for JsValue {
        fn wire2api(self) -> P256FromSeedReq {
            let self_ = self.dyn_into::<JsArray>().unwrap();
            assert_eq!(
                self_.length(),
                1,
                "Expected 1 elements, got {}",
                self_.length()
            );
            P256FromSeedReq {
                seed: self_.get(0).wire2api(),
            }
        }
    }
    impl Wire2Api<P256ShareSecretReq> for JsValue {
        fn wire2api(self) -> P256ShareSecretReq {
            let self_ = self.dyn_into::<JsArray>().unwrap();
            assert_eq!(
                self_.length(),
                2,
                "Expected 2 elements, got {}",
                self_.length()
            );
            P256ShareSecretReq {
                seed: self_.get(0).wire2api(),
                public_key_raw_bytes: self_.get(1).wire2api(),
            }
        }
    }
    impl Wire2Api<P256SignWithSeedReq> for JsValue {
        fn wire2api(self) -> P256SignWithSeedReq {
            let self_ = self.dyn_into::<JsArray>().unwrap();
            assert_eq!(
                self_.length(),
                2,
                "Expected 2 elements, got {}",
                self_.length()
            );
            P256SignWithSeedReq {
                msg: self_.get(0).wire2api(),
                seed: self_.get(1).wire2api(),
            }
        }
    }
    impl Wire2Api<P256VerifyReq> for JsValue {
        fn wire2api(self) -> P256VerifyReq {
            let self_ = self.dyn_into::<JsArray>().unwrap();
            assert_eq!(
                self_.length(),
                3,
                "Expected 3 elements, got {}",
                self_.length()
            );
            P256VerifyReq {
                message_hash: self_.get(0).wire2api(),
                signature_bytes: self_.get(1).wire2api(),
                public_key_bytes: self_.get(2).wire2api(),
            }
        }
    }
    impl Wire2Api<PBKDFDeriveReq> for JsValue {
        fn wire2api(self) -> PBKDFDeriveReq {
            let self_ = self.dyn_into::<JsArray>().unwrap();
            assert_eq!(
                self_.length(),
                3,
                "Expected 3 elements, got {}",
                self_.length()
            );
            PBKDFDeriveReq {
                password: self_.get(0).wire2api(),
                salt: self_.get(1).wire2api(),
                c: self_.get(2).wire2api(),
            }
        }
    }
    impl Wire2Api<PhraseToSeedReq> for JsValue {
        fn wire2api(self) -> PhraseToSeedReq {
            let self_ = self.dyn_into::<JsArray>().unwrap();
            assert_eq!(
                self_.length(),
                2,
                "Expected 2 elements, got {}",
                self_.length()
            );
            PhraseToSeedReq {
                phrase: self_.get(0).wire2api(),
                password: self_.get(1).wire2api(),
            }
        }
    }
    impl Wire2Api<SchnorrFromSeedReq> for JsValue {
        fn wire2api(self) -> SchnorrFromSeedReq {
            let self_ = self.dyn_into::<JsArray>().unwrap();
            assert_eq!(
                self_.length(),
                1,
                "Expected 1 elements, got {}",
                self_.length()
            );
            SchnorrFromSeedReq {
                seed: self_.get(0).wire2api(),
            }
        }
    }
    impl Wire2Api<SchnorrSignWithSeedReq> for JsValue {
        fn wire2api(self) -> SchnorrSignWithSeedReq {
            let self_ = self.dyn_into::<JsArray>().unwrap();
            assert_eq!(
                self_.length(),
                3,
                "Expected 3 elements, got {}",
                self_.length()
            );
            SchnorrSignWithSeedReq {
                msg: self_.get(0).wire2api(),
                seed: self_.get(1).wire2api(),
                aux_rand: self_.get(2).wire2api(),
            }
        }
    }
    impl Wire2Api<SchnorrVerifyReq> for JsValue {
        fn wire2api(self) -> SchnorrVerifyReq {
            let self_ = self.dyn_into::<JsArray>().unwrap();
            assert_eq!(
                self_.length(),
                3,
                "Expected 3 elements, got {}",
                self_.length()
            );
            SchnorrVerifyReq {
                message_hash: self_.get(0).wire2api(),
                signature_bytes: self_.get(1).wire2api(),
                public_key_bytes: self_.get(2).wire2api(),
            }
        }
    }
    impl Wire2Api<ScriptDeriveReq> for JsValue {
        fn wire2api(self) -> ScriptDeriveReq {
            let self_ = self.dyn_into::<JsArray>().unwrap();
            assert_eq!(
                self_.length(),
                5,
                "Expected 5 elements, got {}",
                self_.length()
            );
            ScriptDeriveReq {
                password: self_.get(0).wire2api(),
                salt: self_.get(1).wire2api(),
                n: self_.get(2).wire2api(),
                p: self_.get(3).wire2api(),
                r: self_.get(4).wire2api(),
            }
        }
    }
    impl Wire2Api<Secp256k1FromSeedReq> for JsValue {
        fn wire2api(self) -> Secp256k1FromSeedReq {
            let self_ = self.dyn_into::<JsArray>().unwrap();
            assert_eq!(
                self_.length(),
                1,
                "Expected 1 elements, got {}",
                self_.length()
            );
            Secp256k1FromSeedReq {
                seed: self_.get(0).wire2api(),
            }
        }
    }
    impl Wire2Api<Secp256k1RecoverReq> for JsValue {
        fn wire2api(self) -> Secp256k1RecoverReq {
            let self_ = self.dyn_into::<JsArray>().unwrap();
            assert_eq!(
                self_.length(),
                3,
                "Expected 3 elements, got {}",
                self_.length()
            );
            Secp256k1RecoverReq {
                message_pre_hashed: self_.get(0).wire2api(),
                signature_bytes: self_.get(1).wire2api(),
                chain_id: self_.get(2).wire2api(),
            }
        }
    }
    impl Wire2Api<Secp256k1ShareSecretReq> for JsValue {
        fn wire2api(self) -> Secp256k1ShareSecretReq {
            let self_ = self.dyn_into::<JsArray>().unwrap();
            assert_eq!(
                self_.length(),
                2,
                "Expected 2 elements, got {}",
                self_.length()
            );
            Secp256k1ShareSecretReq {
                seed: self_.get(0).wire2api(),
                public_key_raw_bytes: self_.get(1).wire2api(),
            }
        }
    }
    impl Wire2Api<Secp256k1SignWithSeedReq> for JsValue {
        fn wire2api(self) -> Secp256k1SignWithSeedReq {
            let self_ = self.dyn_into::<JsArray>().unwrap();
            assert_eq!(
                self_.length(),
                2,
                "Expected 2 elements, got {}",
                self_.length()
            );
            Secp256k1SignWithSeedReq {
                msg: self_.get(0).wire2api(),
                seed: self_.get(1).wire2api(),
            }
        }
    }
    impl Wire2Api<Secp256k1VerifyReq> for JsValue {
        fn wire2api(self) -> Secp256k1VerifyReq {
            let self_ = self.dyn_into::<JsArray>().unwrap();
            assert_eq!(
                self_.length(),
                3,
                "Expected 3 elements, got {}",
                self_.length()
            );
            Secp256k1VerifyReq {
                message_hash: self_.get(0).wire2api(),
                signature_bytes: self_.get(1).wire2api(),
                public_key_bytes: self_.get(2).wire2api(),
            }
        }
    }
    impl Wire2Api<SeedToKeyReq> for JsValue {
        fn wire2api(self) -> SeedToKeyReq {
            let self_ = self.dyn_into::<JsArray>().unwrap();
            assert_eq!(
                self_.length(),
                2,
                "Expected 2 elements, got {}",
                self_.length()
            );
            SeedToKeyReq {
                seed: self_.get(0).wire2api(),
                path: self_.get(1).wire2api(),
            }
        }
    }

    impl Wire2Api<Vec<u8>> for Box<[u8]> {
        fn wire2api(self) -> Vec<u8> {
            self.into_vec()
        }
    }
    // Section: impl Wire2Api for JsValue

    impl Wire2Api<String> for JsValue {
        fn wire2api(self) -> String {
            self.as_string().expect("non-UTF-8 string, or not a string")
        }
    }
    impl Wire2Api<Option<u8>> for JsValue {
        fn wire2api(self) -> Option<u8> {
            (!self.is_undefined() && !self.is_null()).then(|| self.wire2api())
        }
    }
    impl Wire2Api<Option<Vec<u8>>> for JsValue {
        fn wire2api(self) -> Option<Vec<u8>> {
            (!self.is_undefined() && !self.is_null()).then(|| self.wire2api())
        }
    }
    impl Wire2Api<u32> for JsValue {
        fn wire2api(self) -> u32 {
            self.unchecked_into_f64() as _
        }
    }
    impl Wire2Api<u8> for JsValue {
        fn wire2api(self) -> u8 {
            self.unchecked_into_f64() as _
        }
    }
    impl Wire2Api<Vec<u8>> for JsValue {
        fn wire2api(self) -> Vec<u8> {
            self.unchecked_into::<js_sys::Uint8Array>().to_vec().into()
        }
    }
}
#[cfg(target_family = "wasm")]
pub use web::*;

#[cfg(not(target_family = "wasm"))]
mod io {
    use super::*;
    // Section: wire functions

    #[no_mangle]
    pub extern "C" fn wire_mnemonic_phrase_to_seed(port_: i64, req: *mut wire_PhraseToSeedReq) {
        wire_mnemonic_phrase_to_seed_impl(port_, req)
    }

    #[no_mangle]
    pub extern "C" fn wire_mnemonic_seed_to_key(port_: i64, req: *mut wire_SeedToKeyReq) {
        wire_mnemonic_seed_to_key_impl(port_, req)
    }

    #[no_mangle]
    pub extern "C" fn wire_bls_init(port_: i64) {
        wire_bls_init_impl(port_)
    }

    #[no_mangle]
    pub extern "C" fn wire_bls_verify(port_: i64, req: *mut wire_BLSVerifyReq) {
        wire_bls_verify_impl(port_, req)
    }

    #[no_mangle]
    pub extern "C" fn wire_ed25519_from_seed(port_: i64, req: *mut wire_ED25519FromSeedReq) {
        wire_ed25519_from_seed_impl(port_, req)
    }

    #[no_mangle]
    pub extern "C" fn wire_ed25519_sign(port_: i64, req: *mut wire_ED25519SignReq) {
        wire_ed25519_sign_impl(port_, req)
    }

    #[no_mangle]
    pub extern "C" fn wire_ed25519_verify(port_: i64, req: *mut wire_ED25519VerifyReq) {
        wire_ed25519_verify_impl(port_, req)
    }

    #[no_mangle]
    pub extern "C" fn wire_secp256k1_from_seed(port_: i64, req: *mut wire_Secp256k1FromSeedReq) {
        wire_secp256k1_from_seed_impl(port_, req)
    }

    #[no_mangle]
    pub extern "C" fn wire_secp256k1_sign(port_: i64, req: *mut wire_Secp256k1SignWithSeedReq) {
        wire_secp256k1_sign_impl(port_, req)
    }

    #[no_mangle]
    pub extern "C" fn wire_secp256k1_sign_recoverable(
        port_: i64,
        req: *mut wire_Secp256k1SignWithSeedReq,
    ) {
        wire_secp256k1_sign_recoverable_impl(port_, req)
    }

    #[no_mangle]
    pub extern "C" fn wire_secp256k1_verify(port_: i64, req: *mut wire_Secp256k1VerifyReq) {
        wire_secp256k1_verify_impl(port_, req)
    }

    #[no_mangle]
    pub extern "C" fn wire_secp256k1_get_shared_secret(
        port_: i64,
        req: *mut wire_Secp256k1ShareSecretReq,
    ) {
        wire_secp256k1_get_shared_secret_impl(port_, req)
    }

    #[no_mangle]
    pub extern "C" fn wire_secp256k1_recover(port_: i64, req: *mut wire_Secp256k1RecoverReq) {
        wire_secp256k1_recover_impl(port_, req)
    }

    #[no_mangle]
    pub extern "C" fn wire_p256_from_seed(port_: i64, req: *mut wire_P256FromSeedReq) {
        wire_p256_from_seed_impl(port_, req)
    }

    #[no_mangle]
    pub extern "C" fn wire_p256_sign(port_: i64, req: *mut wire_P256SignWithSeedReq) {
        wire_p256_sign_impl(port_, req)
    }

    #[no_mangle]
    pub extern "C" fn wire_p256_verify(port_: i64, req: *mut wire_P256VerifyReq) {
        wire_p256_verify_impl(port_, req)
    }

    #[no_mangle]
    pub extern "C" fn wire_p256_get_shared_secret(port_: i64, req: *mut wire_P256ShareSecretReq) {
        wire_p256_get_shared_secret_impl(port_, req)
    }

    #[no_mangle]
    pub extern "C" fn wire_schnorr_from_seed(port_: i64, req: *mut wire_SchnorrFromSeedReq) {
        wire_schnorr_from_seed_impl(port_, req)
    }

    #[no_mangle]
    pub extern "C" fn wire_schnorr_sign(port_: i64, req: *mut wire_SchnorrSignWithSeedReq) {
        wire_schnorr_sign_impl(port_, req)
    }

    #[no_mangle]
    pub extern "C" fn wire_schnorr_verify(port_: i64, req: *mut wire_SchnorrVerifyReq) {
        wire_schnorr_verify_impl(port_, req)
    }

    #[no_mangle]
    pub extern "C" fn wire_aes_128_ctr_encrypt(port_: i64, req: *mut wire_AesEncryptReq) {
        wire_aes_128_ctr_encrypt_impl(port_, req)
    }

    #[no_mangle]
    pub extern "C" fn wire_aes_128_ctr_decrypt(port_: i64, req: *mut wire_AesDecryptReq) {
        wire_aes_128_ctr_decrypt_impl(port_, req)
    }

    #[no_mangle]
    pub extern "C" fn wire_aes_256_cbc_encrypt(port_: i64, req: *mut wire_AesEncryptReq) {
        wire_aes_256_cbc_encrypt_impl(port_, req)
    }

    #[no_mangle]
    pub extern "C" fn wire_aes_256_cbc_decrypt(port_: i64, req: *mut wire_AesDecryptReq) {
        wire_aes_256_cbc_decrypt_impl(port_, req)
    }

    #[no_mangle]
    pub extern "C" fn wire_aes_256_gcm_encrypt(port_: i64, req: *mut wire_AesEncryptReq) {
        wire_aes_256_gcm_encrypt_impl(port_, req)
    }

    #[no_mangle]
    pub extern "C" fn wire_aes_256_gcm_decrypt(port_: i64, req: *mut wire_AesDecryptReq) {
        wire_aes_256_gcm_decrypt_impl(port_, req)
    }

    #[no_mangle]
    pub extern "C" fn wire_pbkdf2_derive_key(port_: i64, req: *mut wire_PBKDFDeriveReq) {
        wire_pbkdf2_derive_key_impl(port_, req)
    }

    #[no_mangle]
    pub extern "C" fn wire_scrypt_derive_key(port_: i64, req: *mut wire_ScriptDeriveReq) {
        wire_scrypt_derive_key_impl(port_, req)
    }

    // Section: allocate functions

    #[no_mangle]
    pub extern "C" fn new_box_autoadd_aes_decrypt_req_0() -> *mut wire_AesDecryptReq {
        support::new_leak_box_ptr(wire_AesDecryptReq::new_with_null_ptr())
    }

    #[no_mangle]
    pub extern "C" fn new_box_autoadd_aes_encrypt_req_0() -> *mut wire_AesEncryptReq {
        support::new_leak_box_ptr(wire_AesEncryptReq::new_with_null_ptr())
    }

    #[no_mangle]
    pub extern "C" fn new_box_autoadd_bls_verify_req_0() -> *mut wire_BLSVerifyReq {
        support::new_leak_box_ptr(wire_BLSVerifyReq::new_with_null_ptr())
    }

    #[no_mangle]
    pub extern "C" fn new_box_autoadd_ed_25519_from_seed_req_0() -> *mut wire_ED25519FromSeedReq {
        support::new_leak_box_ptr(wire_ED25519FromSeedReq::new_with_null_ptr())
    }

    #[no_mangle]
    pub extern "C" fn new_box_autoadd_ed_25519_sign_req_0() -> *mut wire_ED25519SignReq {
        support::new_leak_box_ptr(wire_ED25519SignReq::new_with_null_ptr())
    }

    #[no_mangle]
    pub extern "C" fn new_box_autoadd_ed_25519_verify_req_0() -> *mut wire_ED25519VerifyReq {
        support::new_leak_box_ptr(wire_ED25519VerifyReq::new_with_null_ptr())
    }

    #[no_mangle]
    pub extern "C" fn new_box_autoadd_p_256_from_seed_req_0() -> *mut wire_P256FromSeedReq {
        support::new_leak_box_ptr(wire_P256FromSeedReq::new_with_null_ptr())
    }

    #[no_mangle]
    pub extern "C" fn new_box_autoadd_p_256_share_secret_req_0() -> *mut wire_P256ShareSecretReq {
        support::new_leak_box_ptr(wire_P256ShareSecretReq::new_with_null_ptr())
    }

    #[no_mangle]
    pub extern "C" fn new_box_autoadd_p_256_sign_with_seed_req_0() -> *mut wire_P256SignWithSeedReq
    {
        support::new_leak_box_ptr(wire_P256SignWithSeedReq::new_with_null_ptr())
    }

    #[no_mangle]
    pub extern "C" fn new_box_autoadd_p_256_verify_req_0() -> *mut wire_P256VerifyReq {
        support::new_leak_box_ptr(wire_P256VerifyReq::new_with_null_ptr())
    }

    #[no_mangle]
    pub extern "C" fn new_box_autoadd_pbkdf_derive_req_0() -> *mut wire_PBKDFDeriveReq {
        support::new_leak_box_ptr(wire_PBKDFDeriveReq::new_with_null_ptr())
    }

    #[no_mangle]
    pub extern "C" fn new_box_autoadd_phrase_to_seed_req_0() -> *mut wire_PhraseToSeedReq {
        support::new_leak_box_ptr(wire_PhraseToSeedReq::new_with_null_ptr())
    }

    #[no_mangle]
    pub extern "C" fn new_box_autoadd_schnorr_from_seed_req_0() -> *mut wire_SchnorrFromSeedReq {
        support::new_leak_box_ptr(wire_SchnorrFromSeedReq::new_with_null_ptr())
    }

    #[no_mangle]
    pub extern "C" fn new_box_autoadd_schnorr_sign_with_seed_req_0(
    ) -> *mut wire_SchnorrSignWithSeedReq {
        support::new_leak_box_ptr(wire_SchnorrSignWithSeedReq::new_with_null_ptr())
    }

    #[no_mangle]
    pub extern "C" fn new_box_autoadd_schnorr_verify_req_0() -> *mut wire_SchnorrVerifyReq {
        support::new_leak_box_ptr(wire_SchnorrVerifyReq::new_with_null_ptr())
    }

    #[no_mangle]
    pub extern "C" fn new_box_autoadd_script_derive_req_0() -> *mut wire_ScriptDeriveReq {
        support::new_leak_box_ptr(wire_ScriptDeriveReq::new_with_null_ptr())
    }

    #[no_mangle]
    pub extern "C" fn new_box_autoadd_secp_256_k_1_from_seed_req_0(
    ) -> *mut wire_Secp256k1FromSeedReq {
        support::new_leak_box_ptr(wire_Secp256k1FromSeedReq::new_with_null_ptr())
    }

    #[no_mangle]
    pub extern "C" fn new_box_autoadd_secp_256_k_1_recover_req_0() -> *mut wire_Secp256k1RecoverReq
    {
        support::new_leak_box_ptr(wire_Secp256k1RecoverReq::new_with_null_ptr())
    }

    #[no_mangle]
    pub extern "C" fn new_box_autoadd_secp_256_k_1_share_secret_req_0(
    ) -> *mut wire_Secp256k1ShareSecretReq {
        support::new_leak_box_ptr(wire_Secp256k1ShareSecretReq::new_with_null_ptr())
    }

    #[no_mangle]
    pub extern "C" fn new_box_autoadd_secp_256_k_1_sign_with_seed_req_0(
    ) -> *mut wire_Secp256k1SignWithSeedReq {
        support::new_leak_box_ptr(wire_Secp256k1SignWithSeedReq::new_with_null_ptr())
    }

    #[no_mangle]
    pub extern "C" fn new_box_autoadd_secp_256_k_1_verify_req_0() -> *mut wire_Secp256k1VerifyReq {
        support::new_leak_box_ptr(wire_Secp256k1VerifyReq::new_with_null_ptr())
    }

    #[no_mangle]
    pub extern "C" fn new_box_autoadd_seed_to_key_req_0() -> *mut wire_SeedToKeyReq {
        support::new_leak_box_ptr(wire_SeedToKeyReq::new_with_null_ptr())
    }

    #[no_mangle]
    pub extern "C" fn new_box_autoadd_u8_0(value: u8) -> *mut u8 {
        support::new_leak_box_ptr(value)
    }

    #[no_mangle]
    pub extern "C" fn new_uint_8_list_0(len: i32) -> *mut wire_uint_8_list {
        let ans = wire_uint_8_list {
            ptr: support::new_leak_vec_ptr(Default::default(), len),
            len,
        };
        support::new_leak_box_ptr(ans)
    }

    // Section: related functions

    // Section: impl Wire2Api

    impl Wire2Api<String> for *mut wire_uint_8_list {
        fn wire2api(self) -> String {
            let vec: Vec<u8> = self.wire2api();
            String::from_utf8_lossy(&vec).into_owned()
        }
    }
    impl Wire2Api<AesDecryptReq> for wire_AesDecryptReq {
        fn wire2api(self) -> AesDecryptReq {
            AesDecryptReq {
                key: self.key.wire2api(),
                iv: self.iv.wire2api(),
                cipher_text: self.cipher_text.wire2api(),
            }
        }
    }
    impl Wire2Api<AesEncryptReq> for wire_AesEncryptReq {
        fn wire2api(self) -> AesEncryptReq {
            AesEncryptReq {
                key: self.key.wire2api(),
                iv: self.iv.wire2api(),
                message: self.message.wire2api(),
            }
        }
    }
    impl Wire2Api<BLSVerifyReq> for wire_BLSVerifyReq {
        fn wire2api(self) -> BLSVerifyReq {
            BLSVerifyReq {
                signature: self.signature.wire2api(),
                message: self.message.wire2api(),
                public_key: self.public_key.wire2api(),
            }
        }
    }
    impl Wire2Api<AesDecryptReq> for *mut wire_AesDecryptReq {
        fn wire2api(self) -> AesDecryptReq {
            let wrap = unsafe { support::box_from_leak_ptr(self) };
            Wire2Api::<AesDecryptReq>::wire2api(*wrap).into()
        }
    }
    impl Wire2Api<AesEncryptReq> for *mut wire_AesEncryptReq {
        fn wire2api(self) -> AesEncryptReq {
            let wrap = unsafe { support::box_from_leak_ptr(self) };
            Wire2Api::<AesEncryptReq>::wire2api(*wrap).into()
        }
    }
    impl Wire2Api<BLSVerifyReq> for *mut wire_BLSVerifyReq {
        fn wire2api(self) -> BLSVerifyReq {
            let wrap = unsafe { support::box_from_leak_ptr(self) };
            Wire2Api::<BLSVerifyReq>::wire2api(*wrap).into()
        }
    }
    impl Wire2Api<ED25519FromSeedReq> for *mut wire_ED25519FromSeedReq {
        fn wire2api(self) -> ED25519FromSeedReq {
            let wrap = unsafe { support::box_from_leak_ptr(self) };
            Wire2Api::<ED25519FromSeedReq>::wire2api(*wrap).into()
        }
    }
    impl Wire2Api<ED25519SignReq> for *mut wire_ED25519SignReq {
        fn wire2api(self) -> ED25519SignReq {
            let wrap = unsafe { support::box_from_leak_ptr(self) };
            Wire2Api::<ED25519SignReq>::wire2api(*wrap).into()
        }
    }
    impl Wire2Api<ED25519VerifyReq> for *mut wire_ED25519VerifyReq {
        fn wire2api(self) -> ED25519VerifyReq {
            let wrap = unsafe { support::box_from_leak_ptr(self) };
            Wire2Api::<ED25519VerifyReq>::wire2api(*wrap).into()
        }
    }
    impl Wire2Api<P256FromSeedReq> for *mut wire_P256FromSeedReq {
        fn wire2api(self) -> P256FromSeedReq {
            let wrap = unsafe { support::box_from_leak_ptr(self) };
            Wire2Api::<P256FromSeedReq>::wire2api(*wrap).into()
        }
    }
    impl Wire2Api<P256ShareSecretReq> for *mut wire_P256ShareSecretReq {
        fn wire2api(self) -> P256ShareSecretReq {
            let wrap = unsafe { support::box_from_leak_ptr(self) };
            Wire2Api::<P256ShareSecretReq>::wire2api(*wrap).into()
        }
    }
    impl Wire2Api<P256SignWithSeedReq> for *mut wire_P256SignWithSeedReq {
        fn wire2api(self) -> P256SignWithSeedReq {
            let wrap = unsafe { support::box_from_leak_ptr(self) };
            Wire2Api::<P256SignWithSeedReq>::wire2api(*wrap).into()
        }
    }
    impl Wire2Api<P256VerifyReq> for *mut wire_P256VerifyReq {
        fn wire2api(self) -> P256VerifyReq {
            let wrap = unsafe { support::box_from_leak_ptr(self) };
            Wire2Api::<P256VerifyReq>::wire2api(*wrap).into()
        }
    }
    impl Wire2Api<PBKDFDeriveReq> for *mut wire_PBKDFDeriveReq {
        fn wire2api(self) -> PBKDFDeriveReq {
            let wrap = unsafe { support::box_from_leak_ptr(self) };
            Wire2Api::<PBKDFDeriveReq>::wire2api(*wrap).into()
        }
    }
    impl Wire2Api<PhraseToSeedReq> for *mut wire_PhraseToSeedReq {
        fn wire2api(self) -> PhraseToSeedReq {
            let wrap = unsafe { support::box_from_leak_ptr(self) };
            Wire2Api::<PhraseToSeedReq>::wire2api(*wrap).into()
        }
    }
    impl Wire2Api<SchnorrFromSeedReq> for *mut wire_SchnorrFromSeedReq {
        fn wire2api(self) -> SchnorrFromSeedReq {
            let wrap = unsafe { support::box_from_leak_ptr(self) };
            Wire2Api::<SchnorrFromSeedReq>::wire2api(*wrap).into()
        }
    }
    impl Wire2Api<SchnorrSignWithSeedReq> for *mut wire_SchnorrSignWithSeedReq {
        fn wire2api(self) -> SchnorrSignWithSeedReq {
            let wrap = unsafe { support::box_from_leak_ptr(self) };
            Wire2Api::<SchnorrSignWithSeedReq>::wire2api(*wrap).into()
        }
    }
    impl Wire2Api<SchnorrVerifyReq> for *mut wire_SchnorrVerifyReq {
        fn wire2api(self) -> SchnorrVerifyReq {
            let wrap = unsafe { support::box_from_leak_ptr(self) };
            Wire2Api::<SchnorrVerifyReq>::wire2api(*wrap).into()
        }
    }
    impl Wire2Api<ScriptDeriveReq> for *mut wire_ScriptDeriveReq {
        fn wire2api(self) -> ScriptDeriveReq {
            let wrap = unsafe { support::box_from_leak_ptr(self) };
            Wire2Api::<ScriptDeriveReq>::wire2api(*wrap).into()
        }
    }
    impl Wire2Api<Secp256k1FromSeedReq> for *mut wire_Secp256k1FromSeedReq {
        fn wire2api(self) -> Secp256k1FromSeedReq {
            let wrap = unsafe { support::box_from_leak_ptr(self) };
            Wire2Api::<Secp256k1FromSeedReq>::wire2api(*wrap).into()
        }
    }
    impl Wire2Api<Secp256k1RecoverReq> for *mut wire_Secp256k1RecoverReq {
        fn wire2api(self) -> Secp256k1RecoverReq {
            let wrap = unsafe { support::box_from_leak_ptr(self) };
            Wire2Api::<Secp256k1RecoverReq>::wire2api(*wrap).into()
        }
    }
    impl Wire2Api<Secp256k1ShareSecretReq> for *mut wire_Secp256k1ShareSecretReq {
        fn wire2api(self) -> Secp256k1ShareSecretReq {
            let wrap = unsafe { support::box_from_leak_ptr(self) };
            Wire2Api::<Secp256k1ShareSecretReq>::wire2api(*wrap).into()
        }
    }
    impl Wire2Api<Secp256k1SignWithSeedReq> for *mut wire_Secp256k1SignWithSeedReq {
        fn wire2api(self) -> Secp256k1SignWithSeedReq {
            let wrap = unsafe { support::box_from_leak_ptr(self) };
            Wire2Api::<Secp256k1SignWithSeedReq>::wire2api(*wrap).into()
        }
    }
    impl Wire2Api<Secp256k1VerifyReq> for *mut wire_Secp256k1VerifyReq {
        fn wire2api(self) -> Secp256k1VerifyReq {
            let wrap = unsafe { support::box_from_leak_ptr(self) };
            Wire2Api::<Secp256k1VerifyReq>::wire2api(*wrap).into()
        }
    }
    impl Wire2Api<SeedToKeyReq> for *mut wire_SeedToKeyReq {
        fn wire2api(self) -> SeedToKeyReq {
            let wrap = unsafe { support::box_from_leak_ptr(self) };
            Wire2Api::<SeedToKeyReq>::wire2api(*wrap).into()
        }
    }
    impl Wire2Api<u8> for *mut u8 {
        fn wire2api(self) -> u8 {
            unsafe { *support::box_from_leak_ptr(self) }
        }
    }
    impl Wire2Api<ED25519FromSeedReq> for wire_ED25519FromSeedReq {
        fn wire2api(self) -> ED25519FromSeedReq {
            ED25519FromSeedReq {
                seed: self.seed.wire2api(),
            }
        }
    }
    impl Wire2Api<ED25519SignReq> for wire_ED25519SignReq {
        fn wire2api(self) -> ED25519SignReq {
            ED25519SignReq {
                seed: self.seed.wire2api(),
                message: self.message.wire2api(),
            }
        }
    }
    impl Wire2Api<ED25519VerifyReq> for wire_ED25519VerifyReq {
        fn wire2api(self) -> ED25519VerifyReq {
            ED25519VerifyReq {
                sig: self.sig.wire2api(),
                message: self.message.wire2api(),
                pub_key: self.pub_key.wire2api(),
            }
        }
    }

    impl Wire2Api<P256FromSeedReq> for wire_P256FromSeedReq {
        fn wire2api(self) -> P256FromSeedReq {
            P256FromSeedReq {
                seed: self.seed.wire2api(),
            }
        }
    }
    impl Wire2Api<P256ShareSecretReq> for wire_P256ShareSecretReq {
        fn wire2api(self) -> P256ShareSecretReq {
            P256ShareSecretReq {
                seed: self.seed.wire2api(),
                public_key_raw_bytes: self.public_key_raw_bytes.wire2api(),
            }
        }
    }
    impl Wire2Api<P256SignWithSeedReq> for wire_P256SignWithSeedReq {
        fn wire2api(self) -> P256SignWithSeedReq {
            P256SignWithSeedReq {
                msg: self.msg.wire2api(),
                seed: self.seed.wire2api(),
            }
        }
    }
    impl Wire2Api<P256VerifyReq> for wire_P256VerifyReq {
        fn wire2api(self) -> P256VerifyReq {
            P256VerifyReq {
                message_hash: self.message_hash.wire2api(),
                signature_bytes: self.signature_bytes.wire2api(),
                public_key_bytes: self.public_key_bytes.wire2api(),
            }
        }
    }
    impl Wire2Api<PBKDFDeriveReq> for wire_PBKDFDeriveReq {
        fn wire2api(self) -> PBKDFDeriveReq {
            PBKDFDeriveReq {
                password: self.password.wire2api(),
                salt: self.salt.wire2api(),
                c: self.c.wire2api(),
            }
        }
    }
    impl Wire2Api<PhraseToSeedReq> for wire_PhraseToSeedReq {
        fn wire2api(self) -> PhraseToSeedReq {
            PhraseToSeedReq {
                phrase: self.phrase.wire2api(),
                password: self.password.wire2api(),
            }
        }
    }
    impl Wire2Api<SchnorrFromSeedReq> for wire_SchnorrFromSeedReq {
        fn wire2api(self) -> SchnorrFromSeedReq {
            SchnorrFromSeedReq {
                seed: self.seed.wire2api(),
            }
        }
    }
    impl Wire2Api<SchnorrSignWithSeedReq> for wire_SchnorrSignWithSeedReq {
        fn wire2api(self) -> SchnorrSignWithSeedReq {
            SchnorrSignWithSeedReq {
                msg: self.msg.wire2api(),
                seed: self.seed.wire2api(),
                aux_rand: self.aux_rand.wire2api(),
            }
        }
    }
    impl Wire2Api<SchnorrVerifyReq> for wire_SchnorrVerifyReq {
        fn wire2api(self) -> SchnorrVerifyReq {
            SchnorrVerifyReq {
                message_hash: self.message_hash.wire2api(),
                signature_bytes: self.signature_bytes.wire2api(),
                public_key_bytes: self.public_key_bytes.wire2api(),
            }
        }
    }
    impl Wire2Api<ScriptDeriveReq> for wire_ScriptDeriveReq {
        fn wire2api(self) -> ScriptDeriveReq {
            ScriptDeriveReq {
                password: self.password.wire2api(),
                salt: self.salt.wire2api(),
                n: self.n.wire2api(),
                p: self.p.wire2api(),
                r: self.r.wire2api(),
            }
        }
    }
    impl Wire2Api<Secp256k1FromSeedReq> for wire_Secp256k1FromSeedReq {
        fn wire2api(self) -> Secp256k1FromSeedReq {
            Secp256k1FromSeedReq {
                seed: self.seed.wire2api(),
            }
        }
    }
    impl Wire2Api<Secp256k1RecoverReq> for wire_Secp256k1RecoverReq {
        fn wire2api(self) -> Secp256k1RecoverReq {
            Secp256k1RecoverReq {
                message_pre_hashed: self.message_pre_hashed.wire2api(),
                signature_bytes: self.signature_bytes.wire2api(),
                chain_id: self.chain_id.wire2api(),
            }
        }
    }
    impl Wire2Api<Secp256k1ShareSecretReq> for wire_Secp256k1ShareSecretReq {
        fn wire2api(self) -> Secp256k1ShareSecretReq {
            Secp256k1ShareSecretReq {
                seed: self.seed.wire2api(),
                public_key_raw_bytes: self.public_key_raw_bytes.wire2api(),
            }
        }
    }
    impl Wire2Api<Secp256k1SignWithSeedReq> for wire_Secp256k1SignWithSeedReq {
        fn wire2api(self) -> Secp256k1SignWithSeedReq {
            Secp256k1SignWithSeedReq {
                msg: self.msg.wire2api(),
                seed: self.seed.wire2api(),
            }
        }
    }
    impl Wire2Api<Secp256k1VerifyReq> for wire_Secp256k1VerifyReq {
        fn wire2api(self) -> Secp256k1VerifyReq {
            Secp256k1VerifyReq {
                message_hash: self.message_hash.wire2api(),
                signature_bytes: self.signature_bytes.wire2api(),
                public_key_bytes: self.public_key_bytes.wire2api(),
            }
        }
    }
    impl Wire2Api<SeedToKeyReq> for wire_SeedToKeyReq {
        fn wire2api(self) -> SeedToKeyReq {
            SeedToKeyReq {
                seed: self.seed.wire2api(),
                path: self.path.wire2api(),
            }
        }
    }

    impl Wire2Api<Vec<u8>> for *mut wire_uint_8_list {
        fn wire2api(self) -> Vec<u8> {
            unsafe {
                let wrap = support::box_from_leak_ptr(self);
                support::vec_from_leak_ptr(wrap.ptr, wrap.len)
            }
        }
    }
    // Section: wire structs

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_AesDecryptReq {
        key: *mut wire_uint_8_list,
        iv: *mut wire_uint_8_list,
        cipher_text: *mut wire_uint_8_list,
    }

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_AesEncryptReq {
        key: *mut wire_uint_8_list,
        iv: *mut wire_uint_8_list,
        message: *mut wire_uint_8_list,
    }

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_BLSVerifyReq {
        signature: *mut wire_uint_8_list,
        message: *mut wire_uint_8_list,
        public_key: *mut wire_uint_8_list,
    }

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_ED25519FromSeedReq {
        seed: *mut wire_uint_8_list,
    }

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_ED25519SignReq {
        seed: *mut wire_uint_8_list,
        message: *mut wire_uint_8_list,
    }

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_ED25519VerifyReq {
        sig: *mut wire_uint_8_list,
        message: *mut wire_uint_8_list,
        pub_key: *mut wire_uint_8_list,
    }

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_P256FromSeedReq {
        seed: *mut wire_uint_8_list,
    }

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_P256ShareSecretReq {
        seed: *mut wire_uint_8_list,
        public_key_raw_bytes: *mut wire_uint_8_list,
    }

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_P256SignWithSeedReq {
        msg: *mut wire_uint_8_list,
        seed: *mut wire_uint_8_list,
    }

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_P256VerifyReq {
        message_hash: *mut wire_uint_8_list,
        signature_bytes: *mut wire_uint_8_list,
        public_key_bytes: *mut wire_uint_8_list,
    }

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_PBKDFDeriveReq {
        password: *mut wire_uint_8_list,
        salt: *mut wire_uint_8_list,
        c: u32,
    }

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_PhraseToSeedReq {
        phrase: *mut wire_uint_8_list,
        password: *mut wire_uint_8_list,
    }

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_SchnorrFromSeedReq {
        seed: *mut wire_uint_8_list,
    }

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_SchnorrSignWithSeedReq {
        msg: *mut wire_uint_8_list,
        seed: *mut wire_uint_8_list,
        aux_rand: *mut wire_uint_8_list,
    }

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_SchnorrVerifyReq {
        message_hash: *mut wire_uint_8_list,
        signature_bytes: *mut wire_uint_8_list,
        public_key_bytes: *mut wire_uint_8_list,
    }

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_ScriptDeriveReq {
        password: *mut wire_uint_8_list,
        salt: *mut wire_uint_8_list,
        n: u32,
        p: u32,
        r: u32,
    }

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_Secp256k1FromSeedReq {
        seed: *mut wire_uint_8_list,
    }

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_Secp256k1RecoverReq {
        message_pre_hashed: *mut wire_uint_8_list,
        signature_bytes: *mut wire_uint_8_list,
        chain_id: *mut u8,
    }

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_Secp256k1ShareSecretReq {
        seed: *mut wire_uint_8_list,
        public_key_raw_bytes: *mut wire_uint_8_list,
    }

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_Secp256k1SignWithSeedReq {
        msg: *mut wire_uint_8_list,
        seed: *mut wire_uint_8_list,
    }

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_Secp256k1VerifyReq {
        message_hash: *mut wire_uint_8_list,
        signature_bytes: *mut wire_uint_8_list,
        public_key_bytes: *mut wire_uint_8_list,
    }

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_SeedToKeyReq {
        seed: *mut wire_uint_8_list,
        path: *mut wire_uint_8_list,
    }

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_uint_8_list {
        ptr: *mut u8,
        len: i32,
    }

    // Section: impl NewWithNullPtr

    pub trait NewWithNullPtr {
        fn new_with_null_ptr() -> Self;
    }

    impl<T> NewWithNullPtr for *mut T {
        fn new_with_null_ptr() -> Self {
            std::ptr::null_mut()
        }
    }

    impl NewWithNullPtr for wire_AesDecryptReq {
        fn new_with_null_ptr() -> Self {
            Self {
                key: core::ptr::null_mut(),
                iv: core::ptr::null_mut(),
                cipher_text: core::ptr::null_mut(),
            }
        }
    }

    impl Default for wire_AesDecryptReq {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }

    impl NewWithNullPtr for wire_AesEncryptReq {
        fn new_with_null_ptr() -> Self {
            Self {
                key: core::ptr::null_mut(),
                iv: core::ptr::null_mut(),
                message: core::ptr::null_mut(),
            }
        }
    }

    impl Default for wire_AesEncryptReq {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }

    impl NewWithNullPtr for wire_BLSVerifyReq {
        fn new_with_null_ptr() -> Self {
            Self {
                signature: core::ptr::null_mut(),
                message: core::ptr::null_mut(),
                public_key: core::ptr::null_mut(),
            }
        }
    }

    impl Default for wire_BLSVerifyReq {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }

    impl NewWithNullPtr for wire_ED25519FromSeedReq {
        fn new_with_null_ptr() -> Self {
            Self {
                seed: core::ptr::null_mut(),
            }
        }
    }

    impl Default for wire_ED25519FromSeedReq {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }

    impl NewWithNullPtr for wire_ED25519SignReq {
        fn new_with_null_ptr() -> Self {
            Self {
                seed: core::ptr::null_mut(),
                message: core::ptr::null_mut(),
            }
        }
    }

    impl Default for wire_ED25519SignReq {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }

    impl NewWithNullPtr for wire_ED25519VerifyReq {
        fn new_with_null_ptr() -> Self {
            Self {
                sig: core::ptr::null_mut(),
                message: core::ptr::null_mut(),
                pub_key: core::ptr::null_mut(),
            }
        }
    }

    impl Default for wire_ED25519VerifyReq {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }

    impl NewWithNullPtr for wire_P256FromSeedReq {
        fn new_with_null_ptr() -> Self {
            Self {
                seed: core::ptr::null_mut(),
            }
        }
    }

    impl Default for wire_P256FromSeedReq {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }

    impl NewWithNullPtr for wire_P256ShareSecretReq {
        fn new_with_null_ptr() -> Self {
            Self {
                seed: core::ptr::null_mut(),
                public_key_raw_bytes: core::ptr::null_mut(),
            }
        }
    }

    impl Default for wire_P256ShareSecretReq {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }

    impl NewWithNullPtr for wire_P256SignWithSeedReq {
        fn new_with_null_ptr() -> Self {
            Self {
                msg: core::ptr::null_mut(),
                seed: core::ptr::null_mut(),
            }
        }
    }

    impl Default for wire_P256SignWithSeedReq {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }

    impl NewWithNullPtr for wire_P256VerifyReq {
        fn new_with_null_ptr() -> Self {
            Self {
                message_hash: core::ptr::null_mut(),
                signature_bytes: core::ptr::null_mut(),
                public_key_bytes: core::ptr::null_mut(),
            }
        }
    }

    impl Default for wire_P256VerifyReq {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }

    impl NewWithNullPtr for wire_PBKDFDeriveReq {
        fn new_with_null_ptr() -> Self {
            Self {
                password: core::ptr::null_mut(),
                salt: core::ptr::null_mut(),
                c: Default::default(),
            }
        }
    }

    impl Default for wire_PBKDFDeriveReq {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }

    impl NewWithNullPtr for wire_PhraseToSeedReq {
        fn new_with_null_ptr() -> Self {
            Self {
                phrase: core::ptr::null_mut(),
                password: core::ptr::null_mut(),
            }
        }
    }

    impl Default for wire_PhraseToSeedReq {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }

    impl NewWithNullPtr for wire_SchnorrFromSeedReq {
        fn new_with_null_ptr() -> Self {
            Self {
                seed: core::ptr::null_mut(),
            }
        }
    }

    impl Default for wire_SchnorrFromSeedReq {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }

    impl NewWithNullPtr for wire_SchnorrSignWithSeedReq {
        fn new_with_null_ptr() -> Self {
            Self {
                msg: core::ptr::null_mut(),
                seed: core::ptr::null_mut(),
                aux_rand: core::ptr::null_mut(),
            }
        }
    }

    impl Default for wire_SchnorrSignWithSeedReq {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }

    impl NewWithNullPtr for wire_SchnorrVerifyReq {
        fn new_with_null_ptr() -> Self {
            Self {
                message_hash: core::ptr::null_mut(),
                signature_bytes: core::ptr::null_mut(),
                public_key_bytes: core::ptr::null_mut(),
            }
        }
    }

    impl Default for wire_SchnorrVerifyReq {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }

    impl NewWithNullPtr for wire_ScriptDeriveReq {
        fn new_with_null_ptr() -> Self {
            Self {
                password: core::ptr::null_mut(),
                salt: core::ptr::null_mut(),
                n: Default::default(),
                p: Default::default(),
                r: Default::default(),
            }
        }
    }

    impl Default for wire_ScriptDeriveReq {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }

    impl NewWithNullPtr for wire_Secp256k1FromSeedReq {
        fn new_with_null_ptr() -> Self {
            Self {
                seed: core::ptr::null_mut(),
            }
        }
    }

    impl Default for wire_Secp256k1FromSeedReq {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }

    impl NewWithNullPtr for wire_Secp256k1RecoverReq {
        fn new_with_null_ptr() -> Self {
            Self {
                message_pre_hashed: core::ptr::null_mut(),
                signature_bytes: core::ptr::null_mut(),
                chain_id: core::ptr::null_mut(),
            }
        }
    }

    impl Default for wire_Secp256k1RecoverReq {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }

    impl NewWithNullPtr for wire_Secp256k1ShareSecretReq {
        fn new_with_null_ptr() -> Self {
            Self {
                seed: core::ptr::null_mut(),
                public_key_raw_bytes: core::ptr::null_mut(),
            }
        }
    }

    impl Default for wire_Secp256k1ShareSecretReq {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }

    impl NewWithNullPtr for wire_Secp256k1SignWithSeedReq {
        fn new_with_null_ptr() -> Self {
            Self {
                msg: core::ptr::null_mut(),
                seed: core::ptr::null_mut(),
            }
        }
    }

    impl Default for wire_Secp256k1SignWithSeedReq {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }

    impl NewWithNullPtr for wire_Secp256k1VerifyReq {
        fn new_with_null_ptr() -> Self {
            Self {
                message_hash: core::ptr::null_mut(),
                signature_bytes: core::ptr::null_mut(),
                public_key_bytes: core::ptr::null_mut(),
            }
        }
    }

    impl Default for wire_Secp256k1VerifyReq {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }

    impl NewWithNullPtr for wire_SeedToKeyReq {
        fn new_with_null_ptr() -> Self {
            Self {
                seed: core::ptr::null_mut(),
                path: core::ptr::null_mut(),
            }
        }
    }

    impl Default for wire_SeedToKeyReq {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }

    // Section: sync execution mode utility

    #[no_mangle]
    pub extern "C" fn free_WireSyncReturn(ptr: support::WireSyncReturn) {
        unsafe {
            let _ = support::box_from_leak_ptr(ptr);
        };
    }
}
#[cfg(not(target_family = "wasm"))]
pub use io::*;
