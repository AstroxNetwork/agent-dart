import 'dart:convert';
import 'dart:typed_data';

import 'package:agent_dart/agent/types.dart';
import 'package:agent_dart/identity/ed25519.dart';
import 'package:flutter_test/flutter_test.dart';

// import 'package:agent_dart/utils/extension.dart';

void main() {
  ed25519Test();
}

void ed25519Test() {
  final testVectors = [
    [
      'B3997656BA51FF6DA37B61D8D549EC80717266ECF48FB5DA52B654412634844C',
      '302A300506032B6570032100B3997656BA51FF6DA37B61D8D549EC80717266ECF48FB5DA52B654412634844C',
    ],
    [
      'A5AFB5FEB6DFB6DDF5DD6563856FFF5484F5FE304391D9ED06697861F220C610',
      '302A300506032B6570032100A5AFB5FEB6DFB6DDF5DD6563856FFF5484F5FE304391D9ED06697861F220C610',
    ],
    [
      'C8413108F121CB794A10804D15F613E40ECC7C78A4EC567040DDF78467C71DFF',
      '302A300506032B6570032100C8413108F121CB794A10804D15F613E40ECC7C78A4EC567040DDF78467C71DFF',
    ],
  ];
  test('DER encoding of ED25519 keys', () async {
    for (var pair in testVectors) {
      final publicKey = Ed25519PublicKey.fromRaw(blobFromHex(pair[0]));
      final expectedDerPublicKey = blobFromHex(pair[1]);
      expect(publicKey.toDer(), expectedDerPublicKey);
    }
  });

  test('DER decoding of ED25519 keys', () async {
    for (var pair in testVectors) {
      final derPublicKey = blobFromHex(pair[1]);
      final expectedPublicKey = blobFromHex(pair[0]);
      expect(Ed25519PublicKey.fromDer(derPublicKey).toRaw(), expectedPublicKey);
    }
  });

  // test('DER encoding of invalid keys', () async {
  //   expect(() {
  //     Ed25519PublicKey.fromRaw(blobFromUint8Array(Buffer.alloc(31, 0))).toDer();
  //   }).toThrow();
  //   expect(() {
  //     Ed25519PublicKey.fromRaw(blobFromUint8Array(Buffer.alloc(31, 0))).toDer();
  //   }).toThrow();
  // });

  // test('DER decoding of invalid keys', () async {
  //   // Too short.
  //   expect(() {
  //     Ed25519PublicKey.fromDer(
  //       blobFromHex(
  //         '302A300506032B6570032100B3997656BA51FF6DA37B61D8D549EC80717266ECF48FB5DA52B65441263484',
  //       ),
  //     );
  //   }).toThrow();
  //   // Too long.
  //   expect(() {
  //     Ed25519PublicKey.fromDer(
  //       blobFromHex(
  //         '302A300506032B6570032100B3997656BA51FF6DA37B61D8D549EC8071726' +
  //             '6ECF48FB5DA52B654412634844C00',
  //       ),
  //     );
  //   }).toThrow();

  //   // Invalid DER-encoding.
  //   expect(() {
  //     Ed25519PublicKey.fromDer(
  //       blobFromHex(
  //         '002A300506032B6570032100B3997656BA51FF6DA37B61D8D549EC80717266ECF48FB5DA52B654412634844C',
  //       ),
  //     );
  //   }).toThrow();
  // });

  // test('fails with improper seed', () {
  //   expect(() => Ed25519KeyIdentity.generate(Uint8List.fromList(new Array(31).fill(0)))).toThrow();
  //   expect(() => Ed25519KeyIdentity.generate(Uint8List.fromList(new Array(33).fill(0)))).toThrow();
  // });

  test('can encode and decode to/from JSON', () async {
    final seed = List.filled(32, 0);
    final key = Ed25519KeyIdentity.generate(Uint8List.fromList(seed));

    final json = jsonEncode(key.getKeyPair());
    final key2 = Ed25519KeyIdentity.fromJSON(json);
    expect(key.toJSON(), key2.toJSON());
  });

  test('can encode and decode to/from JSON (backward compatibility)', () async {
    final seed = List.filled(32, 0);
    final key = Ed25519KeyIdentity.generate(Uint8List.fromList(seed));

    // This is the JSON that was generated by the first version.
    final json = jsonEncode({
      "publicKey": blobFromHex('3b6a27bcceb6a42d62a3a8d02a6f0d73653215771de243a63ac048a18b59da29'),
      "secretKey": blobFromHex(
        // ignore: prefer_adjacent_string_concatenation
        '0000000000000000000000000000000000000000000000000000000000000000' +
            '3b6a27bcceb6a42d62a3a8d02a6f0d73653215771de243a63ac048a18b59da29',
      ),
    });

    final key2 = Ed25519KeyIdentity.fromJSON(json);
    expect(key.toJSON(), key2.toJSON());
  });
}
