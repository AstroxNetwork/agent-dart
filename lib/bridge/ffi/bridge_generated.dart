// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`.

// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, prefer_single_quotes, prefer_const_constructors

import 'dart:convert';
import 'dart:typed_data';

import 'dart:convert';
import 'dart:typed_data';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'dart:ffi' as ffi;

abstract class AgentDart {
  Future<bool> blsInit({dynamic hint});

  Future<bool> blsVerify(
      {required Uint8List sig,
      required Uint8List m,
      required Uint8List w,
      dynamic hint});

  Future<IDResult> ed25519FromSeed({required Uint8List seed, dynamic hint});

  Future<Uint8List> ed25519Sign(
      {required Uint8List seed, required Uint8List message, dynamic hint});

  Future<bool> ed25519Verify(
      {required Uint8List message,
      required Uint8List sig,
      required Uint8List pubKey,
      dynamic hint});

  Future<Secp256k1IdentityExport> secp256K1FromSeed(
      {required Uint8List seed, dynamic hint});

  Future<Signature> secp256K1Sign(
      {required Uint8List seed, required Uint8List msg, dynamic hint});

  Future<Uint8List> bip32GetPrivate(
      {required String phrase,
      required String password,
      required String path,
      dynamic hint});

  Future<Uint8List> bip32ToSeedHash(
      {required String phrase, required String password, dynamic hint});
}

class IDResult {
  final Uint8List seed;
  final Uint8List publicKey;

  IDResult({
    required this.seed,
    required this.publicKey,
  });
}

class Secp256k1IdentityExport {
  final Uint8List privateKeyHash;
  final Uint8List derEncodedPublicKey;

  Secp256k1IdentityExport({
    required this.privateKeyHash,
    required this.derEncodedPublicKey,
  });
}

class Signature {
  /// This is the DER-encoded public key.
  final Uint8List? publicKey;

  /// The signature bytes.
  final Uint8List? signature;

  Signature({
    this.publicKey,
    this.signature,
  });
}

class AgentDartImpl extends FlutterRustBridgeBase<AgentDartWire>
    implements AgentDart {
  factory AgentDartImpl(ffi.DynamicLibrary dylib) =>
      AgentDartImpl.raw(AgentDartWire(dylib));

  AgentDartImpl.raw(AgentDartWire inner) : super(inner);

  Future<bool> blsInit({dynamic hint}) => executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_bls_init(port_),
        parseSuccessData: _wire2api_bool,
        constMeta: const FlutterRustBridgeTaskConstMeta(
          debugName: "bls_init",
          argNames: [],
        ),
        argValues: [],
        hint: hint,
      ));

  Future<bool> blsVerify(
          {required Uint8List sig,
          required Uint8List m,
          required Uint8List w,
          dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_bls_verify(
            port_,
            _api2wire_uint_8_list(sig),
            _api2wire_uint_8_list(m),
            _api2wire_uint_8_list(w)),
        parseSuccessData: _wire2api_bool,
        constMeta: const FlutterRustBridgeTaskConstMeta(
          debugName: "bls_verify",
          argNames: ["sig", "m", "w"],
        ),
        argValues: [sig, m, w],
        hint: hint,
      ));

  Future<IDResult> ed25519FromSeed({required Uint8List seed, dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) =>
            inner.wire_ed25519_from_seed(port_, _api2wire_uint_8_list(seed)),
        parseSuccessData: _wire2api_id_result,
        constMeta: const FlutterRustBridgeTaskConstMeta(
          debugName: "ed25519_from_seed",
          argNames: ["seed"],
        ),
        argValues: [seed],
        hint: hint,
      ));

  Future<Uint8List> ed25519Sign(
          {required Uint8List seed,
          required Uint8List message,
          dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_ed25519_sign(
            port_, _api2wire_uint_8_list(seed), _api2wire_uint_8_list(message)),
        parseSuccessData: _wire2api_uint_8_list,
        constMeta: const FlutterRustBridgeTaskConstMeta(
          debugName: "ed25519_sign",
          argNames: ["seed", "message"],
        ),
        argValues: [seed, message],
        hint: hint,
      ));

  Future<bool> ed25519Verify(
          {required Uint8List message,
          required Uint8List sig,
          required Uint8List pubKey,
          dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_ed25519_verify(
            port_,
            _api2wire_uint_8_list(message),
            _api2wire_uint_8_list(sig),
            _api2wire_uint_8_list(pubKey)),
        parseSuccessData: _wire2api_bool,
        constMeta: const FlutterRustBridgeTaskConstMeta(
          debugName: "ed25519_verify",
          argNames: ["message", "sig", "pubKey"],
        ),
        argValues: [message, sig, pubKey],
        hint: hint,
      ));

  Future<Secp256k1IdentityExport> secp256K1FromSeed(
          {required Uint8List seed, dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) =>
            inner.wire_secp256k1_from_seed(port_, _api2wire_uint_8_list(seed)),
        parseSuccessData: _wire2api_secp_256_k_1_identity_export,
        constMeta: const FlutterRustBridgeTaskConstMeta(
          debugName: "secp256k1_from_seed",
          argNames: ["seed"],
        ),
        argValues: [seed],
        hint: hint,
      ));

  Future<Signature> secp256K1Sign(
          {required Uint8List seed, required Uint8List msg, dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_secp256k1_sign(
            port_, _api2wire_uint_8_list(seed), _api2wire_uint_8_list(msg)),
        parseSuccessData: _wire2api_signature,
        constMeta: const FlutterRustBridgeTaskConstMeta(
          debugName: "secp256k1_sign",
          argNames: ["seed", "msg"],
        ),
        argValues: [seed, msg],
        hint: hint,
      ));

  Future<Uint8List> bip32GetPrivate(
          {required String phrase,
          required String password,
          required String path,
          dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_bip32_get_private(
            port_,
            _api2wire_String(phrase),
            _api2wire_String(password),
            _api2wire_String(path)),
        parseSuccessData: _wire2api_uint_8_list,
        constMeta: const FlutterRustBridgeTaskConstMeta(
          debugName: "bip32_get_private",
          argNames: ["phrase", "password", "path"],
        ),
        argValues: [phrase, password, path],
        hint: hint,
      ));

  Future<Uint8List> bip32ToSeedHash(
          {required String phrase, required String password, dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_bip32_to_seed_hash(
            port_, _api2wire_String(phrase), _api2wire_String(password)),
        parseSuccessData: _wire2api_uint_8_list,
        constMeta: const FlutterRustBridgeTaskConstMeta(
          debugName: "bip32_to_seed_hash",
          argNames: ["phrase", "password"],
        ),
        argValues: [phrase, password],
        hint: hint,
      ));

  // Section: api2wire
  ffi.Pointer<wire_uint_8_list> _api2wire_String(String raw) {
    return _api2wire_uint_8_list(utf8.encoder.convert(raw));
  }

  int _api2wire_u8(int raw) {
    return raw;
  }

  ffi.Pointer<wire_uint_8_list> _api2wire_uint_8_list(Uint8List raw) {
    final ans = inner.new_uint_8_list(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }

  // Section: api_fill_to_wire

}

// Section: wire2api
bool _wire2api_bool(dynamic raw) {
  return raw as bool;
}

IDResult _wire2api_id_result(dynamic raw) {
  final arr = raw as List<dynamic>;
  if (arr.length != 2)
    throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
  return IDResult(
    seed: _wire2api_uint_8_list(arr[0]),
    publicKey: _wire2api_uint_8_list(arr[1]),
  );
}

Uint8List? _wire2api_opt_uint_8_list(dynamic raw) {
  return raw == null ? null : _wire2api_uint_8_list(raw);
}

Secp256k1IdentityExport _wire2api_secp_256_k_1_identity_export(dynamic raw) {
  final arr = raw as List<dynamic>;
  if (arr.length != 2)
    throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
  return Secp256k1IdentityExport(
    privateKeyHash: _wire2api_uint_8_list(arr[0]),
    derEncodedPublicKey: _wire2api_uint_8_list(arr[1]),
  );
}

Signature _wire2api_signature(dynamic raw) {
  final arr = raw as List<dynamic>;
  if (arr.length != 2)
    throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
  return Signature(
    publicKey: _wire2api_opt_uint_8_list(arr[0]),
    signature: _wire2api_opt_uint_8_list(arr[1]),
  );
}

int _wire2api_u8(dynamic raw) {
  return raw as int;
}

Uint8List _wire2api_uint_8_list(dynamic raw) {
  return raw as Uint8List;
}

// ignore_for_file: camel_case_types, non_constant_identifier_names, avoid_positional_boolean_parameters, annotate_overrides, constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.

/// generated by flutter_rust_bridge
class AgentDartWire implements FlutterRustBridgeWireBase {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  AgentDartWire(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  AgentDartWire.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void wire_bls_init(
    int port_,
  ) {
    return _wire_bls_init(
      port_,
    );
  }

  late final _wire_bls_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_bls_init');
  late final _wire_bls_init =
      _wire_bls_initPtr.asFunction<void Function(int)>();

  void wire_bls_verify(
    int port_,
    ffi.Pointer<wire_uint_8_list> sig,
    ffi.Pointer<wire_uint_8_list> m,
    ffi.Pointer<wire_uint_8_list> w,
  ) {
    return _wire_bls_verify(
      port_,
      sig,
      m,
      w,
    );
  }

  late final _wire_bls_verifyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_bls_verify');
  late final _wire_bls_verify = _wire_bls_verifyPtr.asFunction<
      void Function(int, ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_ed25519_from_seed(
    int port_,
    ffi.Pointer<wire_uint_8_list> seed,
  ) {
    return _wire_ed25519_from_seed(
      port_,
      seed,
    );
  }

  late final _wire_ed25519_from_seedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_uint_8_list>)>>('wire_ed25519_from_seed');
  late final _wire_ed25519_from_seed = _wire_ed25519_from_seedPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_ed25519_sign(
    int port_,
    ffi.Pointer<wire_uint_8_list> seed,
    ffi.Pointer<wire_uint_8_list> message,
  ) {
    return _wire_ed25519_sign(
      port_,
      seed,
      message,
    );
  }

  late final _wire_ed25519_signPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_ed25519_sign');
  late final _wire_ed25519_sign = _wire_ed25519_signPtr.asFunction<
      void Function(
          int, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_ed25519_verify(
    int port_,
    ffi.Pointer<wire_uint_8_list> message,
    ffi.Pointer<wire_uint_8_list> sig,
    ffi.Pointer<wire_uint_8_list> pub_key,
  ) {
    return _wire_ed25519_verify(
      port_,
      message,
      sig,
      pub_key,
    );
  }

  late final _wire_ed25519_verifyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_ed25519_verify');
  late final _wire_ed25519_verify = _wire_ed25519_verifyPtr.asFunction<
      void Function(int, ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_secp256k1_from_seed(
    int port_,
    ffi.Pointer<wire_uint_8_list> seed,
  ) {
    return _wire_secp256k1_from_seed(
      port_,
      seed,
    );
  }

  late final _wire_secp256k1_from_seedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_uint_8_list>)>>('wire_secp256k1_from_seed');
  late final _wire_secp256k1_from_seed = _wire_secp256k1_from_seedPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_secp256k1_sign(
    int port_,
    ffi.Pointer<wire_uint_8_list> seed,
    ffi.Pointer<wire_uint_8_list> msg,
  ) {
    return _wire_secp256k1_sign(
      port_,
      seed,
      msg,
    );
  }

  late final _wire_secp256k1_signPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_secp256k1_sign');
  late final _wire_secp256k1_sign = _wire_secp256k1_signPtr.asFunction<
      void Function(
          int, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_bip32_get_private(
    int port_,
    ffi.Pointer<wire_uint_8_list> phrase,
    ffi.Pointer<wire_uint_8_list> password,
    ffi.Pointer<wire_uint_8_list> path,
  ) {
    return _wire_bip32_get_private(
      port_,
      phrase,
      password,
      path,
    );
  }

  late final _wire_bip32_get_privatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_bip32_get_private');
  late final _wire_bip32_get_private = _wire_bip32_get_privatePtr.asFunction<
      void Function(int, ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_bip32_to_seed_hash(
    int port_,
    ffi.Pointer<wire_uint_8_list> phrase,
    ffi.Pointer<wire_uint_8_list> password,
  ) {
    return _wire_bip32_to_seed_hash(
      port_,
      phrase,
      password,
    );
  }

  late final _wire_bip32_to_seed_hashPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_bip32_to_seed_hash');
  late final _wire_bip32_to_seed_hash = _wire_bip32_to_seed_hashPtr.asFunction<
      void Function(
          int, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  ffi.Pointer<wire_uint_8_list> new_uint_8_list(
    int len,
  ) {
    return _new_uint_8_list(
      len,
    );
  }

  late final _new_uint_8_listPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_uint_8_list> Function(
              ffi.Int32)>>('new_uint_8_list');
  late final _new_uint_8_list = _new_uint_8_listPtr
      .asFunction<ffi.Pointer<wire_uint_8_list> Function(int)>();

  void free_WireSyncReturnStruct(
    WireSyncReturnStruct val,
  ) {
    return _free_WireSyncReturnStruct(
      val,
    );
  }

  late final _free_WireSyncReturnStructPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WireSyncReturnStruct)>>(
          'free_WireSyncReturnStruct');
  late final _free_WireSyncReturnStruct = _free_WireSyncReturnStructPtr
      .asFunction<void Function(WireSyncReturnStruct)>();

  void store_dart_post_cobject(
    DartPostCObjectFnType ptr,
  ) {
    return _store_dart_post_cobject(
      ptr,
    );
  }

  late final _store_dart_post_cobjectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(DartPostCObjectFnType)>>(
          'store_dart_post_cobject');
  late final _store_dart_post_cobject = _store_dart_post_cobjectPtr
      .asFunction<void Function(DartPostCObjectFnType)>();
}

class wire_uint_8_list extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> ptr;

  @ffi.Int32()
  external int len;
}

typedef DartPostCObjectFnType = ffi.Pointer<
    ffi.NativeFunction<ffi.Bool Function(DartPort, ffi.Pointer<ffi.Void>)>>;
typedef DartPort = ffi.Int64;

const int ECB = 0;

const int CBC = 1;

const int CFB1 = 2;

const int CFB2 = 3;

const int CFB4 = 5;

const int OFB1 = 14;

const int OFB2 = 15;

const int OFB4 = 17;

const int OFB8 = 21;

const int OFB16 = 29;

const int CTR1 = 30;

const int CTR2 = 31;

const int CTR4 = 33;

const int CTR8 = 37;

const int CTR16 = 45;

const int CHUNK = 64;

const int MC_SHA2 = 2;

const int MC_SHA3 = 3;

const int SHA256 = 32;

const int SHA384 = 48;

const int SHA512 = 64;

const int HASH224 = 28;

const int HASH256 = 32;

const int HASH384 = 48;

const int HASH512 = 64;

const int SHAKE128 = 16;

const int SHAKE256 = 32;

const int MODBYTES = 48;

const int BASEBITS = 58;

const int NLEN = 7;

const int DNLEN = 14;

const int HBITS = 29;

const int BIGBITS = 384;

const int BLS_OK = 0;

const int BLS_FAIL = -1;

const int WEIERSTRASS = 0;

const int EDWARDS = 1;

const int MONTGOMERY = 2;

const int NOT = 0;

const int BN = 1;

const int BLS12 = 2;

const int BLS24 = 3;

const int BLS48 = 4;

const int D_TYPE = 0;

const int M_TYPE = 1;

const int POSITIVEX = 0;

const int NEGATIVEX = 1;

const int CURVETYPE = 0;

const int CURVE_A = 0;

const int CURVE_PAIRING_TYPE = 2;

const int SEXTIC_TWIST = 1;

const int SIGN_OF_X = 1;

const int ATE_BITS = 65;

const int G2_TABLE = 69;

const int HTC_ISO = 11;

const int HTC_ISO_G2 = 3;

const int ALLOW_ALT_COMPRESS = 1;

const int HASH_TYPE = 32;

const int AESKEY = 16;

const int NOT_SPECIAL = 0;

const int PSEUDO_MERSENNE = 1;

const int MONTGOMERY_FRIENDLY = 2;

const int GENERALISED_MERSENNE = 3;

const int NEGATOWER = 0;

const int POSITOWER = 1;

const int MODBITS = 381;

const int PM1D2 = 1;

const int RIADZ = 11;

const int RIADZG2A = -2;

const int RIADZG2B = -1;

const int MODTYPE = 0;

const int QNRI = 0;

const int TOWER = 0;

const int FEXCESS = 33554431;

const int BIG_ENDIAN_SIGN = 0;

const int ZERO = 0;

const int ONE = 1;

const int SPARSEST = 2;

const int SPARSER = 3;

const int SPARSE = 4;

const int DENSE = 5;

const int BAD_PARAMS = -11;

const int INVALID_POINT = -14;

const int WRONG_ORDER = -18;

const int BAD_PIN = -19;

const int MAXPIN = 10000;

const int PBLEN = 14;

const int CURVE_COF_I = 0;

const int CURVE_B_I = 4;

const int USE_GLV = 1;

const int USE_GS_G2 = 1;

const int USE_GS_GT = 1;

const int GT_STRONG = 0;

const int BMASK = 2147483647;

const int HMASK = 536870911;

const int MCONST = 140737475470229501;
