#![allow(
    non_camel_case_types,
    unused,
    clippy::redundant_closure,
    clippy::useless_conversion,
    clippy::unit_arg,
    clippy::double_parens,
    non_snake_case
)]
// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`.

use crate::api::*;
use flutter_rust_bridge::*;

// Section: imports

use crate::ed25519::IDResult;
use crate::secp256k1::Secp256k1IdentityExport;
use crate::secp256k1::Signature;

// Section: wire functions

#[no_mangle]
pub extern "C" fn wire_bls_init(port_: i64) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "bls_init",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| Ok(bls_init()),
    )
}

#[no_mangle]
pub extern "C" fn wire_bls_verify(
    port_: i64,
    sig: *mut wire_uint_8_list,
    m: *mut wire_uint_8_list,
    w: *mut wire_uint_8_list,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "bls_verify",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_sig = sig.wire2api();
            let api_m = m.wire2api();
            let api_w = w.wire2api();
            move |task_callback| Ok(bls_verify(api_sig, api_m, api_w))
        },
    )
}

#[no_mangle]
pub extern "C" fn wire_ed25519_from_seed(port_: i64, seed: *mut wire_uint_8_list) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "ed25519_from_seed",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_seed = seed.wire2api();
            move |task_callback| Ok(ed25519_from_seed(api_seed))
        },
    )
}

#[no_mangle]
pub extern "C" fn wire_ed25519_sign(
    port_: i64,
    seed: *mut wire_uint_8_list,
    message: *mut wire_uint_8_list,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "ed25519_sign",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_seed = seed.wire2api();
            let api_message = message.wire2api();
            move |task_callback| Ok(ed25519_sign(api_seed, api_message))
        },
    )
}

#[no_mangle]
pub extern "C" fn wire_ed25519_verify(
    port_: i64,
    message: *mut wire_uint_8_list,
    sig: *mut wire_uint_8_list,
    pub_key: *mut wire_uint_8_list,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "ed25519_verify",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_message = message.wire2api();
            let api_sig = sig.wire2api();
            let api_pub_key = pub_key.wire2api();
            move |task_callback| Ok(ed25519_verify(api_message, api_sig, api_pub_key))
        },
    )
}

#[no_mangle]
pub extern "C" fn wire_secp256k1_from_seed(port_: i64, seed: *mut wire_uint_8_list) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "secp256k1_from_seed",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_seed = seed.wire2api();
            move |task_callback| Ok(secp256k1_from_seed(api_seed))
        },
    )
}

#[no_mangle]
pub extern "C" fn wire_secp256k1_sign(
    port_: i64,
    seed: *mut wire_uint_8_list,
    msg: *mut wire_uint_8_list,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "secp256k1_sign",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_seed = seed.wire2api();
            let api_msg = msg.wire2api();
            move |task_callback| Ok(secp256k1_sign(api_seed, api_msg))
        },
    )
}

#[no_mangle]
pub extern "C" fn wire_bip32_get_private(
    port_: i64,
    phrase: *mut wire_uint_8_list,
    password: *mut wire_uint_8_list,
    path: *mut wire_uint_8_list,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "bip32_get_private",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_phrase = phrase.wire2api();
            let api_password = password.wire2api();
            let api_path = path.wire2api();
            move |task_callback| Ok(bip32_get_private(api_phrase, api_password, api_path))
        },
    )
}

#[no_mangle]
pub extern "C" fn wire_bip32_to_seed_hash(
    port_: i64,
    phrase: *mut wire_uint_8_list,
    password: *mut wire_uint_8_list,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "bip32_to_seed_hash",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_phrase = phrase.wire2api();
            let api_password = password.wire2api();
            move |task_callback| Ok(bip32_to_seed_hash(api_phrase, api_password))
        },
    )
}

// Section: wire structs

#[repr(C)]
#[derive(Clone)]
pub struct wire_uint_8_list {
    ptr: *mut u8,
    len: i32,
}

// Section: wrapper structs

// Section: static checks

// Section: allocate functions

#[no_mangle]
pub extern "C" fn new_uint_8_list(len: i32) -> *mut wire_uint_8_list {
    let ans = wire_uint_8_list {
        ptr: support::new_leak_vec_ptr(Default::default(), len),
        len,
    };
    support::new_leak_box_ptr(ans)
}

// Section: impl Wire2Api

pub trait Wire2Api<T> {
    fn wire2api(self) -> T;
}

impl<T, S> Wire2Api<Option<T>> for *mut S
where
    *mut S: Wire2Api<T>,
{
    fn wire2api(self) -> Option<T> {
        if self.is_null() {
            None
        } else {
            Some(self.wire2api())
        }
    }
}

impl Wire2Api<String> for *mut wire_uint_8_list {
    fn wire2api(self) -> String {
        let vec: Vec<u8> = self.wire2api();
        String::from_utf8_lossy(&vec).into_owned()
    }
}

impl Wire2Api<u8> for u8 {
    fn wire2api(self) -> u8 {
        self
    }
}

impl Wire2Api<Vec<u8>> for *mut wire_uint_8_list {
    fn wire2api(self) -> Vec<u8> {
        unsafe {
            let wrap = support::box_from_leak_ptr(self);
            support::vec_from_leak_ptr(wrap.ptr, wrap.len)
        }
    }
}

// Section: impl NewWithNullPtr

pub trait NewWithNullPtr {
    fn new_with_null_ptr() -> Self;
}

impl<T> NewWithNullPtr for *mut T {
    fn new_with_null_ptr() -> Self {
        std::ptr::null_mut()
    }
}

// Section: impl IntoDart

impl support::IntoDart for IDResult {
    fn into_dart(self) -> support::DartCObject {
        vec![self.seed.into_dart(), self.public_key.into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for IDResult {}

impl support::IntoDart for Secp256k1IdentityExport {
    fn into_dart(self) -> support::DartCObject {
        vec![
            self.private_key_hash.into_dart(),
            self.der_encoded_public_key.into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for Secp256k1IdentityExport {}

impl support::IntoDart for Signature {
    fn into_dart(self) -> support::DartCObject {
        vec![self.public_key.into_dart(), self.signature.into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for Signature {}

// Section: executor

support::lazy_static! {
    pub static ref FLUTTER_RUST_BRIDGE_HANDLER: support::DefaultHandler = Default::default();
}

// Section: sync execution mode utility

#[no_mangle]
pub extern "C" fn free_WireSyncReturnStruct(val: support::WireSyncReturnStruct) {
    unsafe {
        let _ = support::vec_from_leak_ptr(val.ptr, val.len);
    }
}
