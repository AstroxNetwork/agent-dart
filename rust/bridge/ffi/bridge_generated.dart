// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`.

// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports

import 'dart:convert';
import 'dart:typed_data';

import 'dart:convert';
import 'dart:typed_data';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'dart:ffi' as ffi;

abstract class AgentDart {
  /// --------------------
  /// mnemonic
  /// --------------------
  /// create_phrase
  /// phrase_to_seed
  /// seed_to_key
  Future<Uint8List> mnemonicPhraseToSeed(
      {required PhraseToSeedReq req, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMnemonicPhraseToSeedConstMeta;

  Future<Uint8List> mnemonicSeedToKey(
      {required SeedToKeyReq req, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMnemonicSeedToKeyConstMeta;

  /// --------------------
  /// bls
  /// --------------------
  /// bls_init
  /// bls_verify
  Future<bool> blsInit({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kBlsInitConstMeta;

  Future<bool> blsVerify({required BLSVerifyReq req, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kBlsVerifyConstMeta;

  /// --------------
  /// ed25519
  /// --------------------
  /// ed25519_from_seed
  /// ed25519_sign
  /// ed25519_verify
  Future<ED25519Res> ed25519FromSeed(
      {required ED25519FromSeedReq req, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kEd25519FromSeedConstMeta;

  Future<Uint8List> ed25519Sign({required ED25519SignReq req, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kEd25519SignConstMeta;

  Future<bool> ed25519Verify({required ED25519VerifyReq req, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kEd25519VerifyConstMeta;

  /// ---------------------
  /// secp256k1
  /// ---------------------
  Future<Secp256k1IdentityExport> secp256K1FromSeed(
      {required Secp256k1FromSeedReq req, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSecp256K1FromSeedConstMeta;

  Future<SignatureFFI> secp256K1Sign(
      {required Secp256k1SignWithSeedReq req, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSecp256K1SignConstMeta;

  Future<bool> secp256K1Verify({required Secp256k1VerifyReq req, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSecp256K1VerifyConstMeta;

  /// ---------------------
  /// aes
  /// ---------------------
  Future<Uint8List> aes128CtrEncrypt(
      {required AesEncryptReq req, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kAes128CtrEncryptConstMeta;

  Future<Uint8List> aes128CtrDecrypt(
      {required AesDecryptReq req, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kAes128CtrDecryptConstMeta;

  Future<KeyDerivedRes> pbkdf2DeriveKey(
      {required PBKDFDeriveReq req, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kPbkdf2DeriveKeyConstMeta;

  Future<KeyDerivedRes> scryptDeriveKey(
      {required ScriptDeriveReq req, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kScryptDeriveKeyConstMeta;
}

class AesDecryptReq {
  final Uint8List key;
  final Uint8List iv;
  final Uint8List cipherText;

  AesDecryptReq({
    required this.key,
    required this.iv,
    required this.cipherText,
  });
}

class AesEncryptReq {
  final Uint8List key;
  final Uint8List iv;
  final Uint8List message;

  AesEncryptReq({
    required this.key,
    required this.iv,
    required this.message,
  });
}

class BLSVerifyReq {
  final Uint8List signature;
  final Uint8List message;
  final Uint8List publicKey;

  BLSVerifyReq({
    required this.signature,
    required this.message,
    required this.publicKey,
  });
}

class ED25519FromSeedReq {
  final Uint8List seed;

  ED25519FromSeedReq({
    required this.seed,
  });
}

class ED25519Res {
  final Uint8List seed;
  final Uint8List publicKey;

  ED25519Res({
    required this.seed,
    required this.publicKey,
  });
}

class ED25519SignReq {
  final Uint8List seed;
  final Uint8List message;

  ED25519SignReq({
    required this.seed,
    required this.message,
  });
}

class ED25519VerifyReq {
  final Uint8List sig;
  final Uint8List message;
  final Uint8List pubKey;

  ED25519VerifyReq({
    required this.sig,
    required this.message,
    required this.pubKey,
  });
}

class KeyDerivedRes {
  final Uint8List leftBits;
  final Uint8List rightBits;

  KeyDerivedRes({
    required this.leftBits,
    required this.rightBits,
  });
}

class PBKDFDeriveReq {
  final Uint8List password;
  final Uint8List salt;
  final int c;

  PBKDFDeriveReq({
    required this.password,
    required this.salt,
    required this.c,
  });
}

class PhraseToSeedReq {
  final String phrase;
  final String password;

  PhraseToSeedReq({
    required this.phrase,
    required this.password,
  });
}

class ScriptDeriveReq {
  final Uint8List password;
  final Uint8List salt;
  final int n;
  final int p;
  final int r;

  ScriptDeriveReq({
    required this.password,
    required this.salt,
    required this.n,
    required this.p,
    required this.r,
  });
}

class Secp256k1FromSeedReq {
  final Uint8List seed;

  Secp256k1FromSeedReq({
    required this.seed,
  });
}

class Secp256k1IdentityExport {
  final Uint8List privateKeyHash;
  final Uint8List derEncodedPublicKey;

  Secp256k1IdentityExport({
    required this.privateKeyHash,
    required this.derEncodedPublicKey,
  });
}

class Secp256k1SignWithSeedReq {
  final Uint8List msg;
  final Uint8List seed;

  Secp256k1SignWithSeedReq({
    required this.msg,
    required this.seed,
  });
}

class Secp256k1VerifyReq {
  final Uint8List messageHash;
  final Uint8List signatureBytes;
  final Uint8List publicKeyBytes;

  Secp256k1VerifyReq({
    required this.messageHash,
    required this.signatureBytes,
    required this.publicKeyBytes,
  });
}

class SeedToKeyReq {
  final Uint8List seed;
  final String path;

  SeedToKeyReq({
    required this.seed,
    required this.path,
  });
}

class SignatureFFI {
  /// This is the DER-encoded public key.
  final Uint8List? publicKey;

  /// The signature bytes.
  final Uint8List? signature;

  SignatureFFI({
    this.publicKey,
    this.signature,
  });
}

class AgentDartImpl extends FlutterRustBridgeBase<AgentDartWire>
    implements AgentDart {
  factory AgentDartImpl(ffi.DynamicLibrary dylib) =>
      AgentDartImpl.raw(AgentDartWire(dylib));

  AgentDartImpl.raw(AgentDartWire inner) : super(inner);

  Future<Uint8List> mnemonicPhraseToSeed(
          {required PhraseToSeedReq req, dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_mnemonic_phrase_to_seed(
            port_, _api2wire_box_autoadd_phrase_to_seed_req(req)),
        parseSuccessData: _wire2api_uint_8_list,
        constMeta: kMnemonicPhraseToSeedConstMeta,
        argValues: [req],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kMnemonicPhraseToSeedConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "mnemonic_phrase_to_seed",
        argNames: ["req"],
      );

  Future<Uint8List> mnemonicSeedToKey(
          {required SeedToKeyReq req, dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_mnemonic_seed_to_key(
            port_, _api2wire_box_autoadd_seed_to_key_req(req)),
        parseSuccessData: _wire2api_uint_8_list,
        constMeta: kMnemonicSeedToKeyConstMeta,
        argValues: [req],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kMnemonicSeedToKeyConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "mnemonic_seed_to_key",
        argNames: ["req"],
      );

  Future<bool> blsInit({dynamic hint}) => executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_bls_init(port_),
        parseSuccessData: _wire2api_bool,
        constMeta: kBlsInitConstMeta,
        argValues: [],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kBlsInitConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "bls_init",
        argNames: [],
      );

  Future<bool> blsVerify({required BLSVerifyReq req, dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_bls_verify(
            port_, _api2wire_box_autoadd_bls_verify_req(req)),
        parseSuccessData: _wire2api_bool,
        constMeta: kBlsVerifyConstMeta,
        argValues: [req],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kBlsVerifyConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "bls_verify",
        argNames: ["req"],
      );

  Future<ED25519Res> ed25519FromSeed(
          {required ED25519FromSeedReq req, dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_ed25519_from_seed(
            port_, _api2wire_box_autoadd_ed_25519_from_seed_req(req)),
        parseSuccessData: _wire2api_ed_25519_res,
        constMeta: kEd25519FromSeedConstMeta,
        argValues: [req],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kEd25519FromSeedConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "ed25519_from_seed",
        argNames: ["req"],
      );

  Future<Uint8List> ed25519Sign({required ED25519SignReq req, dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_ed25519_sign(
            port_, _api2wire_box_autoadd_ed_25519_sign_req(req)),
        parseSuccessData: _wire2api_uint_8_list,
        constMeta: kEd25519SignConstMeta,
        argValues: [req],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kEd25519SignConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "ed25519_sign",
        argNames: ["req"],
      );

  Future<bool> ed25519Verify({required ED25519VerifyReq req, dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_ed25519_verify(
            port_, _api2wire_box_autoadd_ed_25519_verify_req(req)),
        parseSuccessData: _wire2api_bool,
        constMeta: kEd25519VerifyConstMeta,
        argValues: [req],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kEd25519VerifyConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "ed25519_verify",
        argNames: ["req"],
      );

  Future<Secp256k1IdentityExport> secp256K1FromSeed(
          {required Secp256k1FromSeedReq req, dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_secp256k1_from_seed(
            port_, _api2wire_box_autoadd_secp_256_k_1_from_seed_req(req)),
        parseSuccessData: _wire2api_secp_256_k_1_identity_export,
        constMeta: kSecp256K1FromSeedConstMeta,
        argValues: [req],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kSecp256K1FromSeedConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "secp256k1_from_seed",
        argNames: ["req"],
      );

  Future<SignatureFFI> secp256K1Sign(
          {required Secp256k1SignWithSeedReq req, dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_secp256k1_sign(
            port_, _api2wire_box_autoadd_secp_256_k_1_sign_with_seed_req(req)),
        parseSuccessData: _wire2api_signature_ffi,
        constMeta: kSecp256K1SignConstMeta,
        argValues: [req],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kSecp256K1SignConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "secp256k1_sign",
        argNames: ["req"],
      );

  Future<bool> secp256K1Verify(
          {required Secp256k1VerifyReq req, dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_secp256k1_verify(
            port_, _api2wire_box_autoadd_secp_256_k_1_verify_req(req)),
        parseSuccessData: _wire2api_bool,
        constMeta: kSecp256K1VerifyConstMeta,
        argValues: [req],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kSecp256K1VerifyConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "secp256k1_verify",
        argNames: ["req"],
      );

  Future<Uint8List> aes128CtrEncrypt(
          {required AesEncryptReq req, dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_aes_128_ctr_encrypt(
            port_, _api2wire_box_autoadd_aes_encrypt_req(req)),
        parseSuccessData: _wire2api_uint_8_list,
        constMeta: kAes128CtrEncryptConstMeta,
        argValues: [req],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kAes128CtrEncryptConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "aes_128_ctr_encrypt",
        argNames: ["req"],
      );

  Future<Uint8List> aes128CtrDecrypt(
          {required AesDecryptReq req, dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_aes_128_ctr_decrypt(
            port_, _api2wire_box_autoadd_aes_decrypt_req(req)),
        parseSuccessData: _wire2api_uint_8_list,
        constMeta: kAes128CtrDecryptConstMeta,
        argValues: [req],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kAes128CtrDecryptConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "aes_128_ctr_decrypt",
        argNames: ["req"],
      );

  Future<KeyDerivedRes> pbkdf2DeriveKey(
          {required PBKDFDeriveReq req, dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_pbkdf2_derive_key(
            port_, _api2wire_box_autoadd_pbkdf_derive_req(req)),
        parseSuccessData: _wire2api_key_derived_res,
        constMeta: kPbkdf2DeriveKeyConstMeta,
        argValues: [req],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kPbkdf2DeriveKeyConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "pbkdf2_derive_key",
        argNames: ["req"],
      );

  Future<KeyDerivedRes> scryptDeriveKey(
          {required ScriptDeriveReq req, dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_scrypt_derive_key(
            port_, _api2wire_box_autoadd_script_derive_req(req)),
        parseSuccessData: _wire2api_key_derived_res,
        constMeta: kScryptDeriveKeyConstMeta,
        argValues: [req],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kScryptDeriveKeyConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "scrypt_derive_key",
        argNames: ["req"],
      );

  // Section: api2wire
  ffi.Pointer<wire_uint_8_list> _api2wire_String(String raw) {
    return _api2wire_uint_8_list(utf8.encoder.convert(raw));
  }

  ffi.Pointer<wire_AesDecryptReq> _api2wire_box_autoadd_aes_decrypt_req(
      AesDecryptReq raw) {
    final ptr = inner.new_box_autoadd_aes_decrypt_req();
    _api_fill_to_wire_aes_decrypt_req(raw, ptr.ref);
    return ptr;
  }

  ffi.Pointer<wire_AesEncryptReq> _api2wire_box_autoadd_aes_encrypt_req(
      AesEncryptReq raw) {
    final ptr = inner.new_box_autoadd_aes_encrypt_req();
    _api_fill_to_wire_aes_encrypt_req(raw, ptr.ref);
    return ptr;
  }

  ffi.Pointer<wire_BLSVerifyReq> _api2wire_box_autoadd_bls_verify_req(
      BLSVerifyReq raw) {
    final ptr = inner.new_box_autoadd_bls_verify_req();
    _api_fill_to_wire_bls_verify_req(raw, ptr.ref);
    return ptr;
  }

  ffi.Pointer<wire_ED25519FromSeedReq>
      _api2wire_box_autoadd_ed_25519_from_seed_req(ED25519FromSeedReq raw) {
    final ptr = inner.new_box_autoadd_ed_25519_from_seed_req();
    _api_fill_to_wire_ed_25519_from_seed_req(raw, ptr.ref);
    return ptr;
  }

  ffi.Pointer<wire_ED25519SignReq> _api2wire_box_autoadd_ed_25519_sign_req(
      ED25519SignReq raw) {
    final ptr = inner.new_box_autoadd_ed_25519_sign_req();
    _api_fill_to_wire_ed_25519_sign_req(raw, ptr.ref);
    return ptr;
  }

  ffi.Pointer<wire_ED25519VerifyReq> _api2wire_box_autoadd_ed_25519_verify_req(
      ED25519VerifyReq raw) {
    final ptr = inner.new_box_autoadd_ed_25519_verify_req();
    _api_fill_to_wire_ed_25519_verify_req(raw, ptr.ref);
    return ptr;
  }

  ffi.Pointer<wire_PBKDFDeriveReq> _api2wire_box_autoadd_pbkdf_derive_req(
      PBKDFDeriveReq raw) {
    final ptr = inner.new_box_autoadd_pbkdf_derive_req();
    _api_fill_to_wire_pbkdf_derive_req(raw, ptr.ref);
    return ptr;
  }

  ffi.Pointer<wire_PhraseToSeedReq> _api2wire_box_autoadd_phrase_to_seed_req(
      PhraseToSeedReq raw) {
    final ptr = inner.new_box_autoadd_phrase_to_seed_req();
    _api_fill_to_wire_phrase_to_seed_req(raw, ptr.ref);
    return ptr;
  }

  ffi.Pointer<wire_ScriptDeriveReq> _api2wire_box_autoadd_script_derive_req(
      ScriptDeriveReq raw) {
    final ptr = inner.new_box_autoadd_script_derive_req();
    _api_fill_to_wire_script_derive_req(raw, ptr.ref);
    return ptr;
  }

  ffi.Pointer<wire_Secp256k1FromSeedReq>
      _api2wire_box_autoadd_secp_256_k_1_from_seed_req(
          Secp256k1FromSeedReq raw) {
    final ptr = inner.new_box_autoadd_secp_256_k_1_from_seed_req();
    _api_fill_to_wire_secp_256_k_1_from_seed_req(raw, ptr.ref);
    return ptr;
  }

  ffi.Pointer<wire_Secp256k1SignWithSeedReq>
      _api2wire_box_autoadd_secp_256_k_1_sign_with_seed_req(
          Secp256k1SignWithSeedReq raw) {
    final ptr = inner.new_box_autoadd_secp_256_k_1_sign_with_seed_req();
    _api_fill_to_wire_secp_256_k_1_sign_with_seed_req(raw, ptr.ref);
    return ptr;
  }

  ffi.Pointer<wire_Secp256k1VerifyReq>
      _api2wire_box_autoadd_secp_256_k_1_verify_req(Secp256k1VerifyReq raw) {
    final ptr = inner.new_box_autoadd_secp_256_k_1_verify_req();
    _api_fill_to_wire_secp_256_k_1_verify_req(raw, ptr.ref);
    return ptr;
  }

  ffi.Pointer<wire_SeedToKeyReq> _api2wire_box_autoadd_seed_to_key_req(
      SeedToKeyReq raw) {
    final ptr = inner.new_box_autoadd_seed_to_key_req();
    _api_fill_to_wire_seed_to_key_req(raw, ptr.ref);
    return ptr;
  }

  int _api2wire_u32(int raw) {
    return raw;
  }

  int _api2wire_u8(int raw) {
    return raw;
  }

  ffi.Pointer<wire_uint_8_list> _api2wire_uint_8_list(Uint8List raw) {
    final ans = inner.new_uint_8_list(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }

  // Section: api_fill_to_wire

  void _api_fill_to_wire_aes_decrypt_req(
      AesDecryptReq apiObj, wire_AesDecryptReq wireObj) {
    wireObj.key = _api2wire_uint_8_list(apiObj.key);
    wireObj.iv = _api2wire_uint_8_list(apiObj.iv);
    wireObj.cipher_text = _api2wire_uint_8_list(apiObj.cipherText);
  }

  void _api_fill_to_wire_aes_encrypt_req(
      AesEncryptReq apiObj, wire_AesEncryptReq wireObj) {
    wireObj.key = _api2wire_uint_8_list(apiObj.key);
    wireObj.iv = _api2wire_uint_8_list(apiObj.iv);
    wireObj.message = _api2wire_uint_8_list(apiObj.message);
  }

  void _api_fill_to_wire_bls_verify_req(
      BLSVerifyReq apiObj, wire_BLSVerifyReq wireObj) {
    wireObj.signature = _api2wire_uint_8_list(apiObj.signature);
    wireObj.message = _api2wire_uint_8_list(apiObj.message);
    wireObj.public_key = _api2wire_uint_8_list(apiObj.publicKey);
  }

  void _api_fill_to_wire_box_autoadd_aes_decrypt_req(
      AesDecryptReq apiObj, ffi.Pointer<wire_AesDecryptReq> wireObj) {
    _api_fill_to_wire_aes_decrypt_req(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_aes_encrypt_req(
      AesEncryptReq apiObj, ffi.Pointer<wire_AesEncryptReq> wireObj) {
    _api_fill_to_wire_aes_encrypt_req(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_bls_verify_req(
      BLSVerifyReq apiObj, ffi.Pointer<wire_BLSVerifyReq> wireObj) {
    _api_fill_to_wire_bls_verify_req(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_ed_25519_from_seed_req(
      ED25519FromSeedReq apiObj, ffi.Pointer<wire_ED25519FromSeedReq> wireObj) {
    _api_fill_to_wire_ed_25519_from_seed_req(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_ed_25519_sign_req(
      ED25519SignReq apiObj, ffi.Pointer<wire_ED25519SignReq> wireObj) {
    _api_fill_to_wire_ed_25519_sign_req(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_ed_25519_verify_req(
      ED25519VerifyReq apiObj, ffi.Pointer<wire_ED25519VerifyReq> wireObj) {
    _api_fill_to_wire_ed_25519_verify_req(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_pbkdf_derive_req(
      PBKDFDeriveReq apiObj, ffi.Pointer<wire_PBKDFDeriveReq> wireObj) {
    _api_fill_to_wire_pbkdf_derive_req(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_phrase_to_seed_req(
      PhraseToSeedReq apiObj, ffi.Pointer<wire_PhraseToSeedReq> wireObj) {
    _api_fill_to_wire_phrase_to_seed_req(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_script_derive_req(
      ScriptDeriveReq apiObj, ffi.Pointer<wire_ScriptDeriveReq> wireObj) {
    _api_fill_to_wire_script_derive_req(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_secp_256_k_1_from_seed_req(
      Secp256k1FromSeedReq apiObj,
      ffi.Pointer<wire_Secp256k1FromSeedReq> wireObj) {
    _api_fill_to_wire_secp_256_k_1_from_seed_req(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_secp_256_k_1_sign_with_seed_req(
      Secp256k1SignWithSeedReq apiObj,
      ffi.Pointer<wire_Secp256k1SignWithSeedReq> wireObj) {
    _api_fill_to_wire_secp_256_k_1_sign_with_seed_req(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_secp_256_k_1_verify_req(
      Secp256k1VerifyReq apiObj, ffi.Pointer<wire_Secp256k1VerifyReq> wireObj) {
    _api_fill_to_wire_secp_256_k_1_verify_req(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_seed_to_key_req(
      SeedToKeyReq apiObj, ffi.Pointer<wire_SeedToKeyReq> wireObj) {
    _api_fill_to_wire_seed_to_key_req(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_ed_25519_from_seed_req(
      ED25519FromSeedReq apiObj, wire_ED25519FromSeedReq wireObj) {
    wireObj.seed = _api2wire_uint_8_list(apiObj.seed);
  }

  void _api_fill_to_wire_ed_25519_sign_req(
      ED25519SignReq apiObj, wire_ED25519SignReq wireObj) {
    wireObj.seed = _api2wire_uint_8_list(apiObj.seed);
    wireObj.message = _api2wire_uint_8_list(apiObj.message);
  }

  void _api_fill_to_wire_ed_25519_verify_req(
      ED25519VerifyReq apiObj, wire_ED25519VerifyReq wireObj) {
    wireObj.sig = _api2wire_uint_8_list(apiObj.sig);
    wireObj.message = _api2wire_uint_8_list(apiObj.message);
    wireObj.pub_key = _api2wire_uint_8_list(apiObj.pubKey);
  }

  void _api_fill_to_wire_pbkdf_derive_req(
      PBKDFDeriveReq apiObj, wire_PBKDFDeriveReq wireObj) {
    wireObj.password = _api2wire_uint_8_list(apiObj.password);
    wireObj.salt = _api2wire_uint_8_list(apiObj.salt);
    wireObj.c = _api2wire_u32(apiObj.c);
  }

  void _api_fill_to_wire_phrase_to_seed_req(
      PhraseToSeedReq apiObj, wire_PhraseToSeedReq wireObj) {
    wireObj.phrase = _api2wire_String(apiObj.phrase);
    wireObj.password = _api2wire_String(apiObj.password);
  }

  void _api_fill_to_wire_script_derive_req(
      ScriptDeriveReq apiObj, wire_ScriptDeriveReq wireObj) {
    wireObj.password = _api2wire_uint_8_list(apiObj.password);
    wireObj.salt = _api2wire_uint_8_list(apiObj.salt);
    wireObj.n = _api2wire_u32(apiObj.n);
    wireObj.p = _api2wire_u32(apiObj.p);
    wireObj.r = _api2wire_u32(apiObj.r);
  }

  void _api_fill_to_wire_secp_256_k_1_from_seed_req(
      Secp256k1FromSeedReq apiObj, wire_Secp256k1FromSeedReq wireObj) {
    wireObj.seed = _api2wire_uint_8_list(apiObj.seed);
  }

  void _api_fill_to_wire_secp_256_k_1_sign_with_seed_req(
      Secp256k1SignWithSeedReq apiObj, wire_Secp256k1SignWithSeedReq wireObj) {
    wireObj.msg = _api2wire_uint_8_list(apiObj.msg);
    wireObj.seed = _api2wire_uint_8_list(apiObj.seed);
  }

  void _api_fill_to_wire_secp_256_k_1_verify_req(
      Secp256k1VerifyReq apiObj, wire_Secp256k1VerifyReq wireObj) {
    wireObj.message_hash = _api2wire_uint_8_list(apiObj.messageHash);
    wireObj.signature_bytes = _api2wire_uint_8_list(apiObj.signatureBytes);
    wireObj.public_key_bytes = _api2wire_uint_8_list(apiObj.publicKeyBytes);
  }

  void _api_fill_to_wire_seed_to_key_req(
      SeedToKeyReq apiObj, wire_SeedToKeyReq wireObj) {
    wireObj.seed = _api2wire_uint_8_list(apiObj.seed);
    wireObj.path = _api2wire_String(apiObj.path);
  }
}

// Section: wire2api
bool _wire2api_bool(dynamic raw) {
  return raw as bool;
}

ED25519Res _wire2api_ed_25519_res(dynamic raw) {
  final arr = raw as List<dynamic>;
  if (arr.length != 2)
    throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
  return ED25519Res(
    seed: _wire2api_uint_8_list(arr[0]),
    publicKey: _wire2api_uint_8_list(arr[1]),
  );
}

KeyDerivedRes _wire2api_key_derived_res(dynamic raw) {
  final arr = raw as List<dynamic>;
  if (arr.length != 2)
    throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
  return KeyDerivedRes(
    leftBits: _wire2api_uint_8_list(arr[0]),
    rightBits: _wire2api_uint_8_list(arr[1]),
  );
}

Uint8List? _wire2api_opt_uint_8_list(dynamic raw) {
  return raw == null ? null : _wire2api_uint_8_list(raw);
}

Secp256k1IdentityExport _wire2api_secp_256_k_1_identity_export(dynamic raw) {
  final arr = raw as List<dynamic>;
  if (arr.length != 2)
    throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
  return Secp256k1IdentityExport(
    privateKeyHash: _wire2api_uint_8_list(arr[0]),
    derEncodedPublicKey: _wire2api_uint_8_list(arr[1]),
  );
}

SignatureFFI _wire2api_signature_ffi(dynamic raw) {
  final arr = raw as List<dynamic>;
  if (arr.length != 2)
    throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
  return SignatureFFI(
    publicKey: _wire2api_opt_uint_8_list(arr[0]),
    signature: _wire2api_opt_uint_8_list(arr[1]),
  );
}

int _wire2api_u8(dynamic raw) {
  return raw as int;
}

Uint8List _wire2api_uint_8_list(dynamic raw) {
  return raw as Uint8List;
}

// ignore_for_file: camel_case_types, non_constant_identifier_names, avoid_positional_boolean_parameters, annotate_overrides, constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.

/// generated by flutter_rust_bridge
class AgentDartWire implements FlutterRustBridgeWireBase {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  AgentDartWire(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  AgentDartWire.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void wire_mnemonic_phrase_to_seed(
    int port_,
    ffi.Pointer<wire_PhraseToSeedReq> req,
  ) {
    return _wire_mnemonic_phrase_to_seed(
      port_,
      req,
    );
  }

  late final _wire_mnemonic_phrase_to_seedPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_PhraseToSeedReq>)>>(
      'wire_mnemonic_phrase_to_seed');
  late final _wire_mnemonic_phrase_to_seed = _wire_mnemonic_phrase_to_seedPtr
      .asFunction<void Function(int, ffi.Pointer<wire_PhraseToSeedReq>)>();

  void wire_mnemonic_seed_to_key(
    int port_,
    ffi.Pointer<wire_SeedToKeyReq> req,
  ) {
    return _wire_mnemonic_seed_to_key(
      port_,
      req,
    );
  }

  late final _wire_mnemonic_seed_to_keyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_SeedToKeyReq>)>>('wire_mnemonic_seed_to_key');
  late final _wire_mnemonic_seed_to_key = _wire_mnemonic_seed_to_keyPtr
      .asFunction<void Function(int, ffi.Pointer<wire_SeedToKeyReq>)>();

  void wire_bls_init(
    int port_,
  ) {
    return _wire_bls_init(
      port_,
    );
  }

  late final _wire_bls_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_bls_init');
  late final _wire_bls_init =
      _wire_bls_initPtr.asFunction<void Function(int)>();

  void wire_bls_verify(
    int port_,
    ffi.Pointer<wire_BLSVerifyReq> req,
  ) {
    return _wire_bls_verify(
      port_,
      req,
    );
  }

  late final _wire_bls_verifyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64, ffi.Pointer<wire_BLSVerifyReq>)>>('wire_bls_verify');
  late final _wire_bls_verify = _wire_bls_verifyPtr
      .asFunction<void Function(int, ffi.Pointer<wire_BLSVerifyReq>)>();

  void wire_ed25519_from_seed(
    int port_,
    ffi.Pointer<wire_ED25519FromSeedReq> req,
  ) {
    return _wire_ed25519_from_seed(
      port_,
      req,
    );
  }

  late final _wire_ed25519_from_seedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_ED25519FromSeedReq>)>>('wire_ed25519_from_seed');
  late final _wire_ed25519_from_seed = _wire_ed25519_from_seedPtr
      .asFunction<void Function(int, ffi.Pointer<wire_ED25519FromSeedReq>)>();

  void wire_ed25519_sign(
    int port_,
    ffi.Pointer<wire_ED25519SignReq> req,
  ) {
    return _wire_ed25519_sign(
      port_,
      req,
    );
  }

  late final _wire_ed25519_signPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_ED25519SignReq>)>>('wire_ed25519_sign');
  late final _wire_ed25519_sign = _wire_ed25519_signPtr
      .asFunction<void Function(int, ffi.Pointer<wire_ED25519SignReq>)>();

  void wire_ed25519_verify(
    int port_,
    ffi.Pointer<wire_ED25519VerifyReq> req,
  ) {
    return _wire_ed25519_verify(
      port_,
      req,
    );
  }

  late final _wire_ed25519_verifyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_ED25519VerifyReq>)>>('wire_ed25519_verify');
  late final _wire_ed25519_verify = _wire_ed25519_verifyPtr
      .asFunction<void Function(int, ffi.Pointer<wire_ED25519VerifyReq>)>();

  void wire_secp256k1_from_seed(
    int port_,
    ffi.Pointer<wire_Secp256k1FromSeedReq> req,
  ) {
    return _wire_secp256k1_from_seed(
      port_,
      req,
    );
  }

  late final _wire_secp256k1_from_seedPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64, ffi.Pointer<wire_Secp256k1FromSeedReq>)>>(
      'wire_secp256k1_from_seed');
  late final _wire_secp256k1_from_seed = _wire_secp256k1_from_seedPtr
      .asFunction<void Function(int, ffi.Pointer<wire_Secp256k1FromSeedReq>)>();

  void wire_secp256k1_sign(
    int port_,
    ffi.Pointer<wire_Secp256k1SignWithSeedReq> req,
  ) {
    return _wire_secp256k1_sign(
      port_,
      req,
    );
  }

  late final _wire_secp256k1_signPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64, ffi.Pointer<wire_Secp256k1SignWithSeedReq>)>>(
      'wire_secp256k1_sign');
  late final _wire_secp256k1_sign = _wire_secp256k1_signPtr.asFunction<
      void Function(int, ffi.Pointer<wire_Secp256k1SignWithSeedReq>)>();

  void wire_secp256k1_verify(
    int port_,
    ffi.Pointer<wire_Secp256k1VerifyReq> req,
  ) {
    return _wire_secp256k1_verify(
      port_,
      req,
    );
  }

  late final _wire_secp256k1_verifyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_Secp256k1VerifyReq>)>>('wire_secp256k1_verify');
  late final _wire_secp256k1_verify = _wire_secp256k1_verifyPtr
      .asFunction<void Function(int, ffi.Pointer<wire_Secp256k1VerifyReq>)>();

  void wire_aes_128_ctr_encrypt(
    int port_,
    ffi.Pointer<wire_AesEncryptReq> req,
  ) {
    return _wire_aes_128_ctr_encrypt(
      port_,
      req,
    );
  }

  late final _wire_aes_128_ctr_encryptPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_AesEncryptReq>)>>('wire_aes_128_ctr_encrypt');
  late final _wire_aes_128_ctr_encrypt = _wire_aes_128_ctr_encryptPtr
      .asFunction<void Function(int, ffi.Pointer<wire_AesEncryptReq>)>();

  void wire_aes_128_ctr_decrypt(
    int port_,
    ffi.Pointer<wire_AesDecryptReq> req,
  ) {
    return _wire_aes_128_ctr_decrypt(
      port_,
      req,
    );
  }

  late final _wire_aes_128_ctr_decryptPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_AesDecryptReq>)>>('wire_aes_128_ctr_decrypt');
  late final _wire_aes_128_ctr_decrypt = _wire_aes_128_ctr_decryptPtr
      .asFunction<void Function(int, ffi.Pointer<wire_AesDecryptReq>)>();

  void wire_pbkdf2_derive_key(
    int port_,
    ffi.Pointer<wire_PBKDFDeriveReq> req,
  ) {
    return _wire_pbkdf2_derive_key(
      port_,
      req,
    );
  }

  late final _wire_pbkdf2_derive_keyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_PBKDFDeriveReq>)>>('wire_pbkdf2_derive_key');
  late final _wire_pbkdf2_derive_key = _wire_pbkdf2_derive_keyPtr
      .asFunction<void Function(int, ffi.Pointer<wire_PBKDFDeriveReq>)>();

  void wire_scrypt_derive_key(
    int port_,
    ffi.Pointer<wire_ScriptDeriveReq> req,
  ) {
    return _wire_scrypt_derive_key(
      port_,
      req,
    );
  }

  late final _wire_scrypt_derive_keyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_ScriptDeriveReq>)>>('wire_scrypt_derive_key');
  late final _wire_scrypt_derive_key = _wire_scrypt_derive_keyPtr
      .asFunction<void Function(int, ffi.Pointer<wire_ScriptDeriveReq>)>();

  ffi.Pointer<wire_AesDecryptReq> new_box_autoadd_aes_decrypt_req() {
    return _new_box_autoadd_aes_decrypt_req();
  }

  late final _new_box_autoadd_aes_decrypt_reqPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_AesDecryptReq> Function()>>(
          'new_box_autoadd_aes_decrypt_req');
  late final _new_box_autoadd_aes_decrypt_req =
      _new_box_autoadd_aes_decrypt_reqPtr
          .asFunction<ffi.Pointer<wire_AesDecryptReq> Function()>();

  ffi.Pointer<wire_AesEncryptReq> new_box_autoadd_aes_encrypt_req() {
    return _new_box_autoadd_aes_encrypt_req();
  }

  late final _new_box_autoadd_aes_encrypt_reqPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_AesEncryptReq> Function()>>(
          'new_box_autoadd_aes_encrypt_req');
  late final _new_box_autoadd_aes_encrypt_req =
      _new_box_autoadd_aes_encrypt_reqPtr
          .asFunction<ffi.Pointer<wire_AesEncryptReq> Function()>();

  ffi.Pointer<wire_BLSVerifyReq> new_box_autoadd_bls_verify_req() {
    return _new_box_autoadd_bls_verify_req();
  }

  late final _new_box_autoadd_bls_verify_reqPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_BLSVerifyReq> Function()>>(
          'new_box_autoadd_bls_verify_req');
  late final _new_box_autoadd_bls_verify_req =
      _new_box_autoadd_bls_verify_reqPtr
          .asFunction<ffi.Pointer<wire_BLSVerifyReq> Function()>();

  ffi.Pointer<wire_ED25519FromSeedReq>
      new_box_autoadd_ed_25519_from_seed_req() {
    return _new_box_autoadd_ed_25519_from_seed_req();
  }

  late final _new_box_autoadd_ed_25519_from_seed_reqPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<wire_ED25519FromSeedReq> Function()>>(
      'new_box_autoadd_ed_25519_from_seed_req');
  late final _new_box_autoadd_ed_25519_from_seed_req =
      _new_box_autoadd_ed_25519_from_seed_reqPtr
          .asFunction<ffi.Pointer<wire_ED25519FromSeedReq> Function()>();

  ffi.Pointer<wire_ED25519SignReq> new_box_autoadd_ed_25519_sign_req() {
    return _new_box_autoadd_ed_25519_sign_req();
  }

  late final _new_box_autoadd_ed_25519_sign_reqPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_ED25519SignReq> Function()>>(
          'new_box_autoadd_ed_25519_sign_req');
  late final _new_box_autoadd_ed_25519_sign_req =
      _new_box_autoadd_ed_25519_sign_reqPtr
          .asFunction<ffi.Pointer<wire_ED25519SignReq> Function()>();

  ffi.Pointer<wire_ED25519VerifyReq> new_box_autoadd_ed_25519_verify_req() {
    return _new_box_autoadd_ed_25519_verify_req();
  }

  late final _new_box_autoadd_ed_25519_verify_reqPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<wire_ED25519VerifyReq> Function()>>(
      'new_box_autoadd_ed_25519_verify_req');
  late final _new_box_autoadd_ed_25519_verify_req =
      _new_box_autoadd_ed_25519_verify_reqPtr
          .asFunction<ffi.Pointer<wire_ED25519VerifyReq> Function()>();

  ffi.Pointer<wire_PBKDFDeriveReq> new_box_autoadd_pbkdf_derive_req() {
    return _new_box_autoadd_pbkdf_derive_req();
  }

  late final _new_box_autoadd_pbkdf_derive_reqPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_PBKDFDeriveReq> Function()>>(
          'new_box_autoadd_pbkdf_derive_req');
  late final _new_box_autoadd_pbkdf_derive_req =
      _new_box_autoadd_pbkdf_derive_reqPtr
          .asFunction<ffi.Pointer<wire_PBKDFDeriveReq> Function()>();

  ffi.Pointer<wire_PhraseToSeedReq> new_box_autoadd_phrase_to_seed_req() {
    return _new_box_autoadd_phrase_to_seed_req();
  }

  late final _new_box_autoadd_phrase_to_seed_reqPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_PhraseToSeedReq> Function()>>(
          'new_box_autoadd_phrase_to_seed_req');
  late final _new_box_autoadd_phrase_to_seed_req =
      _new_box_autoadd_phrase_to_seed_reqPtr
          .asFunction<ffi.Pointer<wire_PhraseToSeedReq> Function()>();

  ffi.Pointer<wire_ScriptDeriveReq> new_box_autoadd_script_derive_req() {
    return _new_box_autoadd_script_derive_req();
  }

  late final _new_box_autoadd_script_derive_reqPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_ScriptDeriveReq> Function()>>(
          'new_box_autoadd_script_derive_req');
  late final _new_box_autoadd_script_derive_req =
      _new_box_autoadd_script_derive_reqPtr
          .asFunction<ffi.Pointer<wire_ScriptDeriveReq> Function()>();

  ffi.Pointer<wire_Secp256k1FromSeedReq>
      new_box_autoadd_secp_256_k_1_from_seed_req() {
    return _new_box_autoadd_secp_256_k_1_from_seed_req();
  }

  late final _new_box_autoadd_secp_256_k_1_from_seed_reqPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_Secp256k1FromSeedReq>
              Function()>>('new_box_autoadd_secp_256_k_1_from_seed_req');
  late final _new_box_autoadd_secp_256_k_1_from_seed_req =
      _new_box_autoadd_secp_256_k_1_from_seed_reqPtr
          .asFunction<ffi.Pointer<wire_Secp256k1FromSeedReq> Function()>();

  ffi.Pointer<wire_Secp256k1SignWithSeedReq>
      new_box_autoadd_secp_256_k_1_sign_with_seed_req() {
    return _new_box_autoadd_secp_256_k_1_sign_with_seed_req();
  }

  late final _new_box_autoadd_secp_256_k_1_sign_with_seed_reqPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_Secp256k1SignWithSeedReq>
              Function()>>('new_box_autoadd_secp_256_k_1_sign_with_seed_req');
  late final _new_box_autoadd_secp_256_k_1_sign_with_seed_req =
      _new_box_autoadd_secp_256_k_1_sign_with_seed_reqPtr
          .asFunction<ffi.Pointer<wire_Secp256k1SignWithSeedReq> Function()>();

  ffi.Pointer<wire_Secp256k1VerifyReq>
      new_box_autoadd_secp_256_k_1_verify_req() {
    return _new_box_autoadd_secp_256_k_1_verify_req();
  }

  late final _new_box_autoadd_secp_256_k_1_verify_reqPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<wire_Secp256k1VerifyReq> Function()>>(
      'new_box_autoadd_secp_256_k_1_verify_req');
  late final _new_box_autoadd_secp_256_k_1_verify_req =
      _new_box_autoadd_secp_256_k_1_verify_reqPtr
          .asFunction<ffi.Pointer<wire_Secp256k1VerifyReq> Function()>();

  ffi.Pointer<wire_SeedToKeyReq> new_box_autoadd_seed_to_key_req() {
    return _new_box_autoadd_seed_to_key_req();
  }

  late final _new_box_autoadd_seed_to_key_reqPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_SeedToKeyReq> Function()>>(
          'new_box_autoadd_seed_to_key_req');
  late final _new_box_autoadd_seed_to_key_req =
      _new_box_autoadd_seed_to_key_reqPtr
          .asFunction<ffi.Pointer<wire_SeedToKeyReq> Function()>();

  ffi.Pointer<wire_uint_8_list> new_uint_8_list(
    int len,
  ) {
    return _new_uint_8_list(
      len,
    );
  }

  late final _new_uint_8_listPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_uint_8_list> Function(
              ffi.Int32)>>('new_uint_8_list');
  late final _new_uint_8_list = _new_uint_8_listPtr
      .asFunction<ffi.Pointer<wire_uint_8_list> Function(int)>();

  void free_WireSyncReturnStruct(
    WireSyncReturnStruct val,
  ) {
    return _free_WireSyncReturnStruct(
      val,
    );
  }

  late final _free_WireSyncReturnStructPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WireSyncReturnStruct)>>(
          'free_WireSyncReturnStruct');
  late final _free_WireSyncReturnStruct = _free_WireSyncReturnStructPtr
      .asFunction<void Function(WireSyncReturnStruct)>();

  void store_dart_post_cobject(
    DartPostCObjectFnType ptr,
  ) {
    return _store_dart_post_cobject(
      ptr,
    );
  }

  late final _store_dart_post_cobjectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(DartPostCObjectFnType)>>(
          'store_dart_post_cobject');
  late final _store_dart_post_cobject = _store_dart_post_cobjectPtr
      .asFunction<void Function(DartPostCObjectFnType)>();
}

class wire_uint_8_list extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> ptr;

  @ffi.Int32()
  external int len;
}

class wire_PhraseToSeedReq extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> phrase;

  external ffi.Pointer<wire_uint_8_list> password;
}

class wire_SeedToKeyReq extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> seed;

  external ffi.Pointer<wire_uint_8_list> path;
}

class wire_BLSVerifyReq extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> signature;

  external ffi.Pointer<wire_uint_8_list> message;

  external ffi.Pointer<wire_uint_8_list> public_key;
}

class wire_ED25519FromSeedReq extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> seed;
}

class wire_ED25519SignReq extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> seed;

  external ffi.Pointer<wire_uint_8_list> message;
}

class wire_ED25519VerifyReq extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> sig;

  external ffi.Pointer<wire_uint_8_list> message;

  external ffi.Pointer<wire_uint_8_list> pub_key;
}

class wire_Secp256k1FromSeedReq extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> seed;
}

class wire_Secp256k1SignWithSeedReq extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> msg;

  external ffi.Pointer<wire_uint_8_list> seed;
}

class wire_Secp256k1VerifyReq extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> message_hash;

  external ffi.Pointer<wire_uint_8_list> signature_bytes;

  external ffi.Pointer<wire_uint_8_list> public_key_bytes;
}

class wire_AesEncryptReq extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> key;

  external ffi.Pointer<wire_uint_8_list> iv;

  external ffi.Pointer<wire_uint_8_list> message;
}

class wire_AesDecryptReq extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> key;

  external ffi.Pointer<wire_uint_8_list> iv;

  external ffi.Pointer<wire_uint_8_list> cipher_text;
}

class wire_PBKDFDeriveReq extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> password;

  external ffi.Pointer<wire_uint_8_list> salt;

  @ffi.Uint32()
  external int c;
}

class wire_ScriptDeriveReq extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> password;

  external ffi.Pointer<wire_uint_8_list> salt;

  @ffi.Uint32()
  external int n;

  @ffi.Uint32()
  external int p;

  @ffi.Uint32()
  external int r;
}

typedef DartPostCObjectFnType = ffi.Pointer<
    ffi.NativeFunction<ffi.Uint8 Function(DartPort, ffi.Pointer<ffi.Void>)>>;
typedef DartPort = ffi.Int64;

const int ECB = 0;

const int CBC = 1;

const int CFB1 = 2;

const int CFB2 = 3;

const int CFB4 = 5;

const int OFB1 = 14;

const int OFB2 = 15;

const int OFB4 = 17;

const int OFB8 = 21;

const int OFB16 = 29;

const int CTR1 = 30;

const int CTR2 = 31;

const int CTR4 = 33;

const int CTR8 = 37;

const int CTR16 = 45;

const int CHUNK = 64;

const int MODBYTES = 48;

const int BASEBITS = 58;

const int NLEN = 7;

const int DNLEN = 14;

const int HBITS = 29;

const int BIGBITS = 384;

const int BLS_OK = 0;

const int BLS_FAIL = -1;

const int WEIERSTRASS = 0;

const int EDWARDS = 1;

const int MONTGOMERY = 2;

const int NOT = 0;

const int BN = 1;

const int BLS12 = 2;

const int BLS24 = 3;

const int BLS48 = 4;

const int D_TYPE = 0;

const int M_TYPE = 1;

const int POSITIVEX = 0;

const int NEGATIVEX = 1;

const int CURVETYPE = 0;

const int CURVE_A = 0;

const int CURVE_PAIRING_TYPE = 2;

const int SEXTIC_TWIST = 1;

const int SIGN_OF_X = 1;

const int ATE_BITS = 65;

const int G2_TABLE = 69;

const int HTC_ISO = 11;

const int HTC_ISO_G2 = 3;

const int ALLOW_ALT_COMPRESS = 1;

const int HASH_TYPE = 32;

const int AESKEY = 16;

const int NOT_SPECIAL = 0;

const int PSEUDO_MERSENNE = 1;

const int MONTGOMERY_FRIENDLY = 2;

const int GENERALISED_MERSENNE = 3;

const int NEGATOWER = 0;

const int POSITOWER = 1;

const int MODBITS = 381;

const int PM1D2 = 1;

const int RIADZ = 11;

const int RIADZG2A = -2;

const int RIADZG2B = -1;

const int MODTYPE = 0;

const int QNRI = 0;

const int TOWER = 0;

const int FEXCESS = 33554431;

const int BIG_ENDIAN_SIGN = 0;

const int ZERO = 0;

const int ONE = 1;

const int SPARSEST = 2;

const int SPARSER = 3;

const int SPARSE = 4;

const int DENSE = 5;

const int BAD_PARAMS = -11;

const int INVALID_POINT = -14;

const int WRONG_ORDER = -18;

const int BAD_PIN = -19;

const int SHA256 = 32;

const int SHA384 = 48;

const int SHA512 = 64;

const int MAXPIN = 10000;

const int PBLEN = 14;

const int CURVE_COF_I = 0;

const int CURVE_B_I = 4;

const int USE_GLV = 1;

const int USE_GS_G2 = 1;

const int USE_GS_GT = 1;

const int GT_STRONG = 0;

const int MC_SHA2 = 2;

const int MC_SHA3 = 3;

const int HASH224 = 28;

const int HASH256 = 32;

const int HASH384 = 48;

const int HASH512 = 64;

const int SHAKE128 = 16;

const int SHAKE256 = 32;

const int KEY_LENGTH = 32;

const int KEY_LENGTH_AES = 16;

const int BMASK = 2147483647;

const int HMASK = 536870911;

const int MCONST = 140737475470229501;
